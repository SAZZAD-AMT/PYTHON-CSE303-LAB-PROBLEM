
def inverse_3X3_matrix(A):

    det =A[0][0] * ( (A[1][1] * A[2][2]) - (A[1][2] * A[2][1])) - \
           A[0][1] * ((A[1][0] * A[2][2]) - (A[1][2] * A[2][0])) + \
           A[0][2] * ((A[1][0] * A[2][1]) - (A[1][1] * A[2][0]))

    co_fctr_1 = [(A[1][1] * A[2][2]) - (A[1][2] * A[2][1]),
                 -((A[1][0] * A[2][2]) - (A[1][2] * A[2][0])),
                 (A[1][0] * A[2][1]) - (A[1][1] * A[2][0])]

    co_fctr_2 = [-((A[0][1] * A[2][2]) - (A[0][2] * A[2][1])),
                 (A[0][0] * A[2][2]) - (A[0][2] * A[2][0]),
                 -((A[0][0] * A[2][1]) - (A[0][1] * A[2][0]))]

    co_fctr_3 = [(A[0][1] * A[1][2]) - (A[0][2] * A[1][1]),
                 -((A[0][0] * A[1][2]) - (A[0][2] * A[1][0])),
                 (A[0][0] * A[1][1]) - (A[0][1] * A[1][0])]

    inv_list = [[1 / det * (co_fctr_1[0]), 1 / det * (co_fctr_2[0]), 1 / det * (co_fctr_3[0])],
                [1 / det * (co_fctr_1[1]), 1 / det* (co_fctr_2[1]), 1 / det * (co_fctr_3[1])],
                [1 / det * (co_fctr_1[2]), 1 / det* (co_fctr_2[2]), 1 / det * (co_fctr_3[2])]]

    return inv_list