<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="38.15599999999997" tests="6376" failures="0" skipped="853">
  <testsuite name="Root Suite" timestamp="2021-11-08T22:02:58" tests="0" failures="0" time="0">
  </testsuite>
  <testsuite name="Activation Manager" timestamp="2021-11-08T22:02:58" tests="0" file="/home/don/development/vsc/vscode-python/out/test/activation/activationManager.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Language Server Activation - ActivationManager" timestamp="2021-11-08T22:02:58" tests="10" file="/home/don/development/vsc/vscode-python/out/test/activation/activationManager.unit.test.js" failures="0" time="0.011000000000000001">
    <testcase name="Activation Manager Language Server Activation - ActivationManager Initialize will add event handlers and will dispose them when running dispose" time="0.002" classname="Initialize will add event handlers and will dispose them when running dispose">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager Remove text document opened handler if there is only one workspace" time="0.001" classname="Remove text document opened handler if there is only one workspace">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager Activate workspace specific to the resource in case of Multiple workspaces when a file is opened" time="0.005" classname="Activate workspace specific to the resource in case of Multiple workspaces when a file is opened">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager Function activateWorkspace() will be filtered to current resource" time="0" classname="Function activateWorkspace() will be filtered to current resource">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager If in Deprecate PythonPath experiment, method activateWorkspace() will copy old interpreter storage values to new" time="0" classname="If in Deprecate PythonPath experiment, method activateWorkspace() will copy old interpreter storage values to new">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager The same workspace isn&apos;t activated more than once" time="0.001" classname="The same workspace isn&apos;t activated more than once">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager If doc opened is not python, return" time="0" classname="If doc opened is not python, return">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager If we have opened a doc that does not belong to workspace, then do nothing" time="0" classname="If we have opened a doc that does not belong to workspace, then do nothing">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager If workspace corresponding to the doc has already been activated, then do nothing" time="0" classname="If workspace corresponding to the doc has already been activated, then do nothing">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - ActivationManager List of activated workspaces is updated &amp; Handler docOpenedHandler is disposed in case no. of workspace folders decreases to one" time="0.002" classname="List of activated workspaces is updated &amp; Handler docOpenedHandler is disposed in case no. of workspace folders decreases to one">
    </testcase>
  </testsuite>
  <testsuite name="Language Server Activation - activate()" timestamp="2021-11-08T22:02:58" tests="2" file="/home/don/development/vsc/vscode-python/out/test/activation/activationManager.unit.test.js" failures="0" time="0">
    <testcase name="Activation Manager Language Server Activation - activate() Execution goes as expected if there are no errors" time="0" classname="Execution goes as expected if there are no errors">
    </testcase>
    <testcase name="Activation Manager Language Server Activation - activate() Throws error if execution fails" time="0" classname="Throws error if execution fails">
    </testcase>
  </testsuite>
  <testsuite name="Language Server Activation - ActivationService" timestamp="2021-11-08T22:02:58" tests="0" file="/home/don/development/vsc/vscode-python/out/test/activation/activationService.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test activation - Jedi is enabled" timestamp="2021-11-08T22:02:58" tests="8" file="/home/don/development/vsc/vscode-python/out/test/activation/activationService.unit.test.js" failures="0" time="0.018000000000000002">
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled LS is supported" time="0.002" classname="LS is supported">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled LS is not supported" time="0.002" classname="LS is not supported">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled Activator must be activated" time="0.002" classname="Activator must be activated">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled Activator must be deactivated" time="0.003" classname="Activator must be deactivated">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled No language service" time="0.001" classname="No language service">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled Prompt user to reload VS Code and reload, when languageServer setting is toggled" time="0.003" classname="Prompt user to reload VS Code and reload, when languageServer setting is toggled">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled Do not prompt user to reload VS Code when setting is not changed" time="0.003" classname="Do not prompt user to reload VS Code when setting is not changed">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test activation - Jedi is enabled Jedi is only started once" time="0.002" classname="Jedi is only started once">
    </testcase>
  </testsuite>
  <testsuite name="Test language server swap when using Python 2.7" timestamp="2021-11-08T22:02:58" tests="4" file="/home/don/development/vsc/vscode-python/out/test/activation/activationService.unit.test.js" failures="0" time="0.004">
    <testcase name="Language Server Activation - ActivationService Test language server swap when using Python 2.7 When language server setting explicitly set to Jedi and using Python 2.7, use a language server of type None" time="0.001" classname="When language server setting explicitly set to Jedi and using Python 2.7, use a language server of type None">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test language server swap when using Python 2.7 When language server setting explicitly set to Pylance and using Python 2.7, use a language server of type Pylance" time="0.001" classname="When language server setting explicitly set to Pylance and using Python 2.7, use a language server of type Pylance">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test language server swap when using Python 2.7 When language server setting explicitly set to None and using Python 2.7, use a language server of type None" time="0.001" classname="When language server setting explicitly set to None and using Python 2.7, use a language server of type None">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test language server swap when using Python 2.7 When default language server setting set to true and using Python 2.7, use Pylance" time="0.001" classname="When default language server setting set to true and using Python 2.7, use Pylance">
    </testcase>
  </testsuite>
  <testsuite name="Test sendTelemetryForChosenLanguageServer()" timestamp="2021-11-08T22:02:58" tests="4" file="/home/don/development/vsc/vscode-python/out/test/activation/activationService.unit.test.js" failures="0" time="0.001">
    <testcase name="Language Server Activation - ActivationService Test sendTelemetryForChosenLanguageServer() Track current LS usage for first usage" time="0.001" classname="Track current LS usage for first usage">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test sendTelemetryForChosenLanguageServer() Track switch to LS" time="0" classname="Track switch to LS">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test sendTelemetryForChosenLanguageServer() Track switch to Jedi" time="0" classname="Track switch to Jedi">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Test sendTelemetryForChosenLanguageServer() Track startup value" time="0" classname="Track startup value">
    </testcase>
  </testsuite>
  <testsuite name="Function isJediUsingDefaultConfiguration()" timestamp="2021-11-08T22:02:59" tests="28" file="/home/don/development/vsc/vscode-python/out/test/activation/activationService.unit.test.js" failures="0" time="0.02100000000000001">
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns true for setting = {}" time="0.001" classname="Returns true for setting = {}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceFolderValue&quot;:true}" time="0.002" classname="Returns false for setting = {&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceFolderValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:true}" time="0" classname="Returns false for setting = {&quot;workspaceValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}" time="0" classname="Returns false for setting = {&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}" time="0" classname="Returns false for setting = {&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;workspaceValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceFolderValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceFolderValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}" time="0" classname="Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false}" time="0" classname="Returns false for setting = {&quot;globalValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceFolderValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceFolderValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true}" time="0" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}" time="0" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}" time="0" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}" time="0.001" classname="Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}">
    </testcase>
    <testcase name="Language Server Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for settings = undefined" time="0.001" classname="Returns false for settings = undefined">
    </testcase>
  </testsuite>
  <testsuite name="Active resource service" timestamp="2021-11-08T22:02:59" tests="5" file="/home/don/development/vsc/vscode-python/out/test/activation/activeResource.unit.test.js" failures="0" time="0.001">
    <testcase name="Active resource service Return document uri if the active document is not new (has been saved)" time="0.001" classname="Return document uri if the active document is not new (has been saved)">
    </testcase>
    <testcase name="Active resource service Don&apos;t return document uri if the active document is new (still unsaved)" time="0" classname="Don&apos;t return document uri if the active document is new (still unsaved)">
    </testcase>
    <testcase name="Active resource service If no document is currently opened &amp; the workspace opened contains workspace folders, return the uri of the first workspace folder" time="0" classname="If no document is currently opened &amp; the workspace opened contains workspace folders, return the uri of the first workspace folder">
    </testcase>
    <testcase name="Active resource service If no document is currently opened &amp; no folder is opened, return undefined" time="0" classname="If no document is currently opened &amp; no folder is opened, return undefined">
    </testcase>
    <testcase name="Active resource service If no document is currently opened &amp; workspace contains no workspace folders, return undefined" time="0" classname="If no document is currently opened &amp; workspace contains no workspace folders, return undefined">
    </testcase>
  </testsuite>
  <testsuite name="Activation - setDefaultLanguageServer()" timestamp="2021-11-08T22:02:59" tests="2" file="/home/don/development/vsc/vscode-python/out/test/activation/defaultLanguageServer.unit.test.js" failures="0" time="0">
    <testcase name="Activation - setDefaultLanguageServer() Pylance not installed" time="0" classname="Pylance not installed">
    </testcase>
    <testcase name="Activation - setDefaultLanguageServer() Pylance installed" time="0" classname="Pylance installed">
    </testcase>
  </testsuite>
  <testsuite name="Extension survey prompt - shouldShowBanner()" timestamp="2021-11-08T22:02:59" tests="6" file="/home/don/development/vsc/vscode-python/out/test/activation/extensionSurvey.unit.test.js" failures="0" time="0.035">
    <testcase name="Extension survey prompt - shouldShowBanner() Returns false if do not show again is clicked" time="0" classname="Returns false if do not show again is clicked">
    </testcase>
    <testcase name="Extension survey prompt - shouldShowBanner() Returns false if prompt is disabled for a while" time="0" classname="Returns false if prompt is disabled for a while">
    </testcase>
    <testcase name="Extension survey prompt - shouldShowBanner() Returns false if user is not in the random sampling" time="0.013" classname="Returns false if user is not in the random sampling">
    </testcase>
    <testcase name="Extension survey prompt - shouldShowBanner() Returns true if user is in the random sampling" time="0" classname="Returns true if user is in the random sampling">
    </testcase>
    <testcase name="Extension survey prompt - shouldShowBanner() Always return true if sample size is 100" time="0.01" classname="Always return true if sample size is 100">
    </testcase>
    <testcase name="Extension survey prompt - shouldShowBanner() Always return false if sample size is 0" time="0.012" classname="Always return false if sample size is 0">
    </testcase>
  </testsuite>
  <testsuite name="Extension survey prompt - showSurvey()" timestamp="2021-11-08T22:02:59" tests="4" file="/home/don/development/vsc/vscode-python/out/test/activation/extensionSurvey.unit.test.js" failures="0" time="0.002">
    <testcase name="Extension survey prompt - showSurvey() Launch survey if &apos;Yes&apos; option is clicked" time="0.001" classname="Launch survey if &apos;Yes&apos; option is clicked">
    </testcase>
    <testcase name="Extension survey prompt - showSurvey() Do nothing if &apos;Maybe later&apos; option is clicked" time="0" classname="Do nothing if &apos;Maybe later&apos; option is clicked">
    </testcase>
    <testcase name="Extension survey prompt - showSurvey() Do nothing if no option is clicked" time="0" classname="Do nothing if no option is clicked">
    </testcase>
    <testcase name="Extension survey prompt - showSurvey() Disable prompt if &apos;Do not show again&apos; option is clicked" time="0.001" classname="Disable prompt if &apos;Do not show again&apos; option is clicked">
    </testcase>
  </testsuite>
  <testsuite name="Extension survey prompt - activate()" timestamp="2021-11-08T22:02:59" tests="3" file="/home/don/development/vsc/vscode-python/out/test/activation/extensionSurvey.unit.test.js" failures="0" time="0.153">
    <testcase name="Extension survey prompt - activate() If user is not in &apos;ShowExtensionSurveyPrompt&apos; experiment, return immediately" time="0.001" classname="If user is not in &apos;ShowExtensionSurveyPrompt&apos; experiment, return immediately">
    </testcase>
    <testcase name="Extension survey prompt - activate() No survey is shown if shouldShowBanner() returns false and user is in &apos;ShowExtensionSurveyPrompt&apos; experiment" time="0.101" classname="No survey is shown if shouldShowBanner() returns false and user is in &apos;ShowExtensionSurveyPrompt&apos; experiment">
    </testcase>
    <testcase name="Extension survey prompt - activate() Survey is shown after waitTimeToShowSurvey if shouldShowBanner() returns true and user is in &apos;ShowExtensionSurveyPrompt&apos; experiment" time="0.051" classname="Survey is shown after waitTimeToShowSurvey if shouldShowBanner() returns true and user is in &apos;ShowExtensionSurveyPrompt&apos; experiment">
    </testcase>
  </testsuite>
  <testsuite name="Jedi LSP - analysis Options" timestamp="2021-11-08T22:02:59" tests="4" file="/home/don/development/vsc/vscode-python/out/test/activation/jedi/jediAnalysisOptions.unit.test.js" failures="0" time="0.001">
    <testcase name="Jedi LSP - analysis Options Validate defaults" time="0.001" classname="Validate defaults">
    </testcase>
    <testcase name="Jedi LSP - analysis Options Without extraPaths provided and no workspace" time="0" classname="Without extraPaths provided and no workspace">
    </testcase>
    <testcase name="Jedi LSP - analysis Options Without extraPaths provided" time="0" classname="Without extraPaths provided">
    </testcase>
    <testcase name="Jedi LSP - analysis Options With extraPaths provided" time="0" classname="With extraPaths provided">
    </testcase>
  </testsuite>
  <testsuite name="Pylance Language Server - Activator" timestamp="2021-11-08T22:02:59" tests="8" file="/home/don/development/vsc/vscode-python/out/test/activation/node/activator.unit.test.js" failures="0" time="0.002">
    <testcase name="Pylance Language Server - Activator Manager must be started without any workspace" time="0.001" classname="Manager must be started without any workspace">
    </testcase>
    <testcase name="Pylance Language Server - Activator Manager must be disposed" time="0" classname="Manager must be disposed">
    </testcase>
    <testcase name="Pylance Language Server - Activator Activator should check if Pylance is installed" time="0" classname="Activator should check if Pylance is installed">
    </testcase>
    <testcase name="Pylance Language Server - Activator Activator should not check if Pylance is installed in development mode" time="0" classname="Activator should not check if Pylance is installed in development mode">
    </testcase>
    <testcase name="Pylance Language Server - Activator When Pylance is not installed activator should show install prompt " time="0.001" classname="When Pylance is not installed activator should show install prompt ">
    </testcase>
    <testcase name="Pylance Language Server - Activator When Pylance is not installed activator should open Pylance install page if users clicks Yes" time="0" classname="When Pylance is not installed activator should open Pylance install page if users clicks Yes">
    </testcase>
    <testcase name="Pylance Language Server - Activator Activator should throw if Pylance is not installed" time="0" classname="Activator should throw if Pylance is not installed">
    </testcase>
    <testcase name="Pylance Language Server - Activator Manager must be started with resource for first available workspace" time="0" classname="Manager must be started with resource for first available workspace">
    </testcase>
  </testsuite>
  <testsuite name="Pylance Language Server - Analysis Options" timestamp="2021-11-08T22:02:59" tests="3" file="/home/don/development/vsc/vscode-python/out/test/activation/node/analysisOptions.unit.test.js" failures="0" time="0">
    <testcase name="Pylance Language Server - Analysis Options Workspace folder is undefined" time="0" classname="Workspace folder is undefined">
    </testcase>
    <testcase name="Pylance Language Server - Analysis Options Document filter matches all python" time="0" classname="Document filter matches all python">
    </testcase>
    <testcase name="Pylance Language Server - Analysis Options Initialization options include experimentation capability" time="0" classname="Initialization options include experimentation capability">
    </testcase>
  </testsuite>
  <testsuite name="Language Server - Change Handler" timestamp="2021-11-08T22:02:59" tests="19" file="/home/don/development/vsc/vscode-python/out/test/activation/node/languageServerChangeHandler.unit.test.js" failures="0" time="0.004">
    <testcase name="Language Server - Change Handler Handler should do nothing if language server is undefined and did not change" time="0" classname="Handler should do nothing if language server is undefined and did not change">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should do nothing if language server is None and did not change" time="0" classname="Handler should do nothing if language server is None and did not change">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should do nothing if language server is Jedi and did not change" time="0" classname="Handler should do nothing if language server is Jedi and did not change">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should do nothing if language server is Pylance and did not change" time="0" classname="Handler should do nothing if language server is Pylance and did not change">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should prompt for reload when language server type changes to None, Pylance is installed ans user clicks Reload" time="0" classname="Handler should prompt for reload when language server type changes to None, Pylance is installed ans user clicks Reload">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should prompt for reload when language server type changes to Jedi, Pylance is installed ans user clicks Reload" time="0.001" classname="Handler should prompt for reload when language server type changes to Jedi, Pylance is installed ans user clicks Reload">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should prompt for reload when language server type changes to Pylance, Pylance is installed ans user clicks Reload" time="0" classname="Handler should prompt for reload when language server type changes to Pylance, Pylance is installed ans user clicks Reload">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should not prompt for reload when language server type changes to None, Pylance is installed ans user does not clicks Reload" time="0" classname="Handler should not prompt for reload when language server type changes to None, Pylance is installed ans user does not clicks Reload">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should not prompt for reload when language server type changes to Jedi, Pylance is installed ans user does not clicks Reload" time="0.001" classname="Handler should not prompt for reload when language server type changes to Jedi, Pylance is installed ans user does not clicks Reload">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should not prompt for reload when language server type changes to Pylance, Pylance is installed ans user does not clicks Reload" time="0" classname="Handler should not prompt for reload when language server type changes to Pylance, Pylance is installed ans user does not clicks Reload">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should prompt for install when language server changes to Pylance and Pylance is not installed" time="0" classname="Handler should prompt for install when language server changes to Pylance and Pylance is not installed">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should open Pylance store page when language server changes to Pylance, Pylance is not installed and user clicks Yes" time="0.001" classname="Handler should open Pylance store page when language server changes to Pylance, Pylance is not installed and user clicks Yes">
    </testcase>
    <testcase name="Language Server - Change Handler Handler should not open Pylance store page when language server changes to Pylance, Pylance is not installed and user clicks No" time="0" classname="Handler should not open Pylance store page when language server changes to Pylance, Pylance is not installed and user clicks No">
    </testcase>
    <testcase name="Language Server - Change Handler If Pylance was not installed and now it is, reload should be called if user agreed to it" time="0" classname="If Pylance was not installed and now it is, reload should be called if user agreed to it">
    </testcase>
    <testcase name="Language Server - Change Handler If Pylance was not installed and now it is, reload should not be called if user refused it" time="0" classname="If Pylance was not installed and now it is, reload should not be called if user refused it">
    </testcase>
    <testcase name="Language Server - Change Handler Revert to Jedi with setting in global config" time="0" classname="Revert to Jedi with setting in global config">
    </testcase>
    <testcase name="Language Server - Change Handler Revert to Jedi with setting in workspace config" time="0.001" classname="Revert to Jedi with setting in workspace config">
    </testcase>
    <testcase name="Language Server - Change Handler Revert to Jedi with workspace folder setting does nothing" time="0" classname="Revert to Jedi with workspace folder setting does nothing">
    </testcase>
    <testcase name="Language Server - Change Handler Revert to Jedi with missing setting does nothing" time="0" classname="Revert to Jedi with missing setting does nothing">
    </testcase>
  </testsuite>
  <testsuite name="Node Language Server Folder Service" timestamp="2021-11-08T22:02:59" tests="1" file="/home/don/development/vsc/vscode-python/out/test/activation/node/languageServerFolderService.unit.test.js" failures="0" time="0">
    <testcase name="Node Language Server Folder Service Not installed" time="0" classname="Not installed">
    </testcase>
  </testsuite>
  <testsuite name="Valid configuration" timestamp="2021-11-08T22:02:59" tests="4" file="/home/don/development/vsc/vscode-python/out/test/activation/node/languageServerFolderService.unit.test.js" failures="0" time="0">
    <testcase name="Node Language Server Folder Service Valid configuration skipDownload is true" time="0" classname="skipDownload is true">
    </testcase>
    <testcase name="Node Language Server Folder Service Valid configuration Parsed version is correct" time="0" classname="Parsed version is correct">
    </testcase>
    <testcase name="Node Language Server Folder Service Valid configuration getLanguageServerFolderName" time="0" classname="getLanguageServerFolderName">
    </testcase>
    <testcase name="Node Language Server Folder Service Valid configuration Method getCurrentLanguageServerDirectory()" time="0" classname="Method getCurrentLanguageServerDirectory()">
    </testcase>
  </testsuite>
  <testsuite name="Language Server Output Channel" timestamp="2021-11-08T22:02:59" tests="4" file="/home/don/development/vsc/vscode-python/out/test/activation/outputChannel.unit.test.js" failures="0" time="0.005">
    <testcase name="Language Server Output Channel Create output channel if one does not exist before and return it" time="0" classname="Create output channel if one does not exist before and return it">
    </testcase>
    <testcase name="Language Server Output Channel Do not create output channel if one already exists" time="0.001" classname="Do not create output channel if one already exists">
    </testcase>
    <testcase name="Language Server Output Channel Register Command to display output panel" time="0.002" classname="Register Command to display output panel">
    </testcase>
    <testcase name="Language Server Output Channel Display panel when invoking command python.viewLanguageServerOutput" time="0.002" classname="Display panel when invoking command python.viewLanguageServerOutput">
    </testcase>
  </testsuite>
  <testsuite name="Unit Tests - Language Server Activation Service Registry" timestamp="2021-11-08T22:02:59" tests="2" file="/home/don/development/vsc/vscode-python/out/test/activation/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Unit Tests - Language Server Activation Service Registry Ensure services are registered: Node" time="0" classname="Ensure services are registered: Node">
    </testcase>
    <testcase name="Unit Tests - Language Server Activation Service Registry Ensure services are registered: Jedi" time="0" classname="Ensure services are registered: Jedi">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - ApplicationDiagnostics" timestamp="2021-11-08T22:02:59" tests="5" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/applicationDiagnostics.unit.test.js" failures="0" time="0.011">
    <testcase name="Application Diagnostics - ApplicationDiagnostics Register should register source maps" time="0" classname="Register should register source maps">
    </testcase>
    <testcase name="Application Diagnostics - ApplicationDiagnostics Performing Pre Startup Health Check must diagnose all validation checks" time="0.001" classname="Performing Pre Startup Health Check must diagnose all validation checks">
    </testcase>
    <testcase name="Application Diagnostics - ApplicationDiagnostics Performing Pre Startup Health Check must handles all validation checks only once either in background or foreground" time="0.003" classname="Performing Pre Startup Health Check must handles all validation checks only once either in background or foreground">
    </testcase>
    <testcase name="Application Diagnostics - ApplicationDiagnostics Diagnostics Returned by Pre Startup Health Checks must be logged" time="0.003" classname="Diagnostics Returned by Pre Startup Health Checks must be logged">
    </testcase>
    <testcase name="Application Diagnostics - ApplicationDiagnostics Ensure diagnostics run in foreground and background" time="0.004" classname="Ensure diagnostics run in foreground and background">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Checks Env Path Variable" timestamp="2021-11-08T22:02:59" tests="9" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/envPathVariable.unit.test.js" failures="0" time="0.005">
    <testcase name="Application Diagnostics - Checks Env Path Variable Can handle EnvPathVariable diagnostics" time="0" classname="Can handle EnvPathVariable diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Can not handle non-EnvPathVariable diagnostics" time="0" classname="Can not handle non-EnvPathVariable diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should return empty diagnostics for Mac" time="0.001" classname="Should return empty diagnostics for Mac">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should return empty diagnostics for Linux" time="0" classname="Should return empty diagnostics for Linux">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should return empty diagnostics for Windows if path variable is valid" time="0" classname="Should return empty diagnostics for Windows if path variable is valid">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should return single diagnostics for Windows if path contains &apos;&quot;&apos;" time="0.001" classname="Should return single diagnostics for Windows if path contains &apos;&quot;&apos;">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should not return diagnostics for Windows if path ends with delimiter" time="0.001" classname="Should not return diagnostics for Windows if path ends with delimiter">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should display three options in message displayed with 2 commands" time="0.002" classname="Should display three options in message displayed with 2 commands">
    </testcase>
    <testcase name="Application Diagnostics - Checks Env Path Variable Should not display a message if the diagnostic code has been ignored" time="0" classname="Should not display a message if the diagnostic code has been ignored">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Checks if launch.json is invalid" timestamp="2021-11-08T22:02:59" tests="19" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/invalidLaunchJsonDebugger.unit.test.js" failures="0" time="0.014000000000000005">
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Can handle all InvalidLaunchJsonDebugger diagnostics" time="0.001" classname="Can handle all InvalidLaunchJsonDebugger diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Can not handle non-InvalidLaunchJsonDebugger diagnostics" time="0" classname="Can not handle non-InvalidLaunchJsonDebugger diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return empty diagnostics if there are no workspace folders" time="0" classname="Should return empty diagnostics if there are no workspace folders">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return empty diagnostics if file launch.json does not exist" time="0.001" classname="Should return empty diagnostics if file launch.json does not exist">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return empty diagnostics if file launch.json does not contain strings &quot;pythonExperimental&quot; and &quot;debugStdLib&quot; " time="0.001" classname="Should return empty diagnostics if file launch.json does not contain strings &quot;pythonExperimental&quot; and &quot;debugStdLib&quot; ">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return InvalidDebuggerTypeDiagnostic if file launch.json contains string &quot;pythonExperimental&quot;" time="0.001" classname="Should return InvalidDebuggerTypeDiagnostic if file launch.json contains string &quot;pythonExperimental&quot;">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return JustMyCodeDiagnostic if file launch.json contains string &quot;debugStdLib&quot;" time="0.001" classname="Should return JustMyCodeDiagnostic if file launch.json contains string &quot;debugStdLib&quot;">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return ConfigPythonPathDiagnostic if file launch.json contains string &quot;{config:python.pythonPath}&quot;" time="0.001" classname="Should return ConfigPythonPathDiagnostic if file launch.json contains string &quot;{config:python.pythonPath}&quot;">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return ConfigPythonPathDiagnostic if file launch.json contains string &quot;{config:python.interpreterPath}&quot;" time="0" classname="Should return ConfigPythonPathDiagnostic if file launch.json contains string &quot;{config:python.interpreterPath}&quot;">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Should return both diagnostics if file launch.json contains string &quot;debugStdLib&quot; and  &quot;pythonExperimental&quot;" time="0" classname="Should return both diagnostics if file launch.json contains string &quot;debugStdLib&quot; and  &quot;pythonExperimental&quot;">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid All InvalidLaunchJsonDebugger diagnostics with `shouldShowPrompt` set to `true` should display a prompt with 2 buttons where clicking the first button will invoke a command" time="0.002" classname="All InvalidLaunchJsonDebugger diagnostics with `shouldShowPrompt` set to `true` should display a prompt with 2 buttons where clicking the first button will invoke a command">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid All InvalidLaunchJsonDebugger diagnostics with `shouldShowPrompt` set to `false` should directly fix launch.json" time="0" classname="All InvalidLaunchJsonDebugger diagnostics with `shouldShowPrompt` set to `false` should directly fix launch.json">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid All InvalidLaunchJsonDebugger diagnostics should display message twice if invoked twice" time="0.001" classname="All InvalidLaunchJsonDebugger diagnostics should display message twice if invoked twice">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Function fixLaunchJson() returns if there are no workspace folders" time="0" classname="Function fixLaunchJson() returns if there are no workspace folders">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid Function fixLaunchJson() returns if file launch.json does not exist" time="0.001" classname="Function fixLaunchJson() returns if file launch.json does not exist">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals JustMyCodeDiagnostic " time="0.001" classname="File launch.json is fixed correctly when code equals JustMyCodeDiagnostic ">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals InvalidDebuggerTypeDiagnostic " time="0.001" classname="File launch.json is fixed correctly when code equals InvalidDebuggerTypeDiagnostic ">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals ConsoleTypeDiagnostic " time="0.001" classname="File launch.json is fixed correctly when code equals ConsoleTypeDiagnostic ">
    </testcase>
    <testcase name="Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals ConfigPythonPathDiagnostic " time="0.001" classname="File launch.json is fixed correctly when code equals ConfigPythonPathDiagnostic ">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Checks Python Path in debugger" timestamp="2021-11-08T22:02:59" tests="15" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/invalidPythonPathInDebugger.unit.test.js" failures="0" time="0.07100000000000001">
    <testcase name="Application Diagnostics - Checks Python Path in debugger Can handle InvalidPythonPathInDebugger diagnostics" time="0" classname="Can handle InvalidPythonPathInDebugger diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Can not handle non-InvalidPythonPathInDebugger diagnostics" time="0.001" classname="Can not handle non-InvalidPythonPathInDebugger diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Should return empty diagnostics" time="0" classname="Should return empty diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerSettings diagnostic should display one option to with a command" time="0.001" classname="InvalidPythonPathInDebuggerSettings diagnostic should display one option to with a command">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerSettings diagnostic should display message once if invoked twice" time="0.001" classname="InvalidPythonPathInDebuggerSettings diagnostic should display message once if invoked twice">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerSettings diagnostic should display message twice if invoked twice" time="0.001" classname="InvalidPythonPathInDebuggerSettings diagnostic should display message twice if invoked twice">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerLaunch diagnostic should display one option to with a command" time="0" classname="InvalidPythonPathInDebuggerLaunch diagnostic should display one option to with a command">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure we get python path from config when path = ${command:python.interpreterPath}" time="0.013" classname="Ensure we get python path from config when path = ${command:python.interpreterPath}">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure ${workspaceFolder} is not expanded when a resource is not passed" time="0.01" classname="Ensure ${workspaceFolder} is not expanded when a resource is not passed">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure ${workspaceFolder} is expanded" time="0.011" classname="Ensure ${workspaceFolder} is expanded">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure ${env:XYZ123} is expanded" time="0.012" classname="Ensure ${env:XYZ123} is expanded">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure we get python path from config when path = undefined" time="0.001" classname="Ensure we get python path from config when path = undefined">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure we do not get python path from config when path is provided" time="0.01" classname="Ensure we do not get python path from config when path is provided">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure InvalidPythonPathInDebuggerLaunch diagnostic is handled when path is invalid in launch.json" time="0.01" classname="Ensure InvalidPythonPathInDebuggerLaunch diagnostic is handled when path is invalid in launch.json">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Path in debugger Ensure InvalidPythonPathInDebuggerSettings diagnostic is handled when path is invalid in settings.json" time="0" classname="Ensure InvalidPythonPathInDebuggerSettings diagnostic is handled when path is invalid in settings.json">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Jedi with Python 2.7 deprecated" timestamp="2021-11-08T22:02:59" tests="0" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/jediPython27NotSupported.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Diagnostics" timestamp="2021-11-08T22:02:59" tests="6" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/jediPython27NotSupported.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Diagnostics Should return an empty diagnostics array if the active interpreter version is Python 3" time="0" classname="Should return an empty diagnostics array if the active interpreter version is Python 3">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Diagnostics Should return an empty diagnostics array if the active interpreter is undefined" time="0" classname="Should return an empty diagnostics array if the active interpreter is undefined">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Diagnostics Should return a diagnostics array with one diagnostic if the active interpreter version is Python 2.7" time="0" classname="Should return a diagnostics array with one diagnostic if the active interpreter version is Python 2.7">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Diagnostics Should return a diagnostics array with one diagnostic if the language server is Jedi" time="0.001" classname="Should return a diagnostics array with one diagnostic if the language server is Jedi">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Diagnostics Should return an empty diagnostics array if the language server is Pylance" time="0" classname="Should return an empty diagnostics array if the language server is Pylance">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Diagnostics Should return an empty diagnostics array if there is no language server" time="0" classname="Should return an empty diagnostics array if there is no language server">
    </testcase>
  </testsuite>
  <testsuite name="Setting update" timestamp="2021-11-08T22:02:59" tests="4" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/jediPython27NotSupported.unit.test.js" failures="0" time="0">
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Setting update Running the diagnostic should update the workspace setting if set" time="0" classname="Running the diagnostic should update the workspace setting if set">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Setting update Running the diagnostic should update the global setting if set" time="0" classname="Running the diagnostic should update the global setting if set">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Setting update Running the diagnostic should not update the setting if not set in workspace or global scopes" time="0" classname="Running the diagnostic should not update the setting if not set in workspace or global scopes">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Setting update Running the diagnostic should not update the setting if not set to Jedi LSP" time="0" classname="Running the diagnostic should not update the setting if not set to Jedi LSP">
    </testcase>
  </testsuite>
  <testsuite name="Handler" timestamp="2021-11-08T22:02:59" tests="3" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/jediPython27NotSupported.unit.test.js" failures="0" time="0">
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Handler Handling an empty diagnostics array does not display a prompt" time="0" classname="Handling an empty diagnostics array does not display a prompt">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Handler Handling a diagnostic that should be ignored does not display a prompt" time="0" classname="Handling a diagnostic that should be ignored does not display a prompt">
    </testcase>
    <testcase name="Application Diagnostics - Jedi with Python 2.7 deprecated Handler Handling a diagnostic should show a prompt" time="0" classname="Handling a diagnostic should show a prompt">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Checks Mac Python Interpreter" timestamp="2021-11-08T22:02:59" tests="0" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/macPythonInterpreter.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Diagnostics" timestamp="2021-11-08T22:02:59" tests="11" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/macPythonInterpreter.unit.test.js" failures="0" time="0.007">
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Can handle InvalidPythonPathInterpreter diagnostics" time="0.001" classname="Can handle InvalidPythonPathInterpreter diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Can not handle non-InvalidPythonPathInterpreter diagnostics" time="0" classname="Can not handle non-InvalidPythonPathInterpreter diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should return empty diagnostics if not a Mac" time="0" classname="Should return empty diagnostics if not a Mac">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should return empty diagnostics if installer check is disabled" time="0" classname="Should return empty diagnostics if installer check is disabled">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should return empty diagnostics if there are interpreters, one is selected, and platform is not mac" time="0.001" classname="Should return empty diagnostics if there are interpreters, one is selected, and platform is not mac">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should return empty diagnostics if there are interpreters, platform is mac and selected interpreter is not default mac interpreter" time="0.001" classname="Should return empty diagnostics if there are interpreters, platform is mac and selected interpreter is not default mac interpreter">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should return diagnostic if there are no other interpreters, platform is mac and selected interpreter is default mac interpreter" time="0.001" classname="Should return diagnostic if there are no other interpreters, platform is mac and selected interpreter is default mac interpreter">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should return diagnostic if there are other interpreters, platform is mac and selected interpreter is default mac interpreter" time="0.001" classname="Should return diagnostic if there are other interpreters, platform is mac and selected interpreter is default mac interpreter">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Handling no interpreters diagnostic should return select interpreter cmd" time="0.001" classname="Handling no interpreters diagnostic should return select interpreter cmd">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Handling no interpreters diagnostisc should return 3 commands" time="0.001" classname="Handling no interpreters diagnostisc should return 3 commands">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Diagnostics Should not display a message if No Interpreters diagnostic has been ignored" time="0" classname="Should not display a message if No Interpreters diagnostic has been ignored">
    </testcase>
  </testsuite>
  <testsuite name="Change Handlers." timestamp="2021-11-08T22:02:59" tests="8" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/macPythonInterpreter.unit.test.js" failures="0" time="0.91">
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Add PythonPath handler is invoked" time="0" classname="Add PythonPath handler is invoked">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Event Handler is registered and invoked" time="0" classname="Event Handler is registered and invoked">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Event Handler is registered and not invoked" time="0.001" classname="Event Handler is registered and not invoked">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Diagnostics are checked with Config change event uri when path changes and event is passed" time="0.202" classname="Diagnostics are checked with Config change event uri when path changes and event is passed">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Diagnostics are checked with correct interpreter config uri when path changes and only config uri is passed" time="0.203" classname="Diagnostics are checked with correct interpreter config uri when path changes and only config uri is passed">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Diagnostics throws error when none of config uri or config change event uri is passed" time="0.001" classname="Diagnostics throws error when none of config uri or config change event uri is passed">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Diagnostics are checked and throttled when path changes" time="0.502" classname="Diagnostics are checked and throttled when path changes">
    </testcase>
    <testcase name="Application Diagnostics - Checks Mac Python Interpreter Change Handlers. Ensure event Handler is registered correctly if in Deprecate Python path experiment" time="0.001" classname="Ensure event Handler is registered correctly if in Deprecate Python path experiment">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - PowerShell Activation" timestamp="2021-11-08T22:03:00" tests="4" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/powerShellActivation.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - PowerShell Activation Can handle PowerShell diagnostics" time="0" classname="Can handle PowerShell diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - PowerShell Activation Can not handle non-EnvPathVariable diagnostics" time="0" classname="Can not handle non-EnvPathVariable diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - PowerShell Activation Must return empty diagnostics" time="0" classname="Must return empty diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - PowerShell Activation Should display three options in message displayed with 4 commands" time="0.001" classname="Should display three options in message displayed with 4 commands">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Pylance informational prompt" timestamp="2021-11-08T22:03:00" tests="7" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/pylanceDefault.unit.test.js" failures="0" time="0.002">
    <testcase name="Application Diagnostics - Pylance informational prompt Should display message if it&apos;s an existing installation of the extension and the prompt has not been shown yet" time="0.001" classname="Should display message if it&apos;s an existing installation of the extension and the prompt has not been shown yet">
    </testcase>
    <testcase name="Application Diagnostics - Pylance informational prompt Should return empty diagnostics if it&apos;s an existing installation of the extension and the prompt has been shown before" time="0" classname="Should return empty diagnostics if it&apos;s an existing installation of the extension and the prompt has been shown before">
    </testcase>
    <testcase name="Application Diagnostics - Pylance informational prompt Should return empty diagnostics if it&apos;s a fresh installation of the extension" time="0" classname="Should return empty diagnostics if it&apos;s a fresh installation of the extension">
    </testcase>
    <testcase name="Application Diagnostics - Pylance informational prompt Should display a prompt when handling the diagnostic code" time="0.001" classname="Should display a prompt when handling the diagnostic code">
    </testcase>
    <testcase name="Application Diagnostics - Pylance informational prompt Should return empty diagnostics if the diagnostic code has been ignored" time="0" classname="Should return empty diagnostics if the diagnostic code has been ignored">
    </testcase>
    <testcase name="Application Diagnostics - Pylance informational prompt PylanceDefaultDiagnosticService can handle PylanceDefaultDiagnostic diagnostics" time="0" classname="PylanceDefaultDiagnosticService can handle PylanceDefaultDiagnostic diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Pylance informational prompt PylanceDefaultDiagnosticService cannot handle non-PylanceDefaultDiagnostic diagnostics" time="0" classname="PylanceDefaultDiagnosticService cannot handle non-PylanceDefaultDiagnostic diagnostics">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Checks Python Interpreter" timestamp="2021-11-08T22:03:00" tests="0" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/pythonInterpreter.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Diagnostics" timestamp="2021-11-08T22:03:00" tests="12" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/pythonInterpreter.unit.test.js" failures="0" time="0.007">
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Can handle InvalidPythonPathInterpreter diagnostics" time="0" classname="Can handle InvalidPythonPathInterpreter diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Can not handle non-InvalidPythonPathInterpreter diagnostics" time="0" classname="Can not handle non-InvalidPythonPathInterpreter diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if installer check is disabled" time="0.001" classname="Should return empty diagnostics if installer check is disabled">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Should return diagnostics if there are no interpreters after double-checking" time="0" classname="Should return diagnostics if there are no interpreters after double-checking">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Should return invalid diagnostics if there are interpreters but no current interpreter" time="0.001" classname="Should return invalid diagnostics if there are interpreters but no current interpreter">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if there are interpreters and a current interpreter" time="0" classname="Should return empty diagnostics if there are interpreters and a current interpreter">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Handling no interpreters diagnostic should return download link" time="0.001" classname="Handling no interpreters diagnostic should return download link">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Handling no currently selected interpreter diagnostic should show select interpreter message" time="0" classname="Handling no currently selected interpreter diagnostic should show select interpreter message">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Handling no interpreters diagnostic should return select interpreter cmd" time="0" classname="Handling no interpreters diagnostic should return select interpreter cmd">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Handling an empty diagnostic should not show a message nor return a command" time="0.001" classname="Handling an empty diagnostic should not show a message nor return a command">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Handling an unsupported diagnostic code should not show a message nor return a command" time="0.002" classname="Handling an unsupported diagnostic code should not show a message nor return a command">
    </testcase>
    <testcase name="Application Diagnostics - Checks Python Interpreter Diagnostics Getting command prompts for an unsupported diagnostic code should throw an error" time="0.001" classname="Getting command prompts for an unsupported diagnostic code should throw an error">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Python Path Deprecated" timestamp="2021-11-08T22:03:00" tests="0" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/pythonPathDeprecated.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Diagnostics" timestamp="2021-11-08T22:03:00" tests="11" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/pythonPathDeprecated.unit.test.js" failures="0" time="0.008">
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Can handle PythonPathDeprecatedDiagnostic diagnostics" time="0" classname="Can handle PythonPathDeprecatedDiagnostic diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Can not handle non-PythonPathDeprecatedDiagnostic diagnostics" time="0.001" classname="Can not handle non-PythonPathDeprecatedDiagnostic diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Should not display a message if the diagnostic code has been ignored" time="0.001" classname="Should not display a message if the diagnostic code has been ignored">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Python Path Deprecated Diagnostic is handled as expected" time="0.001" classname="Python Path Deprecated Diagnostic is handled as expected">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Handling an empty diagnostic should not show a message nor return a command" time="0.001" classname="Handling an empty diagnostic should not show a message nor return a command">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Handling an unsupported diagnostic code should not show a message nor return a command" time="0" classname="Handling an unsupported diagnostic code should not show a message nor return a command">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics If not in DeprecatePythonPath experiment, empty diagnostics is returned" time="0" classname="If not in DeprecatePythonPath experiment, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics If a workspace is opened and only workspace value is set, diagnostic with appropriate message is returned" time="0.001" classname="If a workspace is opened and only workspace value is set, diagnostic with appropriate message is returned">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics If folder is directly opened and workspace folder value is set, diagnostic with appropriate message is returned" time="0.001" classname="If folder is directly opened and workspace folder value is set, diagnostic with appropriate message is returned">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics If a workspace is opened and both workspace folder value &amp; workspace value is set, diagnostic with appropriate message is returned" time="0.001" classname="If a workspace is opened and both workspace folder value &amp; workspace value is set, diagnostic with appropriate message is returned">
    </testcase>
    <testcase name="Application Diagnostics - Python Path Deprecated Diagnostics Otherwise an empty diagnostic is returned" time="0.001" classname="Otherwise an empty diagnostic is returned">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Switch to default LS" timestamp="2021-11-08T22:03:00" tests="4" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/switchToDefaultLSDiagnostic.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - Switch to default LS When global language server is NOT Microsoft do Nothing" time="0" classname="When global language server is NOT Microsoft do Nothing">
    </testcase>
    <testcase name="Application Diagnostics - Switch to default LS When global language server is Microsoft" time="0" classname="When global language server is Microsoft">
    </testcase>
    <testcase name="Application Diagnostics - Switch to default LS When workspace language server is NOT Microsoft do Nothing" time="0.001" classname="When workspace language server is NOT Microsoft do Nothing">
    </testcase>
    <testcase name="Application Diagnostics - Switch to default LS When workspace language server is Microsoft" time="0" classname="When workspace language server is Microsoft">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Check Test Settings" timestamp="2021-11-08T22:03:00" tests="34" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/updateTestSettings.unit.test.js" failures="0" time="0.005">
    <testcase name="Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings (with a resource)" time="0" classname="activate method invokes UpdateTestSettings (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings and ignores errors raised by UpdateTestSettings (with a resource)" time="0" classname="activate method invokes UpdateTestSettings and ignores errors raised by UpdateTestSettings (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings When there are no workspaces, then return just the user settings file (with a resource)" time="0" classname="When there are no workspaces, then return just the user settings file (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings When there are no workspaces &amp; no user file, then return an empty array (with a resource)" time="0.001" classname="When there are no workspaces &amp; no user file, then return an empty array (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings When there is a workspace folder, then return the user settings file &amp; workspace file (with a resource)" time="0" classname="When there is a workspace folder, then return the user settings file &amp; workspace file (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings When there is a workspace folder &amp; no user file, then workspace file (with a resource)" time="0" classname="When there is a workspace folder &amp; no user file, then workspace file (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Return an empty array if there are no files (with a resource)" time="0" classname="Return an empty array if there are no files (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Filter files based on whether they need to be fixed (with a resource)" time="0" classname="Filter files based on whether they need to be fixed (with a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings (without a resource)" time="0" classname="activate method invokes UpdateTestSettings (without a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings and ignores errors raised by UpdateTestSettings (without a resource)" time="0" classname="activate method invokes UpdateTestSettings and ignores errors raised by UpdateTestSettings (without a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings When there are no workspaces, then return just the user settings file (without a resource)" time="0" classname="When there are no workspaces, then return just the user settings file (without a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings When there are no workspaces &amp; no user file, then return an empty array (without a resource)" time="0" classname="When there are no workspaces &amp; no user file, then return an empty array (without a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Return an empty array if there are no files (without a resource)" time="0" classname="Return an empty array if there are no files (without a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Filter files based on whether they need to be fixed (without a resource)" time="0" classname="Filter files based on whether they need to be fixed (without a resource)">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should fix file if contents contains python.unitTest." time="0" classname="Should fix file if contents contains python.unitTest.">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should fix file if contents contains python.pyTest." time="0" classname="Should fix file if contents contains python.pyTest.">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should fix file if contents contains python.pyTest. &amp; python.unitTest." time="0" classname="Should fix file if contents contains python.pyTest. &amp; python.unitTest.">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should not fix file if contents does not contain python.unitTest. and python.pyTest" time="0" classname="Should not fix file if contents does not contain python.unitTest. and python.pyTest">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings File should not be fixed if there&apos;s an error in reading the file" time="0.001" classname="File should not be fixed if there&apos;s an error in reading the file">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings File should not be fixed if file does not exist" time="0" classname="File should not be fixed if file does not exist">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Verify `python.jediEnabled` is found in user settings" time="0" classname="Verify `python.jediEnabled` is found in user settings">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should replace python.unitTest." time="0.001" classname="Should replace python.unitTest.">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should replace python.unitTest.pyTest." time="0" classname="Should replace python.unitTest.pyTest.">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should replace python.testing.pyTest." time="0" classname="Should replace python.testing.pyTest.">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings Should not make any changes to the file" time="0" classname="Should not make any changes to the file">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings No jediEnabled setting" time="0.001" classname="No jediEnabled setting">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings jediEnabled setting in comment" time="0" classname="jediEnabled setting in comment">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings jediEnabled: true, no languageServer setting" time="0" classname="jediEnabled: true, no languageServer setting">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings jediEnabled: true, languageServer setting present" time="0" classname="jediEnabled: true, languageServer setting present">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings jediEnabled: false, no languageServer setting" time="0.001" classname="jediEnabled: false, no languageServer setting">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings jediEnabled: false, languageServer is None" time="0" classname="jediEnabled: false, languageServer is None">
    </testcase>
    <testcase name="Application Diagnostics - Check Test Settings jediEnabled: false, languageServer is Jedi" time="0" classname="jediEnabled: false, languageServer is Jedi">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Upgrade Code Runner" timestamp="2021-11-08T22:03:00" tests="0" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/upgradeCodeRunner.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Diagnostics" timestamp="2021-11-08T22:03:00" tests="13" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/checks/upgradeCodeRunner.unit.test.js" failures="0" time="0.006">
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics Can handle UpgradeCodeRunnerDiagnostic diagnostics" time="0" classname="Can handle UpgradeCodeRunnerDiagnostic diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics Can not handle non-UpgradeCodeRunnerDiagnostic diagnostics" time="0" classname="Can not handle non-UpgradeCodeRunnerDiagnostic diagnostics">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics Should not display a message if the diagnostic code has been ignored" time="0" classname="Should not display a message if the diagnostic code has been ignored">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics UpgradeCodeRunnerDiagnostic is handled as expected" time="0.001" classname="UpgradeCodeRunnerDiagnostic is handled as expected">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics Handling an empty diagnostic should not show a message nor return a command" time="0" classname="Handling an empty diagnostic should not show a message nor return a command">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics Handling an unsupported diagnostic code should not show a message nor return a command" time="0" classname="Handling an unsupported diagnostic code should not show a message nor return a command">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If a diagnostic has already been returned, empty diagnostics is returned" time="0.001" classname="If a diagnostic has already been returned, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If not in DeprecatePythonPath experiment, empty diagnostics is returned" time="0" classname="If not in DeprecatePythonPath experiment, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If Code Runner extension is not installed, empty diagnostics is returned" time="0" classname="If Code Runner extension is not installed, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If Code Runner extension is installed but the appropriate feature flag is set in package.json, empty diagnostics is returned" time="0.001" classname="If Code Runner extension is installed but the appropriate feature flag is set in package.json, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If old version of Code Runner extension is installed but setting `code-runner.executorMap.python` is not set, empty diagnostics is returned" time="0.001" classname="If old version of Code Runner extension is installed but setting `code-runner.executorMap.python` is not set, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If old version of Code Runner extension is installed but $pythonPath is not being used, empty diagnostics is returned" time="0.001" classname="If old version of Code Runner extension is installed but $pythonPath is not being used, empty diagnostics is returned">
    </testcase>
    <testcase name="Application Diagnostics - Upgrade Code Runner Diagnostics If old version of Code Runner extension is installed and $pythonPath is being used, diagnostic with appropriate message is returned" time="0.001" classname="If old version of Code Runner extension is installed and $pythonPath is being used, diagnostic with appropriate message is returned">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Exec VSC Commands" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/commands/execVSCCommands.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - Exec VSC Commands Test creation of VSC Command" time="0" classname="Test creation of VSC Command">
    </testcase>
    <testcase name="Application Diagnostics - Exec VSC Commands Test execution of VSC Command" time="0.001" classname="Test execution of VSC Command">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Commands Factory" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/commands/factory.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - Commands Factory Test creation of Ignore Command" time="0" classname="Test creation of Ignore Command">
    </testcase>
    <testcase name="Application Diagnostics - Commands Factory Test creation of Launch Browser Command" time="0.001" classname="Test creation of Launch Browser Command">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Commands Ignore" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/commands/ignore.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - Commands Ignore Invoking Command should invoke the filter Service" time="0.001" classname="Invoking Command should invoke the filter Service">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Commands Launch Browser" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/commands/launchBrowser.unit.test.js" failures="0" time="0">
    <testcase name="Application Diagnostics - Commands Launch Browser Invoking Command should launch the browser" time="0" classname="Invoking Command should launch the browser">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Filter" timestamp="2021-11-08T22:03:00" tests="10" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/filter.unit.test.js" failures="0" time="0.002">
    <testcase name="Application Diagnostics - Filter ignoreDiagnostic must save codes in Global Persistent State" time="0" classname="ignoreDiagnostic must save codes in Global Persistent State">
    </testcase>
    <testcase name="Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;false&apos; when code does not exist in any State" time="0.001" classname="shouldIgnoreDiagnostic should return &apos;false&apos; when code does not exist in any State">
    </testcase>
    <testcase name="Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in Global State" time="0" classname="shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in Global State">
    </testcase>
    <testcase name="Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in any State" time="0.001" classname="shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in any State">
    </testcase>
    <testcase name="Application Diagnostics - Filter ignoreDiagnostic must append codes in Global Persistent State" time="0" classname="ignoreDiagnostic must append codes in Global Persistent State">
    </testcase>
    <testcase name="Application Diagnostics - Filter ignoreDiagnostic must save codes in Workspace Persistent State" time="0" classname="ignoreDiagnostic must save codes in Workspace Persistent State">
    </testcase>
    <testcase name="Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;false&apos; when code does not exist in any State" time="0" classname="shouldIgnoreDiagnostic should return &apos;false&apos; when code does not exist in any State">
    </testcase>
    <testcase name="Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in Workspace State" time="0" classname="shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in Workspace State">
    </testcase>
    <testcase name="Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in any State" time="0" classname="shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in any State">
    </testcase>
    <testcase name="Application Diagnostics - Filter ignoreDiagnostic must append codes in Workspace Persistent State" time="0" classname="ignoreDiagnostic must append codes in Workspace Persistent State">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - PromptHandler" timestamp="2021-11-08T22:03:00" tests="16" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/promptHandler.unit.test.js" failures="0" time="0.002">
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should display a message without any buttons" time="0" classname="Handling a diagnositic of severity &apos;Error&apos; should display a message without any buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should invoke the onClose handler" time="0" classname="Handling a diagnositic of severity &apos;Error&apos; should invoke the onClose handler">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should display a custom message with buttons" time="0" classname="Handling a diagnositic of severity &apos;Error&apos; should display a custom message with buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should display a custom message with buttons and invoke selected command" time="0.001" classname="Handling a diagnositic of severity &apos;Error&apos; should display a custom message with buttons and invoke selected command">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should display a message without any buttons" time="0" classname="Handling a diagnositic of severity &apos;Warning&apos; should display a message without any buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should invoke the onClose handler" time="0" classname="Handling a diagnositic of severity &apos;Warning&apos; should invoke the onClose handler">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should display a custom message with buttons" time="0" classname="Handling a diagnositic of severity &apos;Warning&apos; should display a custom message with buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should display a custom message with buttons and invoke selected command" time="0" classname="Handling a diagnositic of severity &apos;Warning&apos; should display a custom message with buttons and invoke selected command">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should display a message without any buttons" time="0" classname="Handling a diagnositic of severity &apos;Information&apos; should display a message without any buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should invoke the onClose handler" time="0" classname="Handling a diagnositic of severity &apos;Information&apos; should invoke the onClose handler">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should display a custom message with buttons" time="0" classname="Handling a diagnositic of severity &apos;Information&apos; should display a custom message with buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should display a custom message with buttons and invoke selected command" time="0.001" classname="Handling a diagnositic of severity &apos;Information&apos; should display a custom message with buttons and invoke selected command">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should display a message without any buttons" time="0" classname="Handling a diagnositic of severity &apos;Hint&apos; should display a message without any buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should invoke the onClose handler" time="0" classname="Handling a diagnositic of severity &apos;Hint&apos; should invoke the onClose handler">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should display a custom message with buttons" time="0" classname="Handling a diagnositic of severity &apos;Hint&apos; should display a custom message with buttons">
    </testcase>
    <testcase name="Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should display a custom message with buttons and invoke selected command" time="0" classname="Handling a diagnositic of severity &apos;Hint&apos; should display a custom message with buttons and invoke selected command">
    </testcase>
  </testsuite>
  <testsuite name="Application Diagnostics - Register classes in IOC Container" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/serviceRegistry.unit.test.js" failures="0" time="0.001">
    <testcase name="Application Diagnostics - Register classes in IOC Container Register Classes" time="0.001" classname="Register Classes">
    </testcase>
  </testsuite>
  <testsuite name="Diagnostisc - Source Maps" timestamp="2021-11-08T22:03:00" tests="4" file="/home/don/development/vsc/vscode-python/out/test/application/diagnostics/sourceMapSupportService.unit.test.js" failures="0" time="0.002">
    <testcase name="Diagnostisc - Source Maps Command is registered" time="0" classname="Command is registered">
    </testcase>
    <testcase name="Diagnostisc - Source Maps Setting is turned on and vsc reloaded" time="0.001" classname="Setting is turned on and vsc reloaded">
    </testcase>
    <testcase name="Diagnostisc - Source Maps Display prompt and do not enable" time="0" classname="Display prompt and do not enable">
    </testcase>
    <testcase name="Diagnostisc - Source Maps Display prompt and must enable" time="0.001" classname="Display prompt and must enable">
    </testcase>
  </testsuite>
  <testsuite name="Common Commands ReloadCommand" timestamp="2021-11-08T22:03:00" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/application/commands/reloadCommand.unit.test.js" failures="0" time="0">
    <testcase name="Common Commands ReloadCommand Confirm command handler is added" time="0" classname="Confirm command handler is added">
    </testcase>
    <testcase name="Common Commands ReloadCommand Display prompt to reload VS Code with message passed into command" time="0" classname="Display prompt to reload VS Code with message passed into command">
    </testcase>
    <testcase name="Common Commands ReloadCommand Do not reload VS Code if user selects `Reload` option" time="0" classname="Do not reload VS Code if user selects `Reload` option">
    </testcase>
    <testcase name="Common Commands ReloadCommand Do not reload VS Code if user does not select `Reload` option" time="0" classname="Do not reload VS Code if user does not select `Reload` option">
    </testcase>
  </testsuite>
  <testsuite name="Report Issue Command" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/application/commands/reportIssueCommand.unit.test.js" failures="0" time="0.002">
    <testcase name="Report Issue Command Test if issue body is filled" time="0.002" classname="Test if issue body is filled">
    </testcase>
    <testcase name="Report Issue Command Should send telemetry event when run Report Issue Command" time="0" classname="Should send telemetry event when run Report Issue Command">
    </testcase>
  </testsuite>
  <testsuite name="Python Settings - pythonPath" timestamp="2021-11-08T22:03:00" tests="11" file="/home/don/development/vsc/vscode-python/out/test/common/configSettings/configSettings.pythonPath.unit.test.js" failures="0" time="0.12199999999999997">
    <testcase name="Python Settings - pythonPath Python Path from settings.json is used" time="0.011" classname="Python Path from settings.json is used">
    </testcase>
    <testcase name="Python Settings - pythonPath Python Path from settings.json is used and relative path starting with &apos;~&apos; will be resolved from home directory" time="0.01" classname="Python Path from settings.json is used and relative path starting with &apos;~&apos; will be resolved from home directory">
    </testcase>
    <testcase name="Python Settings - pythonPath Python Path from settings.json is used and relative path starting with &apos;.&apos; will be resolved from workspace folder" time="0.011" classname="Python Path from settings.json is used and relative path starting with &apos;.&apos; will be resolved from workspace folder">
    </testcase>
    <testcase name="Python Settings - pythonPath Python Path from settings.json is used and ${workspacecFolder} value will be resolved from workspace folder" time="0.013" classname="Python Path from settings.json is used and ${workspacecFolder} value will be resolved from workspace folder">
    </testcase>
    <testcase name="Python Settings - pythonPath If we don&apos;t have a custom python path and no auto selected interpreters, then use default" time="0.011" classname="If we don&apos;t have a custom python path and no auto selected interpreters, then use default">
    </testcase>
    <testcase name="Python Settings - pythonPath If a workspace is opened and if we don&apos;t have a custom python path but we do have an auto selected interpreter, then use it" time="0.012" classname="If a workspace is opened and if we don&apos;t have a custom python path but we do have an auto selected interpreter, then use it">
    </testcase>
    <testcase name="Python Settings - pythonPath If no workspace is opened and we don&apos;t have a custom python path but we do have an auto selected interpreter, then use it" time="0.011" classname="If no workspace is opened and we don&apos;t have a custom python path but we do have an auto selected interpreter, then use it">
    </testcase>
    <testcase name="Python Settings - pythonPath If we don&apos;t have a custom default python path and we do have an auto selected interpreter, then use it" time="0.01" classname="If we don&apos;t have a custom default python path and we do have an auto selected interpreter, then use it">
    </testcase>
    <testcase name="Python Settings - pythonPath If user is in Deprecate Python Path experiment and we don&apos;t have a custom python path, get the autoselected interpreter and use it if it&apos;s safe" time="0.011" classname="If user is in Deprecate Python Path experiment and we don&apos;t have a custom python path, get the autoselected interpreter and use it if it&apos;s safe">
    </testcase>
    <testcase name="Python Settings - pythonPath If user is in Deprecate Python Path experiment, use the new API to fetch Python Path" time="0.011" classname="If user is in Deprecate Python Path experiment, use the new API to fetch Python Path">
    </testcase>
    <testcase name="Python Settings - pythonPath If user is not in Deprecate Python Path experiment, use the settings to fetch Python Path" time="0.011" classname="If user is not in Deprecate Python Path experiment, use the settings to fetch Python Path">
    </testcase>
  </testsuite>
  <testsuite name="Python Settings" timestamp="2021-11-08T22:03:00" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/configSettings/configSettings.unit.test.js" failures="0" time="0.06899999999999999">
    <testcase name="Python Settings condaPath updated" time="0.012" classname="condaPath updated">
    </testcase>
    <testcase name="Python Settings condaPath (relative to home) updated" time="0.01" classname="condaPath (relative to home) updated">
    </testcase>
    <testcase name="Python Settings Experiments (not enabled)" time="0.011" classname="Experiments (not enabled)">
    </testcase>
    <testcase name="Python Settings Experiments (enabled)" time="0.012" classname="Experiments (enabled)">
    </testcase>
    <testcase name="Python Settings Formatter Paths and args" time="0.013" classname="Formatter Paths and args">
    </testcase>
    <testcase name="Python Settings Formatter Paths (paths relative to home)" time="0.011" classname="Formatter Paths (paths relative to home)">
    </testcase>
  </testsuite>
  <testsuite name="String settings" timestamp="2021-11-08T22:03:00" tests="8" file="/home/don/development/vsc/vscode-python/out/test/common/configSettings/configSettings.unit.test.js" failures="0" time="0.11399999999999999">
    <testcase name="Python Settings String settings pythonPath updated" time="0.017" classname="pythonPath updated">
    </testcase>
    <testcase name="Python Settings String settings venvPath updated" time="0.015" classname="venvPath updated">
    </testcase>
    <testcase name="Python Settings String settings condaPath updated" time="0.014" classname="condaPath updated">
    </testcase>
    <testcase name="Python Settings String settings pipenvPath updated" time="0.014" classname="pipenvPath updated">
    </testcase>
    <testcase name="Python Settings String settings envFile updated" time="0.014" classname="envFile updated">
    </testcase>
    <testcase name="Python Settings String settings poetryPath updated" time="0.014" classname="poetryPath updated">
    </testcase>
    <testcase name="Python Settings String settings insidersChannel updated" time="0.013" classname="insidersChannel updated">
    </testcase>
    <testcase name="Python Settings String settings defaultInterpreterPath updated" time="0.013" classname="defaultInterpreterPath updated">
    </testcase>
  </testsuite>
  <testsuite name="Boolean settings" timestamp="2021-11-08T22:03:00" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/configSettings/configSettings.unit.test.js" failures="0" time="0.039">
    <testcase name="Python Settings Boolean settings downloadLanguageServer updated" time="0.013" classname="downloadLanguageServer updated">
    </testcase>
    <testcase name="Python Settings Boolean settings autoUpdateLanguageServer updated" time="0.013" classname="autoUpdateLanguageServer updated">
    </testcase>
    <testcase name="Python Settings Boolean settings globalModuleInstallation updated" time="0.013" classname="globalModuleInstallation updated">
    </testcase>
  </testsuite>
  <testsuite name="languageServer settings" timestamp="2021-11-08T22:03:00" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/configSettings/configSettings.unit.test.js" failures="0" time="0.077">
    <testcase name="Python Settings languageServer settings Jedi" time="0.012" classname="Jedi">
    </testcase>
    <testcase name="Python Settings languageServer settings JediLSP" time="0.013" classname="JediLSP">
    </testcase>
    <testcase name="Python Settings languageServer settings Microsoft" time="0.013" classname="Microsoft">
    </testcase>
    <testcase name="Python Settings languageServer settings Pylance" time="0.013" classname="Pylance">
    </testcase>
    <testcase name="Python Settings languageServer settings None" time="0.013" classname="None">
    </testcase>
    <testcase name="Python Settings languageServer settings invalid" time="0.013" classname="invalid">
    </testcase>
  </testsuite>
  <testsuite name="Configuration Service" timestamp="2021-11-08T22:03:00" tests="8" file="/home/don/development/vsc/vscode-python/out/test/common/configuration/service.unit.test.js" failures="0" time="0.005">
    <testcase name="Configuration Service Fetching settings goes as expected" time="0.001" classname="Fetching settings goes as expected">
    </testcase>
    <testcase name="Configuration Service Do not update global settings if global value is already equal to the new value" time="0.001" classname="Do not update global settings if global value is already equal to the new value">
    </testcase>
    <testcase name="Configuration Service Update global settings if global value is not equal to the new value" time="0" classname="Update global settings if global value is not equal to the new value">
    </testcase>
    <testcase name="Configuration Service Do not update workspace settings if workspace value is already equal to the new value" time="0.001" classname="Do not update workspace settings if workspace value is already equal to the new value">
    </testcase>
    <testcase name="Configuration Service Update workspace settings if workspace value is not equal to the new value" time="0" classname="Update workspace settings if workspace value is not equal to the new value">
    </testcase>
    <testcase name="Configuration Service Do not update workspace folder settings if workspace folder value is already equal to the new value" time="0.001" classname="Do not update workspace folder settings if workspace folder value is already equal to the new value">
    </testcase>
    <testcase name="Configuration Service Update workspace folder settings if workspace folder value is not equal to the new value" time="0" classname="Update workspace folder settings if workspace folder value is not equal to the new value">
    </testcase>
    <testcase name="Configuration Service If in Deprecate PythonPath experiment &amp; setting to update is `python.pythonPath`, update settings using new API if stored value is not equal to the new value" time="0.001" classname="If in Deprecate PythonPath experiment &amp; setting to update is `python.pythonPath`, update settings using new API if stored value is not equal to the new value">
    </testcase>
  </testsuite>
  <testsuite name="Experimentation service" timestamp="2021-11-08T22:03:00" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/experiments/service.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Initialization" timestamp="2021-11-08T22:03:00" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/experiments/service.unit.test.js" failures="0" time="0.004">
    <testcase name="Experimentation service Initialization Users with a release version of the extension should be in the Public target population" time="0.001" classname="Users with a release version of the extension should be in the Public target population">
    </testcase>
    <testcase name="Experimentation service Initialization Users with an Insiders version of the extension should be the Insiders target population" time="0.001" classname="Users with an Insiders version of the extension should be the Insiders target population">
    </testcase>
    <testcase name="Experimentation service Initialization Users can only opt into experiment groups" time="0" classname="Users can only opt into experiment groups">
    </testcase>
    <testcase name="Experimentation service Initialization Users can only opt out of experiment groups" time="0.001" classname="Users can only opt out of experiment groups">
    </testcase>
    <testcase name="Experimentation service Initialization Experiment data in Memento storage should be logged if it starts with &quot;python&quot;" time="0.001" classname="Experiment data in Memento storage should be logged if it starts with &quot;python&quot;">
    </testcase>
  </testsuite>
  <testsuite name="In-experiment-sync check" timestamp="2021-11-08T22:03:00" tests="9" file="/home/don/development/vsc/vscode-python/out/test/common/experiments/service.unit.test.js" failures="0" time="0.001">
    <testcase name="Experimentation service In-experiment-sync check If the opt-in and opt-out arrays are empty, return the value from the experimentation framework for a given experiment" time="0" classname="If the opt-in and opt-out arrays are empty, return the value from the experimentation framework for a given experiment">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the experiment setting is disabled, inExperiment should return false" time="0" classname="If the experiment setting is disabled, inExperiment should return false">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-in setting contains &quot;All&quot;, inExperiment should return true" time="0.001" classname="If the opt-in setting contains &quot;All&quot;, inExperiment should return true">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-in setting contains `All`, inExperiment should check the value cached by the experiment service" time="0" classname="If the opt-in setting contains `All`, inExperiment should check the value cached by the experiment service">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-in setting contains `All` and the experiment setting is disabled, inExperiment should return false" time="0" classname="If the opt-in setting contains `All` and the experiment setting is disabled, inExperiment should return false">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-in setting contains the experiment name, inExperiment should return true" time="0" classname="If the opt-in setting contains the experiment name, inExperiment should return true">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-out setting contains &quot;All&quot;, inExperiment should return false" time="0" classname="If the opt-out setting contains &quot;All&quot;, inExperiment should return false">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-out setting contains &quot;All&quot; and the experiment setting is enabled, inExperiment should return false" time="0" classname="If the opt-out setting contains &quot;All&quot; and the experiment setting is enabled, inExperiment should return false">
    </testcase>
    <testcase name="Experimentation service In-experiment-sync check If the opt-out setting contains the experiment name, inExperiment should return false" time="0" classname="If the opt-out setting contains the experiment name, inExperiment should return false">
    </testcase>
  </testsuite>
  <testsuite name="Experiment value retrieval" timestamp="2021-11-08T22:03:00" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/experiments/service.unit.test.js" failures="0" time="0.002">
    <testcase name="Experimentation service Experiment value retrieval If the service is enabled and the opt-out array is empty,return the value from the experimentation framework for a given experiment" time="0" classname="If the service is enabled and the opt-out array is empty,return the value from the experimentation framework for a given experiment">
    </testcase>
    <testcase name="Experimentation service Experiment value retrieval If the experiment setting is disabled, getExperimentValue should return undefined" time="0" classname="If the experiment setting is disabled, getExperimentValue should return undefined">
    </testcase>
    <testcase name="Experimentation service Experiment value retrieval If the opt-out setting contains &quot;All&quot;, getExperimentValue should return undefined" time="0.001" classname="If the opt-out setting contains &quot;All&quot;, getExperimentValue should return undefined">
    </testcase>
    <testcase name="Experimentation service Experiment value retrieval If the opt-out setting contains the experiment name, getExperimentValue should return undefined" time="0.001" classname="If the opt-out setting contains the experiment name, getExperimentValue should return undefined">
    </testcase>
  </testsuite>
  <testsuite name="Opt-in/out telemetry" timestamp="2021-11-08T22:03:00" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/experiments/service.unit.test.js" failures="0" time="0.005">
    <testcase name="Experimentation service Opt-in/out telemetry Telemetry should be sent when activating the ExperimentService instance" time="0.001" classname="Telemetry should be sent when activating the ExperimentService instance">
    </testcase>
    <testcase name="Experimentation service Opt-in/out telemetry The telemetry event properties should only be populated with valid experiment values" time="0.001" classname="The telemetry event properties should only be populated with valid experiment values">
    </testcase>
    <testcase name="Experimentation service Opt-in/out telemetry Set telemetry properties to empty arrays if no experiments have been opted into or out from" time="0.001" classname="Set telemetry properties to empty arrays if no experiments have been opted into or out from">
    </testcase>
    <testcase name="Experimentation service Opt-in/out telemetry If the entered value for a setting contains &quot;All&quot;, do not expand it to be a list of all experiments, and pass it as-is" time="0" classname="If the entered value for a setting contains &quot;All&quot;, do not expand it to be a list of all experiments, and pass it as-is">
    </testcase>
    <testcase name="Experimentation service Opt-in/out telemetry If a setting is not in package.json, set the corresponding telemetry property to an empty array" time="0.001" classname="If a setting is not in package.json, set the corresponding telemetry property to an empty array">
    </testcase>
    <testcase name="Experimentation service Opt-in/out telemetry If a setting does not have an enum of valid values, set the corresponding telemetry property to an empty array" time="0.001" classname="If a setting does not have an enum of valid values, set the corresponding telemetry property to an empty array">
    </testcase>
  </testsuite>
  <testsuite name="Experimentation telemetry" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/experiments/telemetry.unit.test.js" failures="0" time="0.001">
    <testcase name="Experimentation telemetry Calling postEvent should send a telemetry event" time="0.001" classname="Calling postEvent should send a telemetry event">
    </testcase>
    <testcase name="Experimentation telemetry Shared properties should be set for all telemetry events" time="0" classname="Shared properties should be set for all telemetry events">
    </testcase>
  </testsuite>
  <testsuite name="String Extensions" timestamp="2021-11-08T22:03:00" tests="18" file="/home/don/development/vsc/vscode-python/out/test/common/extensions.unit.test.js" failures="0" time="0.002">
    <testcase name="String Extensions Should return empty string for empty arg" time="0.001" classname="Should return empty string for empty arg">
    </testcase>
    <testcase name="String Extensions Should quote an empty space" time="0" classname="Should quote an empty space">
    </testcase>
    <testcase name="String Extensions Should not quote command arguments without spaces" time="0" classname="Should not quote command arguments without spaces">
    </testcase>
    <testcase name="String Extensions Should quote command arguments with spaces" time="0" classname="Should quote command arguments with spaces">
    </testcase>
    <testcase name="String Extensions Should return empty string for empty path" time="0" classname="Should return empty string for empty path">
    </testcase>
    <testcase name="String Extensions Should not quote file argument without spaces" time="0" classname="Should not quote file argument without spaces">
    </testcase>
    <testcase name="String Extensions Should quote file argument with spaces" time="0" classname="Should quote file argument with spaces">
    </testcase>
    <testcase name="String Extensions Should replace all back slashes with forward slashes (irrespective of OS)" time="0" classname="Should replace all back slashes with forward slashes (irrespective of OS)">
    </testcase>
    <testcase name="String Extensions Should replace all back slashes with forward slashes (irrespective of OS) and quoted when file has spaces" time="0" classname="Should replace all back slashes with forward slashes (irrespective of OS) and quoted when file has spaces">
    </testcase>
    <testcase name="String Extensions Should replace all back slashes with forward slashes (irrespective of OS) and quoted when file has spaces" time="0" classname="Should replace all back slashes with forward slashes (irrespective of OS) and quoted when file has spaces">
    </testcase>
    <testcase name="String Extensions Should leave string unchanged" time="0" classname="Should leave string unchanged">
    </testcase>
    <testcase name="String Extensions String should be formatted to contain first argument" time="0" classname="String should be formatted to contain first argument">
    </testcase>
    <testcase name="String Extensions String should be formatted to contain first argument even with too many args" time="0" classname="String should be formatted to contain first argument even with too many args">
    </testcase>
    <testcase name="String Extensions String should be formatted to contain second argument" time="0" classname="String should be formatted to contain second argument">
    </testcase>
    <testcase name="String Extensions String should be formatted to contain second argument even with too many args" time="0" classname="String should be formatted to contain second argument even with too many args">
    </testcase>
    <testcase name="String Extensions String should be formatted with multiple args" time="0.001" classname="String should be formatted with multiple args">
    </testcase>
    <testcase name="String Extensions String should remove quotes" time="0" classname="String should remove quotes">
    </testcase>
    <testcase name="String Extensions String should replace all substrings with new substring" time="0" classname="String should replace all substrings with new substring">
    </testcase>
  </testsuite>
  <testsuite name="Array extensions" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/extensions.unit.test.js" failures="0" time="0">
    <testcase name="Array extensions Async filter should filter items" time="0" classname="Async filter should filter items">
    </testcase>
  </testsuite>
  <testsuite name="Download channel rules - ExtensionInsidersOffChannelRule" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/downloadChannelRules.unit.test.js" failures="0" time="0">
    <testcase name="Download channel rules - ExtensionInsidersOffChannelRule Never look for insiders build" time="0" classname="Never look for insiders build">
    </testcase>
  </testsuite>
  <testsuite name="Download channel rules - ExtensionInsidersDailyChannelRule" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/downloadChannelRules.unit.test.js" failures="0" time="0">
    <testcase name="Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is new, update look up time and return installer for insiders build" time="0" classname="If insiders channel rule is new, update look up time and return installer for insiders build">
    </testcase>
  </testsuite>
  <testsuite name="If insiders channel rule is not new" timestamp="2021-11-08T22:03:00" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/downloadChannelRules.unit.test.js" failures="0" time="0.002">
    <testcase name="Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders the first time" time="0" classname="Update look up time and return installer for insiders build if looking for insiders the first time">
    </testcase>
    <testcase name="Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders after 24 hrs of last lookup time" time="0.001" classname="Update look up time and return installer for insiders build if looking for insiders after 24 hrs of last lookup time">
    </testcase>
    <testcase name="Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is not new Do not update look up time or return any installer if looking for insiders within 24 hrs of last lookup time" time="0.001" classname="Do not update look up time or return any installer if looking for insiders within 24 hrs of last lookup time">
    </testcase>
  </testsuite>
  <testsuite name="Download channel rules - ExtensionInsidersWeeklyChannelRule" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/downloadChannelRules.unit.test.js" failures="0" time="0.001">
    <testcase name="Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is new, update look up time and return installer for insiders build" time="0.001" classname="If insiders channel rule is new, update look up time and return installer for insiders build">
    </testcase>
  </testsuite>
  <testsuite name="If insiders channel rule is not new" timestamp="2021-11-08T22:03:00" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/downloadChannelRules.unit.test.js" failures="0" time="0.001">
    <testcase name="Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders the first time" time="0" classname="Update look up time and return installer for insiders build if looking for insiders the first time">
    </testcase>
    <testcase name="Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders after a week of last lookup time" time="0.001" classname="Update look up time and return installer for insiders build if looking for insiders after a week of last lookup time">
    </testcase>
    <testcase name="Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is not new Do not update look up time or return any installer if looking for insiders within one week of last lookup time" time="0" classname="Do not update look up time or return any installer if looking for insiders within one week of last lookup time">
    </testcase>
  </testsuite>
  <testsuite name="Download channel service" timestamp="2021-11-08T22:03:00" tests="11" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/downloadChannelService.unit.test.js" failures="0" time="0.002">
    <testcase name="Download channel service Get channel returns &apos;off&apos; if settings value is set to &apos;off&apos;" time="0" classname="Get channel returns &apos;off&apos; if settings value is set to &apos;off&apos;">
    </testcase>
    <testcase name="Download channel service Get channel returns &apos;weekly&apos; if settings value is set to &apos;weekly&apos;" time="0" classname="Get channel returns &apos;weekly&apos; if settings value is set to &apos;weekly&apos;">
    </testcase>
    <testcase name="Download channel service Get channel returns &apos;daily&apos; if settings value is set to &apos;daily&apos;" time="0" classname="Get channel returns &apos;daily&apos; if settings value is set to &apos;daily&apos;">
    </testcase>
    <testcase name="Download channel service Function isChannelUsingDefaultConfiguration() returns false if setting is set" time="0" classname="Function isChannelUsingDefaultConfiguration() returns false if setting is set">
    </testcase>
    <testcase name="Download channel service Function isChannelUsingDefaultConfiguration() returns true if setting is not set" time="0" classname="Function isChannelUsingDefaultConfiguration() returns true if setting is not set">
    </testcase>
    <testcase name="Download channel service Function isChannelUsingDefaultConfiguration() throws error if not setting is found" time="0" classname="Function isChannelUsingDefaultConfiguration() throws error if not setting is found">
    </testcase>
    <testcase name="Download channel service Update channel updates configuration settings" time="0.001" classname="Update channel updates configuration settings">
    </testcase>
    <testcase name="Download channel service Update channel throws error when updates configuration settings fails" time="0" classname="Update channel throws error when updates configuration settings fails">
    </testcase>
    <testcase name="Download channel service If insidersChannelSetting is changed, an event is fired" time="0.001" classname="If insidersChannelSetting is changed, an event is fired">
    </testcase>
    <testcase name="Download channel service If some other setting changed, no event is fired" time="0" classname="If some other setting changed, no event is fired">
    </testcase>
    <testcase name="Download channel service Ensure on channel change captures the fired event with the correct arguments" time="0" classname="Ensure on channel change captures the fired event with the correct arguments">
    </testcase>
  </testsuite>
  <testsuite name="Insiders Extension prompt" timestamp="2021-11-08T22:03:00" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/insidersExtensionPrompt.unit.test.js" failures="0" time="0.002">
    <testcase name="Insiders Extension prompt Channel is set to &apos;daily&apos; if &apos;Yes, daily&apos; option is selected" time="0" classname="Channel is set to &apos;daily&apos; if &apos;Yes, daily&apos; option is selected">
    </testcase>
    <testcase name="Insiders Extension prompt Channel is set to &apos;weekly&apos; if &apos;Yes, weekly&apos; option is selected" time="0.001" classname="Channel is set to &apos;weekly&apos; if &apos;Yes, weekly&apos; option is selected">
    </testcase>
    <testcase name="Insiders Extension prompt No channel is set if &apos;No, thanks&apos; option is selected" time="0" classname="No channel is set if &apos;No, thanks&apos; option is selected">
    </testcase>
    <testcase name="Insiders Extension prompt No channel is set if no option is selected" time="0" classname="No channel is set if no option is selected">
    </testcase>
    <testcase name="Insiders Extension prompt Do not do anything if no option is selected in the reload prompt" time="0" classname="Do not do anything if no option is selected in the reload prompt">
    </testcase>
    <testcase name="Insiders Extension prompt Reload windows if &apos;Reload&apos; option is selected in the reload prompt" time="0.001" classname="Reload windows if &apos;Reload&apos; option is selected in the reload prompt">
    </testcase>
  </testsuite>
  <testsuite name="Insiders Extension Service - Handle channel" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/insidersExtensionService.unit.test.js" failures="0" time="0.001">
    <testcase name="Insiders Extension Service - Handle channel If insiders is not be installed, handling channel does not do anything and simply returns" time="0.001" classname="If insiders is not be installed, handling channel does not do anything and simply returns">
    </testcase>
    <testcase name="Insiders Extension Service - Handle channel If insiders is required to be installed, handling channel installs the build and prompts user" time="0" classname="If insiders is required to be installed, handling channel installs the build and prompts user">
    </testcase>
  </testsuite>
  <testsuite name="Insiders Extension Service - Activation" timestamp="2021-11-08T22:03:00" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/insidersExtensionService.unit.test.js" failures="0" time="0.005">
    <testcase name="Insiders Extension Service - Activation If install channel is handled in the edge cases, do not handle it again using the general way" time="0.001" classname="If install channel is handled in the edge cases, do not handle it again using the general way">
    </testcase>
    <testcase name="Insiders Extension Service - Activation If install channel is not handled in the edge cases, handle it using the general way" time="0.001" classname="If install channel is not handled in the edge cases, handle it using the general way">
    </testcase>
    <testcase name="Insiders Extension Service - Activation Ensure channels are reliably handled in the background" time="0.003" classname="Ensure channels are reliably handled in the background">
    </testcase>
  </testsuite>
  <testsuite name="Insiders Extension Service - Function handleEdgeCases()" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/insidersExtensionService.unit.test.js" failures="0" time="0">
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Insiders Install Prompt is displayed when vscode channel = &apos;insiders&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = true" time="0" classname="Insiders Install Prompt is displayed when vscode channel = &apos;insiders&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = true">
    </testcase>
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Insiders Install Prompt is not displayed when uiKind = &apos;UIKind.Web&apos;" time="0" classname="Insiders Install Prompt is not displayed when uiKind = &apos;UIKind.Web&apos;">
    </testcase>
  </testsuite>
  <testsuite name="Verify no operation is performed if none of the case conditions are met" timestamp="2021-11-08T22:03:00" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/insidersExtensionService.unit.test.js" failures="0" time="0.002">
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Verify no operation is performed if none of the case conditions are met No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;daily&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = undefined" time="0" classname="No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;daily&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = undefined">
    </testcase>
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Verify no operation is performed if none of the case conditions are met No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = false" time="0.001" classname="No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = false">
    </testcase>
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Verify no operation is performed if none of the case conditions are met No operation is performed when vscode channel = &apos;stable&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = undefined" time="0" classname="No operation is performed when vscode channel = &apos;stable&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = undefined">
    </testcase>
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Verify no operation is performed if none of the case conditions are met No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;off&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = undefined" time="0" classname="No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;off&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = undefined">
    </testcase>
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Verify no operation is performed if none of the case conditions are met No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;off&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = true" time="0.001" classname="No operation is performed when vscode channel = &apos;insiders&apos;, install channel = &apos;off&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = true">
    </testcase>
    <testcase name="Insiders Extension Service - Function handleEdgeCases() Verify no operation is performed if none of the case conditions are met No operation is performed when vscode channel = &apos;stable&apos;, install channel = &apos;off&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = true" time="0" classname="No operation is performed when vscode channel = &apos;stable&apos;, install channel = &apos;off&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = true">
    </testcase>
  </testsuite>
  <testsuite name="Insiders Extension Service - Function registerCommandsAndHandlers()" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/insidersBuild/insidersExtensionService.unit.test.js" failures="0" time="0">
    <testcase name="Insiders Extension Service - Function registerCommandsAndHandlers() Ensure commands and handlers get registered, and disposables returned are in the disposable list" time="0" classname="Ensure commands and handlers get registered, and disposables returned are in the disposable list">
    </testcase>
    <testcase name="Insiders Extension Service - Function registerCommandsAndHandlers() Ensure commands and handlers get registered with the correct callback handlers" time="0" classname="Ensure commands and handlers get registered with the correct callback handlers">
    </testcase>
  </testsuite>
  <testsuite name="InstallationChannelManager - getInstallationChannel()" timestamp="2021-11-08T22:03:00" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/installer/channelManager.unit.test.js" failures="0" time="0.003">
    <testcase name="InstallationChannelManager - getInstallationChannel() If there is exactly one installation channel, return it" time="0.001" classname="If there is exactly one installation channel, return it">
    </testcase>
    <testcase name="InstallationChannelManager - getInstallationChannel() If no channels are returned by the resource, show no installer message and return" time="0" classname="If no channels are returned by the resource, show no installer message and return">
    </testcase>
    <testcase name="InstallationChannelManager - getInstallationChannel() If no channel is selected in the quickpick, return undefined" time="0.001" classname="If no channel is selected in the quickpick, return undefined">
    </testcase>
    <testcase name="InstallationChannelManager - getInstallationChannel() If multiple channels are returned by the resource, show quick pick of the channel names and return the selected channel installer" time="0.001" classname="If multiple channels are returned by the resource, show quick pick of the channel names and return the selected channel installer">
    </testcase>
  </testsuite>
  <testsuite name="InstallationChannelManager - getInstallationChannels()" timestamp="2021-11-08T22:03:00" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/installer/channelManager.unit.test.js" failures="0" time="0.001">
    <testcase name="InstallationChannelManager - getInstallationChannels() If no installers are returned by serviceContainer, return an empty list" time="0" classname="If no installers are returned by serviceContainer, return an empty list">
    </testcase>
    <testcase name="InstallationChannelManager - getInstallationChannels() Return highest priority supported installers" time="0.001" classname="Return highest priority supported installers">
    </testcase>
  </testsuite>
  <testsuite name="InstallationChannelManager - showNoInstallersMessage()" timestamp="2021-11-08T22:03:00" tests="10" file="/home/don/development/vsc/vscode-python/out/test/common/installer/channelManager.unit.test.js" failures="0" time="0.004">
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If no active interpreter is returned, simply return" time="0.001" classname="If no active interpreter is returned, simply return">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If active interpreter is Conda, show conda prompt" time="0" classname="If active interpreter is Conda, show conda prompt">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If active interpreter is not Conda, show pip prompt" time="0" classname="If active interpreter is not Conda, show pip prompt">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is selected in error prompt, open correct URL for Windows when Interpreter type is Conda" time="0.001" classname="If &apos;Search for help&apos; is selected in error prompt, open correct URL for Windows when Interpreter type is Conda">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is selected in error prompt, open correct URL for Linux when Interpreter type is Conda" time="0" classname="If &apos;Search for help&apos; is selected in error prompt, open correct URL for Linux when Interpreter type is Conda">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is selected in error prompt, open correct URL for MacOS when Interpreter type is Conda" time="0.001" classname="If &apos;Search for help&apos; is selected in error prompt, open correct URL for MacOS when Interpreter type is Conda">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is selected in error prompt, open correct URL for Windows when Interpreter type is not Conda" time="0" classname="If &apos;Search for help&apos; is selected in error prompt, open correct URL for Windows when Interpreter type is not Conda">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is selected in error prompt, open correct URL for Linux when Interpreter type is not Conda" time="0.001" classname="If &apos;Search for help&apos; is selected in error prompt, open correct URL for Linux when Interpreter type is not Conda">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is selected in error prompt, open correct URL for MacOS when Interpreter type is not Conda" time="0" classname="If &apos;Search for help&apos; is selected in error prompt, open correct URL for MacOS when Interpreter type is not Conda">
    </testcase>
    <testcase name="InstallationChannelManager - showNoInstallersMessage() If &apos;Search for help&apos; is not selected in error prompt, don&apos;t open URL" time="0" classname="If &apos;Search for help&apos; is not selected in error prompt, don&apos;t open URL">
    </testcase>
  </testsuite>
  <testsuite name="Common - Conda Installer" timestamp="2021-11-08T22:03:00" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/installer/condaInstaller.unit.test.js" failures="0" time="0.004">
    <testcase name="Common - Conda Installer Name and priority" time="0" classname="Name and priority">
    </testcase>
    <testcase name="Common - Conda Installer Installer is not supported when conda is available variable is set to false" time="0" classname="Installer is not supported when conda is available variable is set to false">
    </testcase>
    <testcase name="Common - Conda Installer Installer is not supported when conda is not available" time="0" classname="Installer is not supported when conda is not available">
    </testcase>
    <testcase name="Common - Conda Installer Installer is not supported when current env is not a conda env" time="0.001" classname="Installer is not supported when current env is not a conda env">
    </testcase>
    <testcase name="Common - Conda Installer Installer is supported when current env is a conda env" time="0.001" classname="Installer is supported when current env is a conda env">
    </testcase>
    <testcase name="Common - Conda Installer Include name of environment" time="0.001" classname="Include name of environment">
    </testcase>
    <testcase name="Common - Conda Installer Include path of environment" time="0.001" classname="Include path of environment">
    </testcase>
  </testsuite>
  <testsuite name="Extension build installer - Stable build installer" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/installer/extensionBuildInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Extension build installer - Stable build installer Installing stable build logs progress and installs stable" time="0.001" classname="Installing stable build logs progress and installs stable">
    </testcase>
  </testsuite>
  <testsuite name="Extension build installer - Insiders build installer" timestamp="2021-11-08T22:03:00" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/installer/extensionBuildInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Extension build installer - Insiders build installer Installing Insiders build downloads and installs Insiders" time="0" classname="Installing Insiders build downloads and installs Insiders">
    </testcase>
  </testsuite>
  <testsuite name="Module Installer - Invalid Paths" timestamp="2021-11-08T22:03:00" tests="92" file="/home/don/development/vsc/vscode-python/out/test/common/installer/installer.invalidPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Module Installer only" timestamp="2021-11-08T22:03:01" tests="486" file="/home/don/development/vsc/vscode-python/out/test/common/installer/installer.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test FormatterInstaller.promptToInstallImplementation" timestamp="2021-11-08T22:03:02" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/installer/installer.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test FormatterInstaller.promptToInstallImplementation" timestamp="2021-11-08T22:03:02" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/installer/installer.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test LinterInstaller with resource: undefined" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/installer.unit.test.js" failures="0" time="0.002">
    <testcase name="Test LinterInstaller with resource: undefined Ensure 3 options for pylint" time="0.001" classname="Ensure 3 options for pylint">
    </testcase>
    <testcase name="Test LinterInstaller with resource: undefined Ensure select linter command is invoked" time="0" classname="Ensure select linter command is invoked">
    </testcase>
    <testcase name="Test LinterInstaller with resource: undefined If install button is selected, install linter and return response" time="0.001" classname="If install button is selected, install linter and return response">
    </testcase>
  </testsuite>
  <testsuite name="Test LinterInstaller with resource: file:///resource" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/installer.unit.test.js" failures="0" time="0">
    <testcase name="Test LinterInstaller with resource: file:///resource Ensure 3 options for pylint" time="0" classname="Ensure 3 options for pylint">
    </testcase>
    <testcase name="Test LinterInstaller with resource: file:///resource Ensure select linter command is invoked" time="0" classname="Ensure select linter command is invoked">
    </testcase>
    <testcase name="Test LinterInstaller with resource: file:///resource If install button is selected, install linter and return response" time="0" classname="If install button is selected, install linter and return response">
    </testcase>
  </testsuite>
  <testsuite name="Module Installer" timestamp="2021-11-08T22:03:02" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method _elevatedInstall()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.021">
    <testcase name="Module Installer Method _elevatedInstall() Show error message if sudo exec fails with error" time="0.012" classname="Show error message if sudo exec fails with error">
    </testcase>
    <testcase name="Module Installer Method _elevatedInstall() Show stdout if sudo exec succeeds" time="0.005" classname="Show stdout if sudo exec succeeds">
    </testcase>
    <testcase name="Module Installer Method _elevatedInstall() Show stderr if sudo exec gives a warning with stderr" time="0.004" classname="Show stderr if sudo exec gives a warning with stderr">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.014000000000000005">
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pytest)" time="0.001" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pytest)" time="0.001" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (flake8)" time="0.001" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (black)" time="0.001" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0.001" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, without conda name)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.012000000000000004">
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.002" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0.001" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0.001" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0.001" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0.001" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0.001" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, with conda path)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.012000000000000004">
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0.001" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0.001" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0.001" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0.001" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0.001" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0.001" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, without conda name)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.011000000000000003">
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0.001" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0.001" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0.001" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0.001" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0.001" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0.001" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, with conda path)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.010000000000000002">
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0.001" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0.001" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0.001" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0.001" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.010000000000000002">
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (autopep8)" time="0.001" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (kernelspec)" time="0.001" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, without conda name)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.016000000000000007">
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0.001" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0.001" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0.001" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0.001" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0.001" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0.001" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0.001" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0.001" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, with conda path)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.011000000000000003">
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0.001" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0.001" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0.001" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0.001" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0.001" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, without conda name)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.012000000000000004">
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0.001" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0.001" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)" time="0.001" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0.001" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (notebook)" time="0.001" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0.001" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0.001" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0.001" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, without conda name) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="CondaInstaller (without proxy info, with conda path)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.015000000000000006">
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)" time="0.001" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0.002" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)" time="0.001" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0.001" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)" time="0.001" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0.001" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0.001" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (kernelspec)" time="0.001" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0.001" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer CondaInstaller (without proxy info, with conda path) Test args (pip)" time="0.001" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="PipInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="50" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.013000000000000005">
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pytest)" time="0" classname="Test Args (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (flake8)" time="0" classname="Test Args (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pycodestyle)" time="0" classname="Test Args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pylama)" time="0" classname="Test Args (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (prospector)" time="0" classname="Test Args (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pydocstyle)" time="0.001" classname="Test Args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (yapf)" time="0" classname="Test Args (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (autopep8)" time="0.001" classname="Test Args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (mypy)" time="0.001" classname="Test Args (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (unittest)" time="0" classname="Test Args (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (black)" time="0" classname="Test Args (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (bandit)" time="0" classname="Test Args (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (jupyter)" time="0" classname="Test Args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (ipykernel)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (ipykernel)" time="0.001" classname="Test Args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (notebook)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (notebook)" time="0" classname="Test Args (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (kernelspec)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (kernelspec)" time="0" classname="Test Args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nbconvert)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (nbconvert)" time="0" classname="Test Args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pandas)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pandas)" time="0" classname="Test Args (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (tensorboard)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (tensorboard)" time="0" classname="Test Args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (torchProfilerInstallName)" time="0" classname="Test Args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (torchProfilerImportName)" time="0" classname="Test Args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pip)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pip)" time="0" classname="Test Args (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pip) if ensurepip is not available" time="0.001" classname="Test Args (pip) if ensurepip is not available">
    </testcase>
  </testsuite>
  <testsuite name="PipInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="50" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.016000000000000007">
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pytest)" time="0" classname="Test Args (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (flake8)" time="0" classname="Test Args (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pycodestyle)" time="0" classname="Test Args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pylama)" time="0" classname="Test Args (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (prospector)" time="0.001" classname="Test Args (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pydocstyle)" time="0.001" classname="Test Args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (yapf)" time="0.001" classname="Test Args (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (autopep8)" time="0" classname="Test Args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (mypy)" time="0" classname="Test Args (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (unittest)" time="0" classname="Test Args (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (black)" time="0.001" classname="Test Args (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (bandit)" time="0.001" classname="Test Args (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (jupyter)" time="0.001" classname="Test Args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (ipykernel)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (ipykernel)" time="0.001" classname="Test Args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (notebook)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (notebook)" time="0.001" classname="Test Args (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (kernelspec)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (kernelspec)" time="0.001" classname="Test Args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nbconvert)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (nbconvert)" time="0.001" classname="Test Args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pandas)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pandas)" time="0" classname="Test Args (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (tensorboard)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (tensorboard)" time="0" classname="Test Args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (torchProfilerInstallName)" time="0" classname="Test Args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (torchProfilerImportName)" time="0" classname="Test Args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pip)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pip)" time="0" classname="Test Args (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (without proxy info, without conda) Test Args (pip) if ensurepip is not available" time="0.001" classname="Test Args (pip) if ensurepip is not available">
    </testcase>
  </testsuite>
  <testsuite name="PipInstaller (with proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="50" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.013000000000000005">
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pytest)" time="0" classname="Test Args (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (flake8)" time="0" classname="Test Args (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pycodestyle)" time="0.001" classname="Test Args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pylama)" time="0" classname="Test Args (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (prospector)" time="0" classname="Test Args (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pydocstyle)" time="0" classname="Test Args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (yapf)" time="0" classname="Test Args (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (autopep8)" time="0.001" classname="Test Args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (mypy)" time="0.001" classname="Test Args (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (unittest)" time="0" classname="Test Args (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (black)" time="0" classname="Test Args (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (bandit)" time="0" classname="Test Args (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (jupyter)" time="0" classname="Test Args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (ipykernel)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (ipykernel)" time="0" classname="Test Args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (notebook)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (notebook)" time="0" classname="Test Args (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (kernelspec)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (kernelspec)" time="0" classname="Test Args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nbconvert)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (nbconvert)" time="0" classname="Test Args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pandas)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pandas)" time="0" classname="Test Args (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (tensorboard)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (tensorboard)" time="0.001" classname="Test Args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (torchProfilerInstallName)" time="0" classname="Test Args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (torchProfilerImportName)" time="0" classname="Test Args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pip)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pip)" time="0" classname="Test Args (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pip) if ensurepip is not available" time="0.001" classname="Test Args (pip) if ensurepip is not available">
    </testcase>
  </testsuite>
  <testsuite name="PipInstaller (with proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="50" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.015000000000000006">
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pytest)" time="0.001" classname="Test Args (pytest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (flake8)" time="0" classname="Test Args (flake8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pycodestyle)" time="0" classname="Test Args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pylama)" time="0" classname="Test Args (pylama)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (prospector)" time="0.001" classname="Test Args (prospector)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pydocstyle)" time="0" classname="Test Args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (yapf)" time="0" classname="Test Args (yapf)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (autopep8)" time="0.001" classname="Test Args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (mypy)" time="0" classname="Test Args (mypy)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (unittest)" time="0" classname="Test Args (unittest)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (black)" time="0.001" classname="Test Args (black)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (bandit)" time="0.001" classname="Test Args (bandit)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (jupyter)" time="0" classname="Test Args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (ipykernel)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (ipykernel)" time="0" classname="Test Args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (notebook)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (notebook)" time="0" classname="Test Args (notebook)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (kernelspec)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (kernelspec)" time="0" classname="Test Args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nbconvert)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (nbconvert)" time="0" classname="Test Args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pandas)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pandas)" time="0" classname="Test Args (pandas)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (tensorboard)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (tensorboard)" time="0" classname="Test Args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)" time="0.001" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (torchProfilerInstallName)" time="0.001" classname="Test Args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (torchProfilerImportName)" time="0.001" classname="Test Args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pip)" time="0" classname="Ensure getActiveInterpreter is used in PipInstaller (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pip)" time="0.001" classname="Test Args (pip)">
    </testcase>
    <testcase name="Module Installer PipInstaller (with proxy info, without conda) Test Args (pip) if ensurepip is not available" time="0.001" classname="Test Args (pip) if ensurepip is not available">
    </testcase>
  </testsuite>
  <testsuite name="PipEnvInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.009000000000000001">
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (yapf)" time="0.001" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (mypy)" time="0.001" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (black)" time="0.001" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (jupyter)" time="0.001" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (kernelspec)" time="0.001" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (nbconvert)" time="0.001" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="PipEnvInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="49" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.013000000000000005">
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pytest)" time="0" classname="Test args (pytest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final" time="0" classname="Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.4.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.5.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final" time="0" classname="Ensure install arg is &apos;pylint&apos; in 3.6.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final" time="0.001" classname="Ensure install arg is &apos;pylint&apos; in 3.7.0-final">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (flake8)" time="0" classname="Test args (flake8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0.001" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pycodestyle)" time="0" classname="Test args (pycodestyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pylama)" time="0" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pylama)" time="0.001" classname="Test args (pylama)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (prospector)" time="0" classname="Test args (prospector)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0.001" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pydocstyle)" time="0" classname="Test args (pydocstyle)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (yapf)" time="0" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (yapf)" time="0.001" classname="Test args (yapf)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (autopep8)" time="0" classname="Test args (autopep8)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (mypy)" time="0.001" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (mypy)" time="0" classname="Test args (mypy)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (unittest)" time="0" classname="Test args (unittest)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (black)" time="0" classname="Test args (black)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (bandit)" time="0.001" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (bandit)" time="0" classname="Test args (bandit)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (jupyter)" time="0.001" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (jupyter)" time="0" classname="Test args (jupyter)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (ipykernel)" time="0.001" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (ipykernel)" time="0" classname="Test args (ipykernel)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (notebook)" time="0" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (notebook)" time="0.001" classname="Test args (notebook)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (kernelspec)" time="0" classname="Test args (kernelspec)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (nbconvert)" time="0" classname="Test args (nbconvert)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pandas)" time="0" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pandas)" time="0.001" classname="Test args (pandas)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (tensorboard)" time="0" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (tensorboard)" time="0.001" classname="Test args (tensorboard)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerInstallName)" time="0" classname="Test args (torchProfilerInstallName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (torchProfilerImportName)" time="0" classname="Test args (torchProfilerImportName)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
    <testcase name="Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pip)" time="0" classname="Test args (pip)">
    </testcase>
  </testsuite>
  <testsuite name="TestModuleInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pytest)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.004">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (flake8)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pycodestyle)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.003">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pylama)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (prospector)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pydocstyle)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (yapf)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (autopep8)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (mypy)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (unittest)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (black)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (bandit)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (jupyter)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (ipykernel)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.003">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (notebook)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (kernelspec)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (nbconvert)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pandas)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (tensorboard)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.003">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (torchProfilerInstallName)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (torchProfilerImportName)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pip)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="TestModuleInstaller (without proxy info, without conda)" timestamp="2021-11-08T22:03:02" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pytest)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pytest) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (flake8)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.003">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (flake8) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pycodestyle)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pycodestyle) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pylama)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pylama) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (prospector)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (prospector) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pydocstyle)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pydocstyle) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (yapf)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (yapf) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (autopep8)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (autopep8) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (mypy)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (mypy) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (unittest)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.003">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (unittest) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (black)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (black) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (bandit)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (bandit) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (jupyter)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (jupyter) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (ipykernel)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.003">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (ipykernel) If cancellation token is provided, install while showing progress" time="0.001" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (notebook)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (notebook) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (kernelspec)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (kernelspec) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (nbconvert)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (nbconvert) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pandas)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pandas) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (tensorboard)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (tensorboard) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (torchProfilerInstallName)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) ignores failures in IFileSystem.isDirReadonly()" time="0.001" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerInstallName) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (torchProfilerImportName)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (torchProfilerImportName) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="If interpreter type is Unknown (pip)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/installer/moduleInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install" time="0.001" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is read only, do an elevated install">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is set to true and pythonPath directory is not read only, send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal" time="0" classname="If &apos;python.globalModuleInstallation&apos; is not set to true, concatenate arguments with &apos;--user&apos; flag and send command to terminal">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) ignores failures in IFileSystem.isDirReadonly()" time="0" classname="ignores failures in IFileSystem.isDirReadonly()">
    </testcase>
    <testcase name="Module Installer TestModuleInstaller (without proxy info, without conda) If interpreter type is Unknown (pip) If cancellation token is provided, install while showing progress" time="0" classname="If cancellation token is provided, install while showing progress">
    </testcase>
  </testsuite>
  <testsuite name="PipEnv installer" timestamp="2021-11-08T22:03:02" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/installer/pipEnvInstaller.unit.test.js" failures="0" time="0.001">
    <testcase name="PipEnv installer Installer name is pipenv" time="0" classname="Installer name is pipenv">
    </testcase>
    <testcase name="PipEnv installer Installer priority is 10" time="0" classname="Installer priority is 10">
    </testcase>
    <testcase name="PipEnv installer If InterpreterUri is Pipenv interpreter, method isSupported() returns true" time="0" classname="If InterpreterUri is Pipenv interpreter, method isSupported() returns true">
    </testcase>
    <testcase name="PipEnv installer If InterpreterUri is Python interpreter but not of type Pipenv, method isSupported() returns false" time="0" classname="If InterpreterUri is Python interpreter but not of type Pipenv, method isSupported() returns false">
    </testcase>
    <testcase name="PipEnv installer If active environment is pipenv and is related to workspace folder, return true" time="0" classname="If active environment is pipenv and is related to workspace folder, return true">
    </testcase>
    <testcase name="PipEnv installer If active environment is not pipenv, return false" time="0.001" classname="If active environment is not pipenv, return false">
    </testcase>
    <testcase name="PipEnv installer If active environment is pipenv but not related to workspace folder, return false" time="0" classname="If active environment is pipenv but not related to workspace folder, return false">
    </testcase>
  </testsuite>
  <testsuite name="Pip installer" timestamp="2021-11-08T22:03:02" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/installer/pipInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="Pip installer Installer name is Pip" time="0" classname="Installer name is Pip">
    </testcase>
    <testcase name="Pip installer Installer priority is 0" time="0" classname="Installer priority is 0">
    </testcase>
    <testcase name="Pip installer If InterpreterUri is Python interpreter, Python execution factory is called with the correct arguments" time="0" classname="If InterpreterUri is Python interpreter, Python execution factory is called with the correct arguments">
    </testcase>
    <testcase name="Pip installer If InterpreterUri is Resource, Python execution factory is called with the correct arguments" time="0.001" classname="If InterpreterUri is Resource, Python execution factory is called with the correct arguments">
    </testcase>
    <testcase name="Pip installer Method isSupported() returns true if pip module is installed" time="0" classname="Method isSupported() returns true if pip module is installed">
    </testcase>
    <testcase name="Pip installer Method isSupported() returns false if pip module is not installed" time="0" classname="Method isSupported() returns false if pip module is not installed">
    </testcase>
    <testcase name="Pip installer Method isSupported() returns false if checking if pip module is installed fails with error" time="0.001" classname="Method isSupported() returns false if checking if pip module is installed fails with error">
    </testcase>
  </testsuite>
  <testsuite name="Module Installer - Poetry" timestamp="2021-11-08T22:03:02" tests="11" file="/home/don/development/vsc/vscode-python/out/test/common/installer/poetryInstaller.unit.test.js" failures="0" time="0.005">
    <testcase name="Module Installer - Poetry Installer name is poetry" time="0" classname="Installer name is poetry">
    </testcase>
    <testcase name="Module Installer - Poetry Installer priority is 10" time="0" classname="Installer priority is 10">
    </testcase>
    <testcase name="Module Installer - Poetry Installer display name is poetry" time="0" classname="Installer display name is poetry">
    </testcase>
    <testcase name="Module Installer - Poetry Is not supported when there is no resource" time="0" classname="Is not supported when there is no resource">
    </testcase>
    <testcase name="Module Installer - Poetry Is not supported when there is no workspace" time="0" classname="Is not supported when there is no workspace">
    </testcase>
    <testcase name="Module Installer - Poetry Get Executable info" time="0" classname="Get Executable info">
    </testcase>
    <testcase name="Module Installer - Poetry Get executable info when installing black" time="0" classname="Get executable info when installing black">
    </testcase>
    <testcase name="Module Installer - Poetry Is supported returns true if selected interpreter is related to the workspace" time="0.002" classname="Is supported returns true if selected interpreter is related to the workspace">
    </testcase>
    <testcase name="Module Installer - Poetry Is supported returns true if no interpreter is selected" time="0.001" classname="Is supported returns true if no interpreter is selected">
    </testcase>
    <testcase name="Module Installer - Poetry Is supported returns false if selected interpreter is not related to the workspace" time="0.001" classname="Is supported returns false if selected interpreter is not related to the workspace">
    </testcase>
    <testcase name="Module Installer - Poetry Is supported returns false if selected interpreter is not of Poetry type" time="0.001" classname="Is supported returns false if selected interpreter is not of Poetry type">
    </testcase>
  </testsuite>
  <testsuite name="DataScienceInstaller install" timestamp="2021-11-08T22:03:02" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productInstaller.unit.test.js" failures="0" time="0.002">
    <testcase name="DataScienceInstaller install Requires interpreter Uri" time="0.001" classname="Requires interpreter Uri">
    </testcase>
    <testcase name="DataScienceInstaller install Will ignore with no installer modules" time="0" classname="Will ignore with no installer modules">
    </testcase>
    <testcase name="DataScienceInstaller install Will invoke conda for conda environments" time="0.001" classname="Will invoke conda for conda environments">
    </testcase>
    <testcase name="DataScienceInstaller install Will invoke pip by default" time="0" classname="Will invoke pip by default">
    </testcase>
    <testcase name="DataScienceInstaller install Will invoke poetry" time="0" classname="Will invoke poetry">
    </testcase>
    <testcase name="DataScienceInstaller install Will invoke pipenv" time="0" classname="Will invoke pipenv">
    </testcase>
    <testcase name="DataScienceInstaller install Will invoke pip for pytorch with conda environment" time="0" classname="Will invoke pip for pytorch with conda environment">
    </testcase>
  </testsuite>
  <testsuite name="Formatter installer" timestamp="2021-11-08T22:03:02" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productInstaller.unit.test.js" failures="0" time="0.004">
    <testcase name="Formatter installer If black is not installed, offer autopep8 and yapf as options" time="0.001" classname="If black is not installed, offer autopep8 and yapf as options">
    </testcase>
    <testcase name="Formatter installer If autopep8 is not installed, offer black and yapf as options" time="0.001" classname="If autopep8 is not installed, offer black and yapf as options">
    </testcase>
    <testcase name="Formatter installer If yapf is not installed, offer autopep8 and black as options" time="0.001" classname="If yapf is not installed, offer autopep8 and black as options">
    </testcase>
    <testcase name="Formatter installer If the formatter is not executable as a module, display an error message" time="0.001" classname="If the formatter is not executable as a module, display an error message">
    </testcase>
    <testcase name="Formatter installer If &quot;Do not show again&quot; has been selected earlier, do not display the prompt" time="0" classname="If &quot;Do not show again&quot; has been selected earlier, do not display the prompt">
    </testcase>
    <testcase name="Formatter installer If &quot;Do not show again&quot; is selected, do not install the formatter and do not show the prompt again" time="0" classname="If &quot;Do not show again&quot; is selected, do not install the formatter and do not show the prompt again">
    </testcase>
  </testsuite>
  <testsuite name="Product Path" timestamp="2021-11-08T22:03:02" tests="52" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method isExecutableAModule()" timestamp="2021-11-08T22:03:02" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/installer/productPath.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Common installer Service Registry" timestamp="2021-11-08T22:03:02" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/installer/serviceRegistry.unit.test.js" failures="0" time="0.001">
    <testcase name="Common installer Service Registry Ensure services are registered" time="0.001" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="Interpreter Path Proxy Service" timestamp="2021-11-08T22:03:02" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/interpreterPathProxyService.unit.test.js" failures="0" time="0.027">
    <testcase name="Interpreter Path Proxy Service When in experiment, use interpreter path service to get setting value" time="0.014" classname="When in experiment, use interpreter path service to get setting value">
    </testcase>
    <testcase name="Interpreter Path Proxy Service When not in experiment, use workspace service to get setting value" time="0.013" classname="When not in experiment, use workspace service to get setting value">
    </testcase>
  </testsuite>
  <testsuite name="Interpreter Path Service" timestamp="2021-11-08T22:03:02" tests="30" file="/home/don/development/vsc/vscode-python/out/test/common/interpreterPathService.unit.test.js" failures="0" time="0.005">
    <testcase name="Interpreter Path Service Ensure execution of method copyOldInterpreterStorageValuesToNew() goes as expected" time="0.001" classname="Ensure execution of method copyOldInterpreterStorageValuesToNew() goes as expected">
    </testcase>
    <testcase name="Interpreter Path Service If the one-off transfer to new storage has not happened yet for the workspace folder, do it and record the transfer" time="0" classname="If the one-off transfer to new storage has not happened yet for the workspace folder, do it and record the transfer">
    </testcase>
    <testcase name="Interpreter Path Service If the one-off transfer to new storage has already happened for the workspace folder, do not update and simply return" time="0" classname="If the one-off transfer to new storage has already happened for the workspace folder, do not update and simply return">
    </testcase>
    <testcase name="Interpreter Path Service If no folder is opened, do not do the one-off transfer to new storage for the workspace folder" time="0.001" classname="If no folder is opened, do not do the one-off transfer to new storage for the workspace folder">
    </testcase>
    <testcase name="Interpreter Path Service If the one-off transfer to new storage has not happened yet for the workspace, do it and record the transfer" time="0.001" classname="If the one-off transfer to new storage has not happened yet for the workspace, do it and record the transfer">
    </testcase>
    <testcase name="Interpreter Path Service If the one-off transfer to new storage has already happened for the workspace, do not update and simply return" time="0" classname="If the one-off transfer to new storage has already happened for the workspace, do not update and simply return">
    </testcase>
    <testcase name="Interpreter Path Service Do not update workspace settings and if a folder is directly opened" time="0" classname="Do not update workspace settings and if a folder is directly opened">
    </testcase>
    <testcase name="Interpreter Path Service If the one-off transfer to new storage has not happened yet for the user setting, do it, record the transfer" time="0.001" classname="If the one-off transfer to new storage has not happened yet for the user setting, do it, record the transfer">
    </testcase>
    <testcase name="Interpreter Path Service If the one-off transfer to new storage has already happened for the user setting, do not update and simply return" time="0" classname="If the one-off transfer to new storage has already happened for the user setting, do not update and simply return">
    </testcase>
    <testcase name="Interpreter Path Service Global settings are not updated if stored value is same as new value" time="0" classname="Global settings are not updated if stored value is same as new value">
    </testcase>
    <testcase name="Interpreter Path Service Global settings are correctly updated otherwise" time="0" classname="Global settings are correctly updated otherwise">
    </testcase>
    <testcase name="Interpreter Path Service Workspace settings are not updated if stored value is same as new value" time="0" classname="Workspace settings are not updated if stored value is same as new value">
    </testcase>
    <testcase name="Interpreter Path Service Workspace settings are correctly updated if a folder is directly opened" time="0" classname="Workspace settings are correctly updated if a folder is directly opened">
    </testcase>
    <testcase name="Interpreter Path Service Ensure the correct event is fired if Workspace settings are updated" time="0" classname="Ensure the correct event is fired if Workspace settings are updated">
    </testcase>
    <testcase name="Interpreter Path Service Workspace settings are correctly updated in case of multiroot folders" time="0" classname="Workspace settings are correctly updated in case of multiroot folders">
    </testcase>
    <testcase name="Interpreter Path Service Workspace folder settings are correctly updated in case of multiroot folders" time="0" classname="Workspace folder settings are correctly updated in case of multiroot folders">
    </testcase>
    <testcase name="Interpreter Path Service Ensure the correct event is fired if Workspace folder settings are updated" time="0" classname="Ensure the correct event is fired if Workspace folder settings are updated">
    </testcase>
    <testcase name="Interpreter Path Service Updating workspace settings simply returns if no workspace is opened" time="0" classname="Updating workspace settings simply returns if no workspace is opened">
    </testcase>
    <testcase name="Interpreter Path Service Updating workspace folder settings simply returns if no workspace is opened" time="0" classname="Updating workspace folder settings simply returns if no workspace is opened">
    </testcase>
    <testcase name="Interpreter Path Service Inspecting settings returns as expected if no workspace is opened" time="0" classname="Inspecting settings returns as expected if no workspace is opened">
    </testcase>
    <testcase name="Interpreter Path Service Inspecting settings returns as expected if a folder is directly opened" time="0" classname="Inspecting settings returns as expected if a folder is directly opened">
    </testcase>
    <testcase name="Interpreter Path Service Inspecting settings returns as expected in case of multiroot folders" time="0" classname="Inspecting settings returns as expected in case of multiroot folders">
    </testcase>
    <testcase name="Interpreter Path Service Inspecting settings falls back to default interpreter setting if no interpreter is set" time="0" classname="Inspecting settings falls back to default interpreter setting if no interpreter is set">
    </testcase>
    <testcase name="Interpreter Path Service Getting setting value returns workspace folder value if it&apos;s defined" time="0" classname="Getting setting value returns workspace folder value if it&apos;s defined">
    </testcase>
    <testcase name="Interpreter Path Service Getting setting value returns workspace value if workspace folder value is &apos;undefined&apos;" time="0" classname="Getting setting value returns workspace value if workspace folder value is &apos;undefined&apos;">
    </testcase>
    <testcase name="Interpreter Path Service Getting setting value returns global value if workspace folder &amp; workspace value are &apos;undefined&apos;" time="0" classname="Getting setting value returns global value if workspace folder &amp; workspace value are &apos;undefined&apos;">
    </testcase>
    <testcase name="Interpreter Path Service Getting setting value returns &apos;python&apos; if all workspace folder, workspace, and global value are &apos;undefined&apos;" time="0" classname="Getting setting value returns &apos;python&apos; if all workspace folder, workspace, and global value are &apos;undefined&apos;">
    </testcase>
    <testcase name="Interpreter Path Service If defaultInterpreterPathSetting is changed, an event is fired" time="0.001" classname="If defaultInterpreterPathSetting is changed, an event is fired">
    </testcase>
    <testcase name="Interpreter Path Service If some other setting changed, no event is fired" time="0" classname="If some other setting changed, no event is fired">
    </testcase>
    <testcase name="Interpreter Path Service Ensure on interpreter change captures the fired event with the correct arguments" time="0" classname="Ensure on interpreter change captures the fired event with the correct arguments">
    </testcase>
  </testsuite>
  <testsuite name="File Downloader" timestamp="2021-11-08T22:03:02" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/net/fileDownloader.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="File Downloader (real)" timestamp="2021-11-08T22:03:02" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/net/fileDownloader.unit.test.js" failures="0" time="0.058">
    <testcase name="File Downloader File Downloader (real) File gets downloaded" time="0.012" classname="File gets downloaded">
    </testcase>
    <testcase name="File Downloader File Downloader (real) Error is throw for http Status !== 200" time="0.002" classname="Error is throw for http Status !== 200">
    </testcase>
    <testcase name="File Downloader File Downloader (real) Error is throw if unable to write to the file stream" time="0.002" classname="Error is throw if unable to write to the file stream">
    </testcase>
    <testcase name="File Downloader File Downloader (real) Error is throw if file stream throws an error" time="0.002" classname="Error is throw if file stream throws an error">
    </testcase>
    <testcase name="File Downloader File Downloader (real) Report progress as file gets downloaded" time="0.04" classname="Report progress as file gets downloaded">
    </testcase>
  </testsuite>
  <testsuite name="File Downloader (mocks)" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/net/fileDownloader.unit.test.js" failures="0" time="0.001">
    <testcase name="File Downloader File Downloader (mocks) Create temporary file and return path to that file" time="0" classname="Create temporary file and return path to that file">
    </testcase>
    <testcase name="File Downloader File Downloader (mocks) Display progress message in output channel" time="0.001" classname="Display progress message in output channel">
    </testcase>
    <testcase name="File Downloader File Downloader (mocks) Display progress when downloading" time="0" classname="Display progress when downloading">
    </testcase>
    <testcase name="File Downloader File Downloader (mocks) Dispose temp file and bubble error thrown by status progress" time="0" classname="Dispose temp file and bubble error thrown by status progress">
    </testcase>
  </testsuite>
  <testsuite name="Http Client" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/net/httpClient.unit.test.js" failures="0" time="0">
    <testcase name="Http Client Get proxy info" time="0" classname="Get proxy info">
    </testcase>
  </testsuite>
  <testsuite name="Test getJSON()" timestamp="2021-11-08T22:03:03" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/net/httpClient.unit.test.js" failures="0" time="0.026000000000000002">
    <testcase name="Http Client Test getJSON() Throw error if request returns with download error" time="0.005" classname="Throw error if request returns with download error">
    </testcase>
    <testcase name="Http Client Test getJSON() Throw error if request does not return with status code 200" time="0.004" classname="Throw error if request does not return with status code 200">
    </testcase>
    <testcase name="Http Client Test getJSON() If strict is set to true, and parsing fails, throw error" time="0.004" classname="If strict is set to true, and parsing fails, throw error">
    </testcase>
    <testcase name="Http Client Test getJSON() If strict is set to false, and jsonc parsing returns error codes, then log errors and don&apos;t throw, return json" time="0.004" classname="If strict is set to false, and jsonc parsing returns error codes, then log errors and don&apos;t throw, return json">
    </testcase>
    <testcase name="Http Client Test getJSON() Return expected json if strict is set to true and parsing is successful" time="0.005" classname="Return expected json if strict is set to true and parsing is successful">
    </testcase>
    <testcase name="Http Client Test getJSON() Return expected json if strict is set to false and parsing is successful" time="0.004" classname="Return expected json if strict is set to false and parsing is successful">
    </testcase>
  </testsuite>
  <testsuite name="Persistent State" timestamp="2021-11-08T22:03:03" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/persistentState.unit.test.js" failures="0" time="0.013999999999999999">
    <testcase name="Persistent State Global states created are restored on invoking clean storage command" time="0.001" classname="Global states created are restored on invoking clean storage command">
    </testcase>
    <testcase name="Persistent State Workspace states created are restored on invoking clean storage command" time="0" classname="Workspace states created are restored on invoking clean storage command">
    </testcase>
    <testcase name="Persistent State Ensure internal global storage extension uses to track other storages does not contain duplicate entries" time="0.005" classname="Ensure internal global storage extension uses to track other storages does not contain duplicate entries">
    </testcase>
    <testcase name="Persistent State Ensure internal workspace storage extension uses to track other storages does not contain duplicate entries" time="0.005" classname="Ensure internal workspace storage extension uses to track other storages does not contain duplicate entries">
    </testcase>
    <testcase name="Persistent State Ensure deprecated global storage extension used to track other storages with is reset" time="0.002" classname="Ensure deprecated global storage extension used to track other storages with is reset">
    </testcase>
    <testcase name="Persistent State Ensure deprecated global storage extension used to track other storages with is reset" time="0.001" classname="Ensure deprecated global storage extension used to track other storages with is reset">
    </testcase>
  </testsuite>
  <testsuite name="FileSystem - errors" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/platform/errors.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="isFileNotFoundError" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/platform/errors.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystem - errors isFileNotFoundError EntryNotFound (FileSystemError): spam -&gt; true" time="0" classname="EntryNotFound (FileSystemError): spam -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isFileNotFoundError EntryExists (FileSystemError): spam -&gt; false" time="0" classname="EntryExists (FileSystemError): spam -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isFileNotFoundError Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; true" time="0" classname="Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isFileNotFoundError Error: EEXIST: &lt;msg&gt; ??? &apos;...&apos; -&gt; false" time="0" classname="Error: EEXIST: &lt;msg&gt; ??? &apos;...&apos; -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isFileNotFoundError Error: spam -&gt; undefined" time="0.001" classname="Error: spam -&gt; undefined">
    </testcase>
  </testsuite>
  <testsuite name="isFileExistsError" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/platform/errors.unit.test.js" failures="0" time="0">
    <testcase name="FileSystem - errors isFileExistsError EntryExists (FileSystemError): spam -&gt; true" time="0" classname="EntryExists (FileSystemError): spam -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isFileExistsError EntryNotFound (FileSystemError): spam -&gt; false" time="0" classname="EntryNotFound (FileSystemError): spam -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isFileExistsError Error: EEXIST: &lt;msg&gt; ??? &apos;...&apos; -&gt; true" time="0" classname="Error: EEXIST: &lt;msg&gt; ??? &apos;...&apos; -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isFileExistsError Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false" time="0" classname="Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isFileExistsError Error: spam -&gt; undefined" time="0" classname="Error: spam -&gt; undefined">
    </testcase>
  </testsuite>
  <testsuite name="isFileIsDirError" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/platform/errors.unit.test.js" failures="0" time="0">
    <testcase name="FileSystem - errors isFileIsDirError EntryIsADirectory (FileSystemError): spam -&gt; true" time="0" classname="EntryIsADirectory (FileSystemError): spam -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isFileIsDirError EntryNotFound (FileSystemError): spam -&gt; false" time="0" classname="EntryNotFound (FileSystemError): spam -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isFileIsDirError Error: EISDIR: &lt;msg&gt; ??? &apos;...&apos; -&gt; true" time="0" classname="Error: EISDIR: &lt;msg&gt; ??? &apos;...&apos; -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isFileIsDirError Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false" time="0" classname="Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isFileIsDirError Error: spam -&gt; undefined" time="0" classname="Error: spam -&gt; undefined">
    </testcase>
  </testsuite>
  <testsuite name="isNotDirError" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/platform/errors.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystem - errors isNotDirError EntryNotADirectory (FileSystemError): spam -&gt; true" time="0" classname="EntryNotADirectory (FileSystemError): spam -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isNotDirError EntryNotFound (FileSystemError): spam -&gt; false" time="0.001" classname="EntryNotFound (FileSystemError): spam -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isNotDirError Error: ENOTDIR: &lt;msg&gt; ??? &apos;...&apos; -&gt; true" time="0" classname="Error: ENOTDIR: &lt;msg&gt; ??? &apos;...&apos; -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isNotDirError Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false" time="0" classname="Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isNotDirError Error: spam -&gt; undefined" time="0" classname="Error: spam -&gt; undefined">
    </testcase>
  </testsuite>
  <testsuite name="isNoPermissionsError" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/platform/errors.unit.test.js" failures="0" time="0">
    <testcase name="FileSystem - errors isNoPermissionsError NoPermissions (FileSystemError): spam -&gt; true" time="0" classname="NoPermissions (FileSystemError): spam -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isNoPermissionsError EntryNotFound (FileSystemError): spam -&gt; false" time="0" classname="EntryNotFound (FileSystemError): spam -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isNoPermissionsError Error: EACCES: &lt;msg&gt; ??? &apos;...&apos; -&gt; true" time="0" classname="Error: EACCES: &lt;msg&gt; ??? &apos;...&apos; -&gt; true">
    </testcase>
    <testcase name="FileSystem - errors isNoPermissionsError Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false" time="0" classname="Error: ENOENT: &lt;msg&gt; stat &apos;...&apos; -&gt; false">
    </testcase>
    <testcase name="FileSystem - errors isNoPermissionsError Error: spam -&gt; undefined" time="0" classname="Error: spam -&gt; undefined">
    </testcase>
  </testsuite>
  <testsuite name="Raw FileSystem" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="stat" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem stat wraps the low-level function" time="0.001" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem stat fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="lstat" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem lstat wraps the low-level function (filetype: file" time="0" classname="wraps the low-level function (filetype: file">
    </testcase>
    <testcase name="Raw FileSystem lstat wraps the low-level function (filetype: dir" time="0" classname="wraps the low-level function (filetype: dir">
    </testcase>
    <testcase name="Raw FileSystem lstat wraps the low-level function (filetype: symlink" time="0.001" classname="wraps the low-level function (filetype: symlink">
    </testcase>
    <testcase name="Raw FileSystem lstat wraps the low-level function (filetype: unknown" time="0" classname="wraps the low-level function (filetype: unknown">
    </testcase>
    <testcase name="Raw FileSystem lstat fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="chmod" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem chmod passes through a string mode" time="0" classname="passes through a string mode">
    </testcase>
    <testcase name="Raw FileSystem chmod passes through an int mode" time="0.001" classname="passes through an int mode">
    </testcase>
    <testcase name="Raw FileSystem chmod fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="move" timestamp="2021-11-08T22:03:03" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.002">
    <testcase name="Raw FileSystem move move a file (target does not exist)" time="0.001" classname="move a file (target does not exist)">
    </testcase>
    <testcase name="Raw FileSystem move move a file (target exists)" time="0" classname="move a file (target exists)">
    </testcase>
    <testcase name="Raw FileSystem move move a directory (target does not exist)" time="0" classname="move a directory (target does not exist)">
    </testcase>
    <testcase name="Raw FileSystem move moving a directory fails if target exists" time="0" classname="moving a directory fails if target exists">
    </testcase>
    <testcase name="Raw FileSystem move move a symlink to a directory (target exists)" time="0" classname="move a symlink to a directory (target exists)">
    </testcase>
    <testcase name="Raw FileSystem move fails if the target parent dir does not exist" time="0.001" classname="fails if the target parent dir does not exist">
    </testcase>
    <testcase name="Raw FileSystem move fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="readData" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem readData wraps the low-level function" time="0.001" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem readData fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="readText" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="Raw FileSystem readText wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem readText fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="writeText" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="Raw FileSystem writeText wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem writeText fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="appendText" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem appendText wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem appendText fails if the low-level call fails" time="0.001" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="copyFile" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem copyFile wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem copyFile fails if target parent does not exist" time="0" classname="fails if target parent does not exist">
    </testcase>
    <testcase name="Raw FileSystem copyFile fails if the low-level call fails" time="0.001" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="rmFile" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="Raw FileSystem rmFile wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem rmFile fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="mkdirp" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="Raw FileSystem mkdirp wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem mkdirp fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="rmdir" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem rmdir directory is empty" time="0.001" classname="directory is empty">
    </testcase>
    <testcase name="Raw FileSystem rmdir fails if readDirectory() fails (e.g. is a file)" time="0" classname="fails if readDirectory() fails (e.g. is a file)">
    </testcase>
    <testcase name="Raw FileSystem rmdir fails if not empty" time="0" classname="fails if not empty">
    </testcase>
    <testcase name="Raw FileSystem rmdir fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="rmtree" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem rmtree wraps the low-level function" time="0.001" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem rmtree fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="listdir" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem listdir mixed" time="0" classname="mixed">
    </testcase>
    <testcase name="Raw FileSystem listdir empty" time="0.001" classname="empty">
    </testcase>
    <testcase name="Raw FileSystem listdir fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="statSync" timestamp="2021-11-08T22:03:03" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.003">
    <testcase name="Raw FileSystem statSync wraps the low-level function (filetype: unknown)" time="0.001" classname="wraps the low-level function (filetype: unknown)">
    </testcase>
    <testcase name="Raw FileSystem statSync wraps the low-level function (filetype: file)" time="0" classname="wraps the low-level function (filetype: file)">
    </testcase>
    <testcase name="Raw FileSystem statSync wraps the low-level function (filetype: dir)" time="0" classname="wraps the low-level function (filetype: dir)">
    </testcase>
    <testcase name="Raw FileSystem statSync wraps the low-level function (filetype: file symlink)" time="0.001" classname="wraps the low-level function (filetype: file symlink)">
    </testcase>
    <testcase name="Raw FileSystem statSync wraps the low-level function (filetype: dir symlink)" time="0" classname="wraps the low-level function (filetype: dir symlink)">
    </testcase>
    <testcase name="Raw FileSystem statSync wraps the low-level function (filetype: unknown symlink)" time="0.001" classname="wraps the low-level function (filetype: unknown symlink)">
    </testcase>
    <testcase name="Raw FileSystem statSync fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="readTextSync" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="Raw FileSystem readTextSync wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem readTextSync fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="createReadStream" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem createReadStream wraps the low-level function" time="0.001" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem createReadStream fails if the low-level call fails" time="0" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="createWriteStream" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="Raw FileSystem createWriteStream wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
    <testcase name="Raw FileSystem createWriteStream fails if the low-level call fails" time="0.001" classname="fails if the low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="FileSystemUtils" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="createDirectory" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="FileSystemUtils createDirectory wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
  </testsuite>
  <testsuite name="deleteDirectory" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="FileSystemUtils deleteDirectory wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
  </testsuite>
  <testsuite name="deleteFile" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="FileSystemUtils deleteFile wraps the low-level function" time="0" classname="wraps the low-level function">
    </testcase>
  </testsuite>
  <testsuite name="pathExists" timestamp="2021-11-08T22:03:03" tests="10" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.003">
    <testcase name="FileSystemUtils pathExists exists (without type)" time="0.001" classname="exists (without type)">
    </testcase>
    <testcase name="FileSystemUtils pathExists does not exist (without type)" time="0" classname="does not exist (without type)">
    </testcase>
    <testcase name="FileSystemUtils pathExists matches (type: file)" time="0.001" classname="matches (type: file)">
    </testcase>
    <testcase name="FileSystemUtils pathExists mismatch (type: file)" time="0" classname="mismatch (type: file)">
    </testcase>
    <testcase name="FileSystemUtils pathExists matches (type: directory)" time="0" classname="matches (type: directory)">
    </testcase>
    <testcase name="FileSystemUtils pathExists mismatch (type: directory)" time="0" classname="mismatch (type: directory)">
    </testcase>
    <testcase name="FileSystemUtils pathExists symlinks are followed" time="0" classname="symlinks are followed">
    </testcase>
    <testcase name="FileSystemUtils pathExists mismatch (type: symlink)" time="0" classname="mismatch (type: symlink)">
    </testcase>
    <testcase name="FileSystemUtils pathExists matches (type: unknown)" time="0" classname="matches (type: unknown)">
    </testcase>
    <testcase name="FileSystemUtils pathExists mismatch (type: unknown)" time="0.001" classname="mismatch (type: unknown)">
    </testcase>
  </testsuite>
  <testsuite name="fileExists" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystemUtils fileExists want file, got file" time="0" classname="want file, got file">
    </testcase>
    <testcase name="FileSystemUtils fileExists want file, not file" time="0" classname="want file, not file">
    </testcase>
    <testcase name="FileSystemUtils fileExists symlink" time="0.001" classname="symlink">
    </testcase>
    <testcase name="FileSystemUtils fileExists unknown" time="0" classname="unknown">
    </testcase>
  </testsuite>
  <testsuite name="directoryExists" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystemUtils directoryExists want directory, got directory" time="0" classname="want directory, got directory">
    </testcase>
    <testcase name="FileSystemUtils directoryExists want directory, not directory" time="0" classname="want directory, not directory">
    </testcase>
    <testcase name="FileSystemUtils directoryExists symlink" time="0.001" classname="symlink">
    </testcase>
    <testcase name="FileSystemUtils directoryExists unknown" time="0" classname="unknown">
    </testcase>
  </testsuite>
  <testsuite name="listdir" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.002">
    <testcase name="FileSystemUtils listdir wraps the raw call on success" time="0" classname="wraps the raw call on success">
    </testcase>
    <testcase name="FileSystemUtils listdir returns [] if the directory does not exist" time="0.001" classname="returns [] if the directory does not exist">
    </testcase>
    <testcase name="FileSystemUtils listdir fails if not a directory" time="0" classname="fails if not a directory">
    </testcase>
    <testcase name="FileSystemUtils listdir fails if the raw call promise fails" time="0.001" classname="fails if the raw call promise fails">
    </testcase>
  </testsuite>
  <testsuite name="getSubDirectories" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystemUtils getSubDirectories filters out non-subdirs" time="0.001" classname="filters out non-subdirs">
    </testcase>
  </testsuite>
  <testsuite name="getFiles" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="FileSystemUtils getFiles filters out non-files" time="0" classname="filters out non-files">
    </testcase>
  </testsuite>
  <testsuite name="isDirReadonly" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.002">
    <testcase name="FileSystemUtils isDirReadonly is not readonly" time="0" classname="is not readonly">
    </testcase>
    <testcase name="FileSystemUtils isDirReadonly is readonly" time="0.001" classname="is readonly">
    </testcase>
    <testcase name="FileSystemUtils isDirReadonly fails if the directory does not exist" time="0.001" classname="fails if the directory does not exist">
    </testcase>
  </testsuite>
  <testsuite name="getFileHash" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystemUtils getFileHash Getting hash for a file should return non-empty string" time="0.001" classname="Getting hash for a file should return non-empty string">
    </testcase>
    <testcase name="FileSystemUtils getFileHash Getting hash for non existent file should throw error" time="0" classname="Getting hash for non existent file should throw error">
    </testcase>
  </testsuite>
  <testsuite name="search" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0.002">
    <testcase name="FileSystemUtils search found matches (without cwd)" time="0" classname="found matches (without cwd)">
    </testcase>
    <testcase name="FileSystemUtils search found matches (with cwd)" time="0.001" classname="found matches (with cwd)">
    </testcase>
    <testcase name="FileSystemUtils search no matches (empty)" time="0" classname="no matches (empty)">
    </testcase>
    <testcase name="FileSystemUtils search no matches (undefined)" time="0.001" classname="no matches (undefined)">
    </testcase>
  </testsuite>
  <testsuite name="fileExistsSync" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/platform/filesystem.unit.test.js" failures="0" time="0">
    <testcase name="FileSystemUtils fileExistsSync file exists" time="0" classname="file exists">
    </testcase>
    <testcase name="FileSystemUtils fileExistsSync file does not exist" time="0" classname="file does not exist">
    </testcase>
    <testcase name="FileSystemUtils fileExistsSync fails if low-level call fails" time="0" classname="fails if low-level call fails">
    </testcase>
  </testsuite>
  <testsuite name="FileSystem - Path Utils" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/platform/fs-paths.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="path-related" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/platform/fs-paths.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="arePathsSame" timestamp="2021-11-08T22:03:03" tests="16" file="/home/don/development/vsc/vscode-python/out/test/common/platform/fs-paths.unit.test.js" failures="0" time="0.003">
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: Unknown) - c:\users\peter smith\my documents\test.txt" time="0" classname="True if paths are identical (type: Unknown) - c:\users\peter smith\my documents\test.txt">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: Unknown) - c:\USERS\Peter Smith\my documents\test.TXT" time="0" classname="True if paths are identical (type: Unknown) - c:\USERS\Peter Smith\my documents\test.TXT">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths are completely different (type: Unknown)" time="0" classname="False if paths are completely different (type: Unknown)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths only differ by case (type: Unknown)" time="0" classname="False if paths only differ by case (type: Unknown)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: Windows) - c:\users\peter smith\my documents\test.txt" time="0" classname="True if paths are identical (type: Windows) - c:\users\peter smith\my documents\test.txt">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: Windows) - c:\USERS\Peter Smith\my documents\test.TXT" time="0" classname="True if paths are identical (type: Windows) - c:\USERS\Peter Smith\my documents\test.TXT">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths are completely different (type: Windows)" time="0" classname="False if paths are completely different (type: Windows)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths only differ by case (type: Windows)" time="0" classname="True if paths only differ by case (type: Windows)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: OSX) - c:\users\peter smith\my documents\test.txt" time="0.001" classname="True if paths are identical (type: OSX) - c:\users\peter smith\my documents\test.txt">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: OSX) - c:\USERS\Peter Smith\my documents\test.TXT" time="0" classname="True if paths are identical (type: OSX) - c:\USERS\Peter Smith\my documents\test.TXT">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths are completely different (type: OSX)" time="0" classname="False if paths are completely different (type: OSX)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths only differ by case (type: OSX)" time="0" classname="False if paths only differ by case (type: OSX)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: Linux) - c:\users\peter smith\my documents\test.txt" time="0.001" classname="True if paths are identical (type: Linux) - c:\users\peter smith\my documents\test.txt">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame True if paths are identical (type: Linux) - c:\USERS\Peter Smith\my documents\test.TXT" time="0" classname="True if paths are identical (type: Linux) - c:\USERS\Peter Smith\my documents\test.TXT">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths are completely different (type: Linux)" time="0" classname="False if paths are completely different (type: Linux)">
    </testcase>
    <testcase name="FileSystem - Path Utils path-related arePathsSame False if paths only differ by case (type: Linux)" time="0.001" classname="False if paths only differ by case (type: Linux)">
    </testcase>
  </testsuite>
  <testsuite name="FileSystem - temp files" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/platform/fs-temp.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="createFile" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/platform/fs-temp.unit.test.js" failures="0" time="0.001">
    <testcase name="FileSystem - temp files createFile fails if the raw call fails" time="0" classname="fails if the raw call fails">
    </testcase>
    <testcase name="FileSystem - temp files createFile fails if the raw call &quot;returns&quot; an error" time="0.001" classname="fails if the raw call &quot;returns&quot; an error">
    </testcase>
  </testsuite>
  <testsuite name="Common Platform Service Registry" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/platform/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Common Platform Service Registry Ensure services are registered" time="0" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="ProcessLogger suite" timestamp="2021-11-08T22:03:03" tests="10" file="/home/don/development/vsc/vscode-python/out/test/common/process/logger.unit.test.js" failures="0" time="0.003">
    <testcase name="ProcessLogger suite Logger displays the process command, arguments and current working directory in the output channel" time="0" classname="Logger displays the process command, arguments and current working directory in the output channel">
    </testcase>
    <testcase name="ProcessLogger suite Logger adds quotes around arguments if they contain spaces" time="0.001" classname="Logger adds quotes around arguments if they contain spaces">
    </testcase>
    <testcase name="ProcessLogger suite Logger preserves quotes around arguments if they contain spaces" time="0" classname="Logger preserves quotes around arguments if they contain spaces">
    </testcase>
    <testcase name="ProcessLogger suite Logger converts single quotes around arguments to double quotes if they contain spaces" time="0" classname="Logger converts single quotes around arguments to double quotes if they contain spaces">
    </testcase>
    <testcase name="ProcessLogger suite Logger removes single quotes around arguments if they do not contain spaces" time="0.001" classname="Logger removes single quotes around arguments if they do not contain spaces">
    </testcase>
    <testcase name="ProcessLogger suite Logger replaces the path/to/home with ~ in the current working directory" time="0" classname="Logger replaces the path/to/home with ~ in the current working directory">
    </testcase>
    <testcase name="ProcessLogger suite Logger replaces the path/to/home with ~ in the command path" time="0" classname="Logger replaces the path/to/home with ~ in the command path">
    </testcase>
    <testcase name="ProcessLogger suite Logger replaces the path/to/home with ~ if shell command is provided" time="0.001" classname="Logger replaces the path/to/home with ~ if shell command is provided">
    </testcase>
    <testcase name="ProcessLogger suite Logger doesn&apos;t display the working directory line if there is no options parameter" time="0" classname="Logger doesn&apos;t display the working directory line if there is no options parameter">
    </testcase>
    <testcase name="ProcessLogger suite Logger doesn&apos;t display the working directory line if there is no cwd key in the options parameter" time="0" classname="Logger doesn&apos;t display the working directory line if there is no cwd key in the options parameter">
    </testcase>
  </testsuite>
  <testsuite name="Process - Process Service" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/process/proc.unit.test.js" failures="0" time="0.047">
    <testcase name="Process - Process Service Process is killed" time="0.024" classname="Process is killed">
    </testcase>
    <testcase name="Process - Process Service Process is alive" time="0.023" classname="Process is alive">
    </testcase>
  </testsuite>
  <testsuite name="Process - ProcessServiceFactory" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/process/processFactory.unit.test.js" failures="0" time="0.001">
    <testcase name="Process - ProcessServiceFactory Ensure ProcessService is created with an existing resource" time="0.001" classname="Ensure ProcessService is created with an existing resource">
    </testcase>
    <testcase name="Process - ProcessServiceFactory Ensure ProcessService is created with an undefined resource" time="0" classname="Ensure ProcessService is created with an undefined resource">
    </testcase>
  </testsuite>
  <testsuite name="PythonEnvironment" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonEnvironment.unit.test.js" failures="0" time="0.003">
    <testcase name="PythonEnvironment getInterpreterInformation should return an object if the python path is valid" time="0.001" classname="getInterpreterInformation should return an object if the python path is valid">
    </testcase>
    <testcase name="PythonEnvironment getInterpreterInformation should return an object if the version info contains less than 5 items" time="0" classname="getInterpreterInformation should return an object if the version info contains less than 5 items">
    </testcase>
    <testcase name="PythonEnvironment getInterpreterInformation should return an object if the version info contains less than 4 items" time="0" classname="getInterpreterInformation should return an object if the version info contains less than 4 items">
    </testcase>
    <testcase name="PythonEnvironment getInterpreterInformation should return an object with the architecture value set to x86 if json.is64bit is not 64bit" time="0" classname="getInterpreterInformation should return an object with the architecture value set to x86 if json.is64bit is not 64bit">
    </testcase>
    <testcase name="PythonEnvironment getInterpreterInformation should error out if interpreterInfo.py times out" time="0" classname="getInterpreterInformation should error out if interpreterInfo.py times out">
    </testcase>
    <testcase name="PythonEnvironment getInterpreterInformation should return undefined if the json value returned by interpreterInfo.py is not valid" time="0" classname="getInterpreterInformation should return undefined if the json value returned by interpreterInfo.py is not valid">
    </testcase>
    <testcase name="PythonEnvironment getExecutablePath should return pythonPath if pythonPath is a file" time="0" classname="getExecutablePath should return pythonPath if pythonPath is a file">
    </testcase>
    <testcase name="PythonEnvironment getExecutablePath should not return pythonPath if pythonPath is not a file" time="0" classname="getExecutablePath should not return pythonPath if pythonPath is not a file">
    </testcase>
    <testcase name="PythonEnvironment getExecutablePath should throw if the result of exec() writes to stderr" time="0.001" classname="getExecutablePath should throw if the result of exec() writes to stderr">
    </testcase>
    <testcase name="PythonEnvironment isModuleInstalled should call processService.exec()" time="0" classname="isModuleInstalled should call processService.exec()">
    </testcase>
    <testcase name="PythonEnvironment isModuleInstalled should return true when processService.exec() succeeds" time="0" classname="isModuleInstalled should return true when processService.exec() succeeds">
    </testcase>
    <testcase name="PythonEnvironment isModuleInstalled should return false when processService.exec() throws" time="0.001" classname="isModuleInstalled should return false when processService.exec() throws">
    </testcase>
    <testcase name="PythonEnvironment getExecutionInfo should return pythonPath and the execution arguments as is" time="0" classname="getExecutionInfo should return pythonPath and the execution arguments as is">
    </testcase>
  </testsuite>
  <testsuite name="CondaEnvironment" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonEnvironment.unit.test.js" failures="0" time="0.001">
    <testcase name="CondaEnvironment getExecutionInfo with a named environment should return execution info using the environment name" time="0" classname="getExecutionInfo with a named environment should return execution info using the environment name">
    </testcase>
    <testcase name="CondaEnvironment getExecutionInfo with a non-named environment should return execution info using the environment path" time="0.001" classname="getExecutionInfo with a non-named environment should return execution info using the environment path">
    </testcase>
    <testcase name="CondaEnvironment getExecutionObservableInfo with a named environment should return execution info using pythonPath only" time="0" classname="getExecutionObservableInfo with a named environment should return execution info using pythonPath only">
    </testcase>
    <testcase name="CondaEnvironment getExecutionObservableInfo with a non-named environment should return execution info using pythonPath only" time="0" classname="getExecutionObservableInfo with a non-named environment should return execution info using pythonPath only">
    </testcase>
  </testsuite>
  <testsuite name="WindowsStoreEnvironment" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonEnvironment.unit.test.js" failures="0" time="0">
    <testcase name="WindowsStoreEnvironment Should return pythonPath if it is the path to the windows store interpreter" time="0" classname="Should return pythonPath if it is the path to the windows store interpreter">
    </testcase>
  </testsuite>
  <testsuite name="Process - PythonExecutionFactory" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonExecutionFactory.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Without a resource" timestamp="2021-11-08T22:03:03" tests="14" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonExecutionFactory.unit.test.js" failures="0" time="0.005">
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure PythonExecutionService is created" time="0.001" classname="Ensure PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource If interpreter is explicitly set, ensure we use it" time="0.001" classname="If interpreter is explicitly set, ensure we use it">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created" time="0" classname="If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure we use an existing `create` method if there are no environment variables for the activated env" time="0.001" classname="Ensure we use an existing `create` method if there are no environment variables for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env" time="0.001" classname="Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource PythonExecutionService is created" time="0.001" classname="PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment" time="0" classname="Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined" time="0" classname="Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure `createCondaExecutionService` returns undefined if there is no conda environment" time="0" classname="Ensure `createCondaExecutionService` returns undefined if there is no conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run" time="0" classname="Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run">
    </testcase>
  </testsuite>
  <testsuite name="Without a resource and an interpreter" timestamp="2021-11-08T22:03:03" tests="14" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonExecutionFactory.unit.test.js" failures="0" time="0.004">
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure PythonExecutionService is created" time="0.001" classname="Ensure PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter If interpreter is explicitly set, ensure we use it" time="0" classname="If interpreter is explicitly set, ensure we use it">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created" time="0" classname="If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables for the activated env" time="0.001" classname="Ensure we use an existing `create` method if there are no environment variables for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env" time="0.001" classname="Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter PythonExecutionService is created" time="0" classname="PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment" time="0" classname="Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined" time="0" classname="Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure `createCondaExecutionService` returns undefined if there is no conda environment" time="0.001" classname="Ensure `createCondaExecutionService` returns undefined if there is no conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory Without a resource and an interpreter Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run" time="0" classname="Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run">
    </testcase>
  </testsuite>
  <testsuite name="With a resource" timestamp="2021-11-08T22:03:03" tests="14" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonExecutionFactory.unit.test.js" failures="0" time="0.004">
    <testcase name="Process - PythonExecutionFactory With a resource Ensure PythonExecutionService is created" time="0" classname="Ensure PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource If interpreter is explicitly set, ensure we use it" time="0.001" classname="If interpreter is explicitly set, ensure we use it">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created" time="0.001" classname="If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource Ensure we use an existing `create` method if there are no environment variables for the activated env" time="0.001" classname="Ensure we use an existing `create` method if there are no environment variables for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env" time="0" classname="Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource PythonExecutionService is created" time="0" classname="PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment" time="0" classname="Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined" time="0.001" classname="Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource Ensure `createCondaExecutionService` returns undefined if there is no conda environment" time="0" classname="Ensure `createCondaExecutionService` returns undefined if there is no conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run" time="0" classname="Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run">
    </testcase>
  </testsuite>
  <testsuite name="With a resource and an interpreter" timestamp="2021-11-08T22:03:03" tests="14" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonExecutionFactory.unit.test.js" failures="0" time="0.003">
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure PythonExecutionService is created" time="0.001" classname="Ensure PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter If interpreter is explicitly set, ensure we use it" time="0.001" classname="If interpreter is explicitly set, ensure we use it">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created" time="0.001" classname="If no interpreter is explicitly set, ensure we autoselect before PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables for the activated env" time="0" classname="Ensure we use an existing `create` method if there are no environment variables for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env" time="0" classname="Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter PythonExecutionService is created" time="0" classname="PythonExecutionService is created">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment" time="0" classname="Ensure `createCondaExecutionService` creates a CondaExecutionService instance if there is a conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined" time="0" classname="Ensure `createCondaExecutionService` instantiates a ProcessService instance if the process argument is undefined">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure `createCondaExecutionService` returns undefined if there is no conda environment" time="0" classname="Ensure `createCondaExecutionService` returns undefined if there is no conda environment">
    </testcase>
    <testcase name="Process - PythonExecutionFactory With a resource and an interpreter Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run" time="0" classname="Ensure `createCondaExecutionService` returns undefined if the conda version does not support conda run">
    </testcase>
  </testsuite>
  <testsuite name="PythonProcessService" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonProcess.unit.test.js" failures="0" time="0.002">
    <testcase name="PythonProcessService execObservable should call processService.execObservable" time="0.001" classname="execObservable should call processService.execObservable">
    </testcase>
    <testcase name="PythonProcessService execModuleObservable should call processService.execObservable with the -m argument" time="0" classname="execModuleObservable should call processService.execObservable with the -m argument">
    </testcase>
    <testcase name="PythonProcessService exec should call processService.exec" time="0.001" classname="exec should call processService.exec">
    </testcase>
    <testcase name="PythonProcessService execModule should call processService.exec with the -m argument" time="0" classname="execModule should call processService.exec with the -m argument">
    </testcase>
    <testcase name="PythonProcessService execModule should throw an error if the module is not installed" time="0" classname="execModule should throw an error if the module is not installed">
    </testcase>
  </testsuite>
  <testsuite name="Process - Python tool execution service" timestamp="2021-11-08T22:03:03" tests="8" file="/home/don/development/vsc/vscode-python/out/test/common/process/pythonToolService.unit.test.js" failures="0" time="0">
    <testcase name="Process - Python tool execution service When calling execObservable, throw an error if environment variables are passed to the options parameter" time="0" classname="When calling execObservable, throw an error if environment variables are passed to the options parameter">
    </testcase>
    <testcase name="Process - Python tool execution service When calling execObservable, use a python execution service if a module name is passed to the execution info" time="0" classname="When calling execObservable, use a python execution service if a module name is passed to the execution info">
    </testcase>
    <testcase name="Process - Python tool execution service When calling execObservable, use a process service if an empty module name string is passed to the execution info" time="0" classname="When calling execObservable, use a process service if an empty module name string is passed to the execution info">
    </testcase>
    <testcase name="Process - Python tool execution service When calling execObservable, use a process service if no module name is passed to the execution info" time="0" classname="When calling execObservable, use a process service if no module name is passed to the execution info">
    </testcase>
    <testcase name="Process - Python tool execution service When calling exec, throw an error if environment variables are passed to the options parameter" time="0" classname="When calling exec, throw an error if environment variables are passed to the options parameter">
    </testcase>
    <testcase name="Process - Python tool execution service When calling exec, use a python execution service if a module name is passed to the execution info" time="0" classname="When calling exec, use a python execution service if a module name is passed to the execution info">
    </testcase>
    <testcase name="Process - Python tool execution service When calling exec, use a process service if an empty module name string is passed to the execution info" time="0" classname="When calling exec, use a process service if an empty module name string is passed to the execution info">
    </testcase>
    <testcase name="Process - Python tool execution service When calling exec, use a process service if no module name is passed to the execution info" time="0" classname="When calling exec, use a process service if no module name is passed to the execution info">
    </testcase>
  </testsuite>
  <testsuite name="Common Process Service Registry" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/process/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Common Process Service Registry Ensure services are registered" time="0" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="Common - Service Registry" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/serviceRegistry.unit.test.js" failures="0" time="0.005">
    <testcase name="Common - Service Registry Registrations" time="0.005" classname="Registrations">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Environment Activation (bash)" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and there are no spaces in the script file (pythonpath)," timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and script file is activate" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: bash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: zsh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: ksh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: cshell)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: wsl)" time="0" classname="Ensure bash Activation command returns activation command (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.sh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: bash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: zsh)" time="0.001" classname="Ensure bash Activation command returns activation command (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: ksh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: wsl)" time="0" classname="Ensure bash Activation command returns activation command (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.csh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: zsh)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns activation command (Shell: cshell)" time="0.001" classname="Ensure bash Activation command returns activation command (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.fish" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns activation command (Shell: fish)" time="0" classname="Ensure bash Activation command returns activation command (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: gitbash)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and there are spaces in the script file (pythonpath)," timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and script file is activate" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: bash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: zsh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: ksh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: wsl)" time="0.001" classname="Ensure bash Activation command returns activation command (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.sh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: bash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: zsh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: ksh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: wsl)" time="0" classname="Ensure bash Activation command returns activation command (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.csh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns activation command (Shell: cshell)" time="0" classname="Ensure bash Activation command returns activation command (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.fish" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: bash)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns activation command (Shell: fish)" time="0" classname="Ensure bash Activation command returns activation command (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: cshell)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and there are spaces in the script file (pythonpath)," timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and script file is activate" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: bash)" time="0.001" classname="Ensure bash Activation command returns activation command (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: zsh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: ksh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: wsl)" time="0" classname="Ensure bash Activation command returns activation command (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.sh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: bash)" time="0" classname="Ensure bash Activation command returns activation command (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: zsh)" time="0" classname="Ensure bash Activation command returns activation command (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: ksh)" time="0.001" classname="Ensure bash Activation command returns activation command (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: wsl)" time="0" classname="Ensure bash Activation command returns activation command (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.csh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: bash)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns activation command (Shell: cshell)" time="0" classname="Ensure bash Activation command returns activation command (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: tshell)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.fish" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: bash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: zsh)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns activation command (Shell: fish)" time="0" classname="Ensure bash Activation command returns activation command (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: cshell)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: bash)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: cshell)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.bash.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: powershell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: powershellCore)" time="0" classname="Ensure bash Activation command returns undefined (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: commandPrompt)" time="0" classname="Ensure bash Activation command returns undefined (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: gitbash)" time="0" classname="Ensure bash Activation command returns undefined (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: bash)" time="0.001" classname="Ensure bash Activation command returns undefined (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: zsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: ksh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: fish)" time="0" classname="Ensure bash Activation command returns undefined (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: cshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: tshell)" time="0" classname="Ensure bash Activation command returns undefined (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: wsl)" time="0" classname="Ensure bash Activation command returns undefined (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: xonsh)" time="0" classname="Ensure bash Activation command returns undefined (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure bash Activation command returns undefined (Shell: other)" time="0" classname="Ensure bash Activation command returns undefined (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Environment Activation (cmd/powershell)" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and there are no spaces in the script file (pythonpath)," timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and script file is activate" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershellCore)" time="0.001" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.sh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershell)" time="0.001" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.csh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.fish" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershell)" time="0" classname="Ensure terminal type is supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: gitbash)" time="0" classname="Ensure terminal type is supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: bash)" time="0" classname="Ensure terminal type is supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: zsh)" time="0" classname="Ensure terminal type is supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: ksh)" time="0" classname="Ensure terminal type is supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: fish)" time="0" classname="Ensure terminal type is supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: cshell)" time="0" classname="Ensure terminal type is supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: tshell)" time="0" classname="Ensure terminal type is supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: wsl)" time="0" classname="Ensure terminal type is supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: xonsh)" time="0" classname="Ensure terminal type is supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: other)" time="0" classname="Ensure terminal type is supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: powershell)" time="0" classname="Ensure terminal type is supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: gitbash)" time="0" classname="Ensure terminal type is supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: bash)" time="0" classname="Ensure terminal type is supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: zsh)" time="0" classname="Ensure terminal type is supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: ksh)" time="0" classname="Ensure terminal type is supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: fish)" time="0" classname="Ensure terminal type is supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: cshell)" time="0" classname="Ensure terminal type is supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: tshell)" time="0" classname="Ensure terminal type is supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: wsl)" time="0" classname="Ensure terminal type is supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: xonsh)" time="0" classname="Ensure terminal type is supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: other)" time="0" classname="Ensure terminal type is supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are supported by command prompt" time="0" classname="Ensure batch files are supported by command prompt">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on windows)" time="0" classname="Ensure batch files are not supported by powershell (on windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on windows)" time="0" classname="Ensure batch files are not supported by powershell core (on windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on non-windows)" time="0" classname="Ensure batch files are not supported by powershell (on non-windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on non-windows)" time="0.001" classname="Ensure batch files are not supported by powershell core (on non-windows)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are not supported by command prompt" time="0" classname="Ensure powershell files are not supported by command prompt">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are supported by powershell" time="0" classname="Ensure powershell files are supported by powershell">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are supported by powershell core" time="0" classname="Ensure powershell files are supported by powershell core">
    </testcase>
  </testsuite>
  <testsuite name="and there are spaces in the script file (pythonpath)," timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and script file is activate" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.sh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershellCore)" time="0.001" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.csh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: commandPrompt)" time="0.001" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: cshell)" time="0.001" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.fish" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: tshell)" time="0.001" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershell)" time="0" classname="Ensure terminal type is supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershellCore)" time="0.001" classname="Ensure terminal type is supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: gitbash)" time="0" classname="Ensure terminal type is supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: bash)" time="0" classname="Ensure terminal type is supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: zsh)" time="0" classname="Ensure terminal type is supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: ksh)" time="0" classname="Ensure terminal type is supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: fish)" time="0" classname="Ensure terminal type is supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: cshell)" time="0" classname="Ensure terminal type is supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: tshell)" time="0" classname="Ensure terminal type is supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: wsl)" time="0" classname="Ensure terminal type is supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: xonsh)" time="0" classname="Ensure terminal type is supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: other)" time="0" classname="Ensure terminal type is supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: powershell)" time="0.001" classname="Ensure terminal type is supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: gitbash)" time="0" classname="Ensure terminal type is supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: bash)" time="0.001" classname="Ensure terminal type is supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: zsh)" time="0" classname="Ensure terminal type is supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: ksh)" time="0" classname="Ensure terminal type is supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: fish)" time="0" classname="Ensure terminal type is supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: cshell)" time="0" classname="Ensure terminal type is supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: tshell)" time="0" classname="Ensure terminal type is supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: wsl)" time="0" classname="Ensure terminal type is supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: xonsh)" time="0" classname="Ensure terminal type is supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: other)" time="0" classname="Ensure terminal type is supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are supported by command prompt" time="0" classname="Ensure batch files are supported by command prompt">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on windows)" time="0" classname="Ensure batch files are not supported by powershell (on windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on windows)" time="0" classname="Ensure batch files are not supported by powershell core (on windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on non-windows)" time="0" classname="Ensure batch files are not supported by powershell (on non-windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on non-windows)" time="0" classname="Ensure batch files are not supported by powershell core (on non-windows)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are not supported by command prompt" time="0" classname="Ensure powershell files are not supported by command prompt">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are supported by powershell" time="0" classname="Ensure powershell files are supported by powershell">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are supported by powershell core" time="0" classname="Ensure powershell files are supported by powershell core">
    </testcase>
  </testsuite>
  <testsuite name="and there are spaces in the script file (pythonpath)," timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="and script file is activate" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: commandPrompt)" time="0.001" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.sh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.csh" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.fish" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershell)" time="0" classname="Ensure terminal type is not supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is not supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is not supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: gitbash)" time="0" classname="Ensure terminal type is not supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: bash)" time="0" classname="Ensure terminal type is not supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: zsh)" time="0" classname="Ensure terminal type is not supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: ksh)" time="0" classname="Ensure terminal type is not supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: fish)" time="0" classname="Ensure terminal type is not supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: cshell)" time="0" classname="Ensure terminal type is not supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: tshell)" time="0" classname="Ensure terminal type is not supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: wsl)" time="0" classname="Ensure terminal type is not supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: xonsh)" time="0" classname="Ensure terminal type is not supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: other)" time="0" classname="Ensure terminal type is not supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershell)" time="0" classname="Ensure terminal type is supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: gitbash)" time="0" classname="Ensure terminal type is supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: bash)" time="0.001" classname="Ensure terminal type is supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: zsh)" time="0" classname="Ensure terminal type is supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: ksh)" time="0" classname="Ensure terminal type is supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: fish)" time="0" classname="Ensure terminal type is supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: cshell)" time="0" classname="Ensure terminal type is supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: tshell)" time="0" classname="Ensure terminal type is supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: wsl)" time="0" classname="Ensure terminal type is supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: xonsh)" time="0" classname="Ensure terminal type is supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: other)" time="0" classname="Ensure terminal type is supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: powershell)" time="0" classname="Ensure terminal type is supported (Shell: powershell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: powershellCore)" time="0" classname="Ensure terminal type is supported (Shell: powershellCore)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: commandPrompt)" time="0" classname="Ensure terminal type is supported (Shell: commandPrompt)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: gitbash)" time="0" classname="Ensure terminal type is supported (Shell: gitbash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: bash)" time="0" classname="Ensure terminal type is supported (Shell: bash)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: zsh)" time="0" classname="Ensure terminal type is supported (Shell: zsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: ksh)" time="0" classname="Ensure terminal type is supported (Shell: ksh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: fish)" time="0" classname="Ensure terminal type is supported (Shell: fish)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: cshell)" time="0" classname="Ensure terminal type is supported (Shell: cshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: tshell)" time="0" classname="Ensure terminal type is supported (Shell: tshell)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: wsl)" time="0" classname="Ensure terminal type is supported (Shell: wsl)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: xonsh)" time="0" classname="Ensure terminal type is supported (Shell: xonsh)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure terminal type is supported (Shell: other)" time="0" classname="Ensure terminal type is supported (Shell: other)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is activate.bat" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are supported by command prompt" time="0.001" classname="Ensure batch files are supported by command prompt">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on windows)" time="0" classname="Ensure batch files are not supported by powershell (on windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on windows)" time="0" classname="Ensure batch files are not supported by powershell core (on windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on non-windows)" time="0.001" classname="Ensure batch files are not supported by powershell (on non-windows)">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on non-windows)" time="0" classname="Ensure batch files are not supported by powershell core (on non-windows)">
    </testcase>
  </testsuite>
  <testsuite name="and script file is Activate.ps1" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.commandPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are not supported by command prompt" time="0" classname="Ensure powershell files are not supported by command prompt">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are supported by powershell" time="0.001" classname="Ensure powershell files are supported by powershell">
    </testcase>
    <testcase name="Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is Activate.ps1 Ensure powershell files are supported by powershell core" time="0" classname="Ensure powershell files are supported by powershell core">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Environment Activation conda" timestamp="2021-11-08T22:03:03" tests="143" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.conda.unit.test.js" failures="0" time="0.01800000000000001">
    <testcase name="Terminal Environment Activation conda Conda activation for fish escapes spaces in conda filename" time="0.001" classname="Conda activation for fish escapes spaces in conda filename">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation on bash uses &quot;source&quot; before 4.4.0" time="0.001" classname="Conda activation on bash uses &quot;source&quot; before 4.4.0">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation on bash uses &quot;conda&quot; after 4.4.0" time="0" classname="Conda activation on bash uses &quot;conda&quot; after 4.4.0">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, with no spaces in env name" time="0" classname="Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, with no spaces in env name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, with no spaces in env name" time="0" classname="Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, with no spaces in env name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, with spaces in env name" time="0" classname="Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, with spaces in env name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, with spaces in env name" time="0" classname="Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, with spaces in env name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, and no env name" time="0" classname="Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, and no env name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, and no env name" time="0" classname="Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, and no env name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (windows)" time="0.001" classname="Conda activation command for shell powershell on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (linux)" time="0.001" classname="Conda activation command for shell powershell on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (mac)" time="0" classname="Conda activation command for shell powershell on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (windows)" time="0" classname="Conda activation command for shell powershellCore on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (linux)" time="0" classname="Conda activation command for shell powershellCore on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (mac)" time="0" classname="Conda activation command for shell powershellCore on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (windows)" time="0.001" classname="Conda activation command for shell commandPrompt on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (linux)" time="0" classname="Conda activation command for shell commandPrompt on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (mac)" time="0" classname="Conda activation command for shell commandPrompt on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (windows)" time="0" classname="Conda activation command for shell gitbash on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (linux)" time="0" classname="Conda activation command for shell gitbash on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (mac)" time="0" classname="Conda activation command for shell gitbash on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (windows)" time="0" classname="Conda activation command for shell bash on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (linux)" time="0.001" classname="Conda activation command for shell bash on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (mac)" time="0" classname="Conda activation command for shell bash on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (windows)" time="0" classname="Conda activation command for shell zsh on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (linux)" time="0" classname="Conda activation command for shell zsh on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (mac)" time="0" classname="Conda activation command for shell zsh on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (windows)" time="0.001" classname="Conda activation command for shell ksh on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (linux)" time="0" classname="Conda activation command for shell ksh on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (mac)" time="0" classname="Conda activation command for shell ksh on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (windows)" time="0" classname="Conda activation command for shell fish on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (linux)" time="0" classname="Conda activation command for shell fish on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (mac)" time="0" classname="Conda activation command for shell fish on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (windows)" time="0" classname="Conda activation command for shell cshell on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (linux)" time="0" classname="Conda activation command for shell cshell on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (mac)" time="0" classname="Conda activation command for shell cshell on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (windows)" time="0" classname="Conda activation command for shell tshell on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (linux)" time="0" classname="Conda activation command for shell tshell on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (mac)" time="0" classname="Conda activation command for shell tshell on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (windows)" time="0" classname="Conda activation command for shell wsl on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (linux)" time="0" classname="Conda activation command for shell wsl on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (mac)" time="0" classname="Conda activation command for shell wsl on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (windows)" time="0.001" classname="Conda activation command for shell xonsh on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (linux)" time="0" classname="Conda activation command for shell xonsh on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (mac)" time="0" classname="Conda activation command for shell xonsh on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (windows)" time="0" classname="Conda activation command for shell other on (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (linux)" time="0" classname="Conda activation command for shell other on (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (mac)" time="0" classname="Conda activation command for shell other on (mac)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell powershell on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell powershell on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell powershell on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell powershellCore on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell powershellCore on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell powershellCore on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell commandPrompt on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell commandPrompt on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (mac), containing spaces in environment name" time="0.001" classname="Conda activation command for shell commandPrompt on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell gitbash on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (linux), containing spaces in environment name" time="0.001" classname="Conda activation command for shell gitbash on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell gitbash on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell bash on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell bash on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell bash on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell zsh on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell zsh on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell zsh on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell ksh on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell ksh on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell ksh on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell fish on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell fish on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell fish on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell cshell on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (linux), containing spaces in environment name" time="0.001" classname="Conda activation command for shell cshell on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell cshell on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell tshell on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell tshell on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (mac), containing spaces in environment name" time="0.001" classname="Conda activation command for shell tshell on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell wsl on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell wsl on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell wsl on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell xonsh on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell xonsh on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (mac), containing spaces in environment name" time="0" classname="Conda activation command for shell xonsh on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (windows), containing spaces in environment name" time="0" classname="Conda activation command for shell other on (windows), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (linux), containing spaces in environment name" time="0" classname="Conda activation command for shell other on (linux), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (mac), containing spaces in environment name" time="0.001" classname="Conda activation command for shell other on (mac), containing spaces in environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (windows), containing no environment name" time="0" classname="Conda activation command for shell powershell on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (linux), containing no environment name" time="0" classname="Conda activation command for shell powershell on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershell on (mac), containing no environment name" time="0" classname="Conda activation command for shell powershell on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (windows), containing no environment name" time="0" classname="Conda activation command for shell powershellCore on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (linux), containing no environment name" time="0" classname="Conda activation command for shell powershellCore on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell powershellCore on (mac), containing no environment name" time="0" classname="Conda activation command for shell powershellCore on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (windows), containing no environment name" time="0" classname="Conda activation command for shell commandPrompt on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (linux), containing no environment name" time="0" classname="Conda activation command for shell commandPrompt on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell commandPrompt on (mac), containing no environment name" time="0" classname="Conda activation command for shell commandPrompt on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (windows), containing no environment name" time="0" classname="Conda activation command for shell gitbash on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (linux), containing no environment name" time="0" classname="Conda activation command for shell gitbash on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell gitbash on (mac), containing no environment name" time="0" classname="Conda activation command for shell gitbash on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (windows), containing no environment name" time="0" classname="Conda activation command for shell bash on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (linux), containing no environment name" time="0" classname="Conda activation command for shell bash on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell bash on (mac), containing no environment name" time="0" classname="Conda activation command for shell bash on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (windows), containing no environment name" time="0" classname="Conda activation command for shell zsh on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (linux), containing no environment name" time="0" classname="Conda activation command for shell zsh on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell zsh on (mac), containing no environment name" time="0" classname="Conda activation command for shell zsh on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (windows), containing no environment name" time="0" classname="Conda activation command for shell ksh on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (linux), containing no environment name" time="0" classname="Conda activation command for shell ksh on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell ksh on (mac), containing no environment name" time="0" classname="Conda activation command for shell ksh on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (windows), containing no environment name" time="0" classname="Conda activation command for shell fish on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (linux), containing no environment name" time="0" classname="Conda activation command for shell fish on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell fish on (mac), containing no environment name" time="0" classname="Conda activation command for shell fish on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (windows), containing no environment name" time="0" classname="Conda activation command for shell cshell on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (linux), containing no environment name" time="0" classname="Conda activation command for shell cshell on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell cshell on (mac), containing no environment name" time="0" classname="Conda activation command for shell cshell on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (windows), containing no environment name" time="0" classname="Conda activation command for shell tshell on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (linux), containing no environment name" time="0" classname="Conda activation command for shell tshell on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell tshell on (mac), containing no environment name" time="0" classname="Conda activation command for shell tshell on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (windows), containing no environment name" time="0" classname="Conda activation command for shell wsl on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (linux), containing no environment name" time="0" classname="Conda activation command for shell wsl on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell wsl on (mac), containing no environment name" time="0" classname="Conda activation command for shell wsl on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (windows), containing no environment name" time="0" classname="Conda activation command for shell xonsh on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (linux), containing no environment name" time="0" classname="Conda activation command for shell xonsh on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell xonsh on (mac), containing no environment name" time="0.001" classname="Conda activation command for shell xonsh on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (windows), containing no environment name" time="0" classname="Conda activation command for shell other on (windows), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (linux), containing no environment name" time="0.001" classname="Conda activation command for shell other on (linux), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda Conda activation command for shell other on (mac), containing no environment name" time="0" classname="Conda activation command for shell other on (mac), containing no environment name">
    </testcase>
    <testcase name="Terminal Environment Activation conda If environment is a conda environment, ensure conda activation command is sent (windows)" time="0.001" classname="If environment is a conda environment, ensure conda activation command is sent (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda If environment is a conda environment, ensure conda activation command is sent (linux)" time="0.001" classname="If environment is a conda environment, ensure conda activation command is sent (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda If environment is a conda environment, ensure conda activation command is sent (osx)" time="0" classname="If environment is a conda environment, ensure conda activation command is sent (osx)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Get activation script command if environment is not a conda environment" time="0" classname="Get activation script command if environment is not a conda environment">
    </testcase>
    <testcase name="Terminal Environment Activation conda If environment is a conda environment and environment detection fails, ensure activatino of script is sent (windows)" time="0" classname="If environment is a conda environment and environment detection fails, ensure activatino of script is sent (windows)">
    </testcase>
    <testcase name="Terminal Environment Activation conda If environment is a conda environment and environment detection fails, ensure activatino of script is sent (osx)" time="0" classname="If environment is a conda environment and environment detection fails, ensure activatino of script is sent (osx)">
    </testcase>
    <testcase name="Terminal Environment Activation conda If environment is a conda environment and environment detection fails, ensure activatino of script is sent (linux)" time="0.001" classname="If environment is a conda environment and environment detection fails, ensure activatino of script is sent (linux)">
    </testcase>
    <testcase name="Terminal Environment Activation conda Return undefined if unable to get activation command" time="0" classname="Return undefined if unable to get activation command">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path on windows for powershell" time="0" classname="Activation uses full path on windows for powershell">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path with spaces on windows for powershell" time="0" classname="Activation uses full path with spaces on windows for powershell">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path on windows under powershell, environment name has spaces" time="0" classname="Activation uses full path on windows under powershell, environment name has spaces">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path on windows for powershell-core" time="0" classname="Activation uses full path on windows for powershell-core">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path with spaces on windows for powershell-core" time="0" classname="Activation uses full path with spaces on windows for powershell-core">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path on windows for powershell-core, environment name has spaces" time="0" classname="Activation uses full path on windows for powershell-core, environment name has spaces">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path on windows for cmd.exe" time="0" classname="Activation uses full path on windows for cmd.exe">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path with spaces on windows for cmd.exe" time="0" classname="Activation uses full path with spaces on windows for cmd.exe">
    </testcase>
    <testcase name="Terminal Environment Activation conda Activation uses full path on windows for cmd.exe, environment name has spaces" time="0" classname="Activation uses full path on windows for cmd.exe, environment name has spaces">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Auto Activation" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activation.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Auto Activation New Terminals should be activated" time="0.001" classname="New Terminals should be activated">
    </testcase>
    <testcase name="Terminal Auto Activation New Terminals should not be activated if hidden from user" time="0" classname="New Terminals should not be activated if hidden from user">
    </testcase>
    <testcase name="Terminal Auto Activation New Terminals should not be activated if auto activation is to be disabled" time="0" classname="New Terminals should not be activated if auto activation is to be disabled">
    </testcase>
    <testcase name="Terminal Auto Activation New Terminals should be activated with resource of single workspace" time="0.001" classname="New Terminals should be activated with resource of single workspace">
    </testcase>
    <testcase name="Terminal Auto Activation New Terminals should be activated with resource of main workspace" time="0" classname="New Terminals should be activated with resource of main workspace">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Base Activator" timestamp="2021-11-08T22:03:03" tests="12" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/base.unit.test.js" failures="0" time="0.005">
    <testcase name="Terminal Base Activator Terminal is activated (1 activation command, and preserve focus in terminal is false)" time="0.001" classname="Terminal is activated (1 activation command, and preserve focus in terminal is false)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is false)" time="0" classname="Terminal is activated only once (1 activation command, and preserve focus in terminal is false)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is false) (even when not waiting)" time="0.001" classname="Terminal is activated only once (1 activation command, and preserve focus in terminal is false) (even when not waiting)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated (2 activation command, and preserve focus in terminal is false)" time="0" classname="Terminal is activated (2 activation command, and preserve focus in terminal is false)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (2 activation command, and preserve focus in terminal is false)" time="0.001" classname="Terminal is activated only once (2 activation command, and preserve focus in terminal is false)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (2 activation command, and preserve focus in terminal is false) (even when not waiting)" time="0" classname="Terminal is activated only once (2 activation command, and preserve focus in terminal is false) (even when not waiting)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated (1 activation command, and preserve focus in terminal is true)" time="0" classname="Terminal is activated (1 activation command, and preserve focus in terminal is true)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true)" time="0.001" classname="Terminal is activated only once (1 activation command, and preserve focus in terminal is true)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true) (even when not waiting)" time="0" classname="Terminal is activated only once (1 activation command, and preserve focus in terminal is true) (even when not waiting)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated (1 activation command, and preserve focus in terminal is true)" time="0" classname="Terminal is activated (1 activation command, and preserve focus in terminal is true)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true)" time="0.001" classname="Terminal is activated only once (1 activation command, and preserve focus in terminal is true)">
    </testcase>
    <testcase name="Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true) (even when not waiting)" time="0" classname="Terminal is activated only once (1 activation command, and preserve focus in terminal is true) (even when not waiting)">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activator" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/index.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Activator Terminal is activated and handlers are invoked" time="0.001" classname="Terminal is activated and handlers are invoked">
    </testcase>
    <testcase name="Terminal Activator Terminal is not activated if auto-activate setting is set to true but terminal is hidden" time="0" classname="Terminal is not activated if auto-activate setting is set to true but terminal is hidden">
    </testcase>
    <testcase name="Terminal Activator Terminal is not activated and handlers are invoked" time="0.001" classname="Terminal is not activated and handlers are invoked">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation Powershell Failed Handler" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="OS is Windows" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Shell is powershell" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can activate with Command Prompt Terminal Activation is has failed Diagnostic must be handled" time="0" classname="Diagnostic must be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is powershellCore" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can activate with Command Prompt Terminal Activation is has failed Diagnostic must be handled" time="0.001" classname="Diagnostic must be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is commandPrompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is gitbash" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is bash" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is zsh" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is ksh" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is fish" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is cshell" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is tshell" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is wsl" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is xonsh" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is other" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="OS is Non-Widows" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Shell is powershell" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is powershellCore" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is commandPrompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is gitbash" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is bash" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is zsh" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is ksh" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is fish" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0.001" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is cshell" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is tshell" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is wsl" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is xonsh" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Shell is other" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Can&apos;t activate with Command Prompt" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Activation is successful" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Activation is has failed" timestamp="2021-11-08T22:03:03" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/activator/powerShellFailedHandler.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled" time="0" classname="Diagnostic must not be handled">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Command Prompt" timestamp="2021-11-08T22:03:03" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/commandPrompt.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Command Prompt Getting Path Command Prompt executable (32 on 64Win)" time="0" classname="Getting Path Command Prompt executable (32 on 64Win)">
    </testcase>
    <testcase name="Terminal Command Prompt Getting Path Command Prompt executable (not 32 on 64Win)" time="0" classname="Getting Path Command Prompt executable (not 32 on 64Win)">
    </testcase>
    <testcase name="Terminal Command Prompt Use command prompt as default shell" time="0" classname="Use command prompt as default shell">
    </testcase>
  </testsuite>
  <testsuite name="Terminals Activation - Pipenv" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/environmentActivationProviders/pipEnvActivationProvider.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Without a resource" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/environmentActivationProviders/pipEnvActivationProvider.unit.test.js" failures="0" time="0">
    <testcase name="Terminals Activation - Pipenv Without a resource No commands for no interpreter" time="0" classname="No commands for no interpreter">
    </testcase>
    <testcase name="Terminals Activation - Pipenv Without a resource No commands for an interpreter that is not Pipenv" time="0" classname="No commands for an interpreter that is not Pipenv">
    </testcase>
    <testcase name="Terminals Activation - Pipenv Without a resource pipenv shell is returned for pipenv interpeter" time="0" classname="pipenv shell is returned for pipenv interpeter">
    </testcase>
    <testcase name="Terminals Activation - Pipenv Without a resource pipenv is properly escaped" time="0" classname="pipenv is properly escaped">
    </testcase>
  </testsuite>
  <testsuite name="With a resource" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/environmentActivationProviders/pipEnvActivationProvider.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminals Activation - Pipenv With a resource No commands for no interpreter" time="0" classname="No commands for no interpreter">
    </testcase>
    <testcase name="Terminals Activation - Pipenv With a resource No commands for an interpreter that is not Pipenv" time="0.001" classname="No commands for an interpreter that is not Pipenv">
    </testcase>
    <testcase name="Terminals Activation - Pipenv With a resource pipenv shell is returned for pipenv interpeter" time="0" classname="pipenv shell is returned for pipenv interpeter">
    </testcase>
    <testcase name="Terminals Activation - Pipenv With a resource pipenv is properly escaped" time="0" classname="pipenv is properly escaped">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Service Factory" timestamp="2021-11-08T22:03:03" tests="4" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/factory.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal Service Factory Ensure same instance of terminal service is returned" time="0" classname="Ensure same instance of terminal service is returned">
    </testcase>
    <testcase name="Terminal Service Factory Ensure different instance of terminal service is returned when title is provided" time="0" classname="Ensure different instance of terminal service is returned when title is provided">
    </testcase>
    <testcase name="Terminal Service Factory Ensure different instance of terminal services are created" time="0.001" classname="Ensure different instance of terminal services are created">
    </testcase>
    <testcase name="Terminal Service Factory Ensure same terminal is returned when using resources from the same workspace" time="0.001" classname="Ensure same terminal is returned when using resources from the same workspace">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Service helpers" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/helper.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Misc" timestamp="2021-11-08T22:03:03" tests="6" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/helper.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Service helpers Misc Create terminal without a title" time="0" classname="Create terminal without a title">
    </testcase>
    <testcase name="Terminal Service helpers Misc Create terminal with a title" time="0.001" classname="Create terminal with a title">
    </testcase>
    <testcase name="Terminal Service helpers Misc Ensure spaces in command is quoted" time="0" classname="Ensure spaces in command is quoted">
    </testcase>
    <testcase name="Terminal Service helpers Misc Ensure spaces in args are quoted" time="0" classname="Ensure spaces in args are quoted">
    </testcase>
    <testcase name="Terminal Service helpers Misc Ensure empty args are ignored" time="0" classname="Ensure empty args are ignored">
    </testcase>
    <testcase name="Terminal Service helpers Misc Ensure empty args are ignored with s in command" time="0" classname="Ensure empty args are ignored with s in command">
    </testcase>
  </testsuite>
  <testsuite name="Activation" timestamp="2021-11-08T22:03:03" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/helper.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Without a resource" timestamp="2021-11-08T22:03:03" tests="14" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/helper.unit.test.js" failures="0" time="0.003">
    <testcase name="Terminal Service helpers Activation Without a resource Activation command must return conda activation command if interpreter is conda" time="0" classname="Activation command must return conda activation command if interpreter is conda">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command must return undefined if none of the proivders support the shell" time="0.001" classname="Activation command must return undefined if none of the proivders support the shell">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command must return command from bash if that is supported and others are not" time="0" classname="Activation command must return command from bash if that is supported and others are not">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command must return command from pipenv if that is supported and even if others are supported" time="0" classname="Activation command must return command from pipenv if that is supported and even if others are supported">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command must return command from Command Prompt if that is supported and others are not" time="0" classname="Activation command must return command from Command Prompt if that is supported and others are not">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command must return command from Command Prompt if that is supported, and so is bash but no commands are returned" time="0.001" classname="Activation command must return command from Command Prompt if that is supported, and so is bash but no commands are returned">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must be empty for unknown os" time="0" classname="Activation command for Shell must be empty for unknown os">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must be empty for unknown os" time="0" classname="Activation command for Shell must be empty for unknown os">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Linux)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Linux)">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (OSX)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (OSX)">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Windows)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Windows)">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Linux)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Linux)">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (OSX)" time="0.001" classname="Activation command for Shell must never use pipenv nor pyenv (OSX)">
    </testcase>
    <testcase name="Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Windows)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Windows)">
    </testcase>
  </testsuite>
  <testsuite name="With a resource" timestamp="2021-11-08T22:03:03" tests="14" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/helper.unit.test.js" failures="0" time="0.003">
    <testcase name="Terminal Service helpers Activation With a resource Activation command must return conda activation command if interpreter is conda" time="0" classname="Activation command must return conda activation command if interpreter is conda">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command must return undefined if none of the proivders support the shell" time="0.001" classname="Activation command must return undefined if none of the proivders support the shell">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command must return command from bash if that is supported and others are not" time="0" classname="Activation command must return command from bash if that is supported and others are not">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command must return command from pipenv if that is supported and even if others are supported" time="0" classname="Activation command must return command from pipenv if that is supported and even if others are supported">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command must return command from Command Prompt if that is supported and others are not" time="0" classname="Activation command must return command from Command Prompt if that is supported and others are not">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command must return command from Command Prompt if that is supported, and so is bash but no commands are returned" time="0.001" classname="Activation command must return command from Command Prompt if that is supported, and so is bash but no commands are returned">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must be empty for unknown os" time="0" classname="Activation command for Shell must be empty for unknown os">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must be empty for unknown os" time="0" classname="Activation command for Shell must be empty for unknown os">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Linux)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Linux)">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (OSX)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (OSX)">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Windows)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Windows)">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Linux)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (Linux)">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (OSX)" time="0" classname="Activation command for Shell must never use pipenv nor pyenv (OSX)">
    </testcase>
    <testcase name="Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Windows)" time="0.001" classname="Activation command for Shell must never use pipenv nor pyenv (Windows)">
    </testcase>
  </testsuite>
  <testsuite name="Identify Terminal Shell" timestamp="2021-11-08T22:03:03" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/helper.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Service helpers Identify Terminal Shell Use shell detector to identify terminal shells" time="0" classname="Use shell detector to identify terminal shells">
    </testcase>
    <testcase name="Terminal Service helpers Identify Terminal Shell Detector passed throught constructor is used by shell detector class" time="0" classname="Detector passed throught constructor is used by shell detector class">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Environment Activation pyenv" timestamp="2021-11-08T22:03:03" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/pyenvActivationProvider.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Environment Activation pyenv All shells should be supported" time="0" classname="All shells should be supported">
    </testcase>
    <testcase name="Terminal Environment Activation pyenv Ensure no activation commands are returned if intrepreter info is not found" time="0" classname="Ensure no activation commands are returned if intrepreter info is not found">
    </testcase>
    <testcase name="Terminal Environment Activation pyenv Ensure no activation commands are returned if intrepreter is not pyenv" time="0.001" classname="Ensure no activation commands are returned if intrepreter is not pyenv">
    </testcase>
    <testcase name="Terminal Environment Activation pyenv Ensure no activation commands are returned if intrepreter envName is empty" time="0" classname="Ensure no activation commands are returned if intrepreter envName is empty">
    </testcase>
    <testcase name="Terminal Environment Activation pyenv Ensure activation command is returned" time="0" classname="Ensure activation command is returned">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Service" timestamp="2021-11-08T22:03:03" tests="11" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/service.unit.test.js" failures="0" time="1.118">
    <testcase name="Terminal Service Ensure terminal is disposed" time="0.101" classname="Ensure terminal is disposed">
    </testcase>
    <testcase name="Terminal Service Ensure command is sent to terminal and it is shown" time="0.101" classname="Ensure command is sent to terminal and it is shown">
    </testcase>
    <testcase name="Terminal Service Ensure text is sent to terminal and it is shown" time="0.101" classname="Ensure text is sent to terminal and it is shown">
    </testcase>
    <testcase name="Terminal Service Ensure terminal is not shown if `hideFromUser` option is set to `true`" time="0.102" classname="Ensure terminal is not shown if `hideFromUser` option is set to `true`">
    </testcase>
    <testcase name="Terminal Service Ensure terminal shown otherwise" time="0.102" classname="Ensure terminal shown otherwise">
    </testcase>
    <testcase name="Terminal Service Ensure terminal shown and focus is set to the Terminal" time="0.102" classname="Ensure terminal shown and focus is set to the Terminal">
    </testcase>
    <testcase name="Terminal Service Ensure terminal is activated once after creation" time="0.102" classname="Ensure terminal is activated once after creation">
    </testcase>
    <testcase name="Terminal Service Ensure terminal is activated once before sending text" time="0.101" classname="Ensure terminal is activated once before sending text">
    </testcase>
    <testcase name="Terminal Service Ensure close event is not fired when another terminal is closed" time="0.101" classname="Ensure close event is not fired when another terminal is closed">
    </testcase>
    <testcase name="Terminal Service Ensure close event is not fired when terminal is closed" time="0.103" classname="Ensure close event is not fired when terminal is closed">
    </testcase>
    <testcase name="Terminal Service Ensure to disable auto activation and right interpreter is activated" time="0.102" classname="Ensure to disable auto activation and right interpreter is activated">
    </testcase>
  </testsuite>
  <testsuite name="Common Terminal Service Registry" timestamp="2021-11-08T22:03:04" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Common Terminal Service Registry Ensure services are registered" time="0" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="Shell Detector" timestamp="2021-11-08T22:03:04" tests="32" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/shellDetector.unit.test.js" failures="0" time="0.006">
    <testcase name="Shell Detector Test identification of Terminal Shells in order of priority" time="0.001" classname="Test identification of Terminal Shells in order of priority">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (OS Unknown)" time="0" classname="Use default shell based on OS if there are no shell detectors (OS Unknown)">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Unknown)" time="0" classname="Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Unknown)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (OS Unknown)" time="0" classname="Use shell provided by detector (OS Unknown)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (when a terminal is provided) (OS Unknown)" time="0" classname="Use shell provided by detector (when a terminal is provided) (OS Unknown)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector with highest priority (OS Unknown)" time="0.001" classname="Use shell provided by detector with highest priority (OS Unknown)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS Unknown)" time="0" classname="Fall back to detectors that can identify a shell (OS Unknown)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS Unknown) (even if detected shell is other)" time="0.001" classname="Fall back to detectors that can identify a shell (OS Unknown) (even if detected shell is other)">
    </testcase>
    <testcase name="Shell Detector Test identification of Terminal Shells in order of priority" time="0.001" classname="Test identification of Terminal Shells in order of priority">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (OS Windows)" time="0" classname="Use default shell based on OS if there are no shell detectors (OS Windows)">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Windows)" time="0" classname="Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Windows)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (OS Windows)" time="0" classname="Use shell provided by detector (OS Windows)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (when a terminal is provided) (OS Windows)" time="0" classname="Use shell provided by detector (when a terminal is provided) (OS Windows)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector with highest priority (OS Windows)" time="0" classname="Use shell provided by detector with highest priority (OS Windows)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS Windows)" time="0" classname="Fall back to detectors that can identify a shell (OS Windows)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS Windows) (even if detected shell is other)" time="0.001" classname="Fall back to detectors that can identify a shell (OS Windows) (even if detected shell is other)">
    </testcase>
    <testcase name="Shell Detector Test identification of Terminal Shells in order of priority" time="0.001" classname="Test identification of Terminal Shells in order of priority">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (OS OSX)" time="0" classname="Use default shell based on OS if there are no shell detectors (OS OSX)">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS OSX)" time="0" classname="Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS OSX)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (OS OSX)" time="0" classname="Use shell provided by detector (OS OSX)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (when a terminal is provided) (OS OSX)" time="0" classname="Use shell provided by detector (when a terminal is provided) (OS OSX)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector with highest priority (OS OSX)" time="0" classname="Use shell provided by detector with highest priority (OS OSX)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS OSX)" time="0" classname="Fall back to detectors that can identify a shell (OS OSX)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS OSX) (even if detected shell is other)" time="0" classname="Fall back to detectors that can identify a shell (OS OSX) (even if detected shell is other)">
    </testcase>
    <testcase name="Shell Detector Test identification of Terminal Shells in order of priority" time="0" classname="Test identification of Terminal Shells in order of priority">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (OS Linux)" time="0" classname="Use default shell based on OS if there are no shell detectors (OS Linux)">
    </testcase>
    <testcase name="Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Linux)" time="0" classname="Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Linux)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (OS Linux)" time="0" classname="Use shell provided by detector (OS Linux)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector (when a terminal is provided) (OS Linux)" time="0" classname="Use shell provided by detector (when a terminal is provided) (OS Linux)">
    </testcase>
    <testcase name="Shell Detector Use shell provided by detector with highest priority (OS Linux)" time="0" classname="Use shell provided by detector with highest priority (OS Linux)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS Linux)" time="0" classname="Fall back to detectors that can identify a shell (OS Linux)">
    </testcase>
    <testcase name="Shell Detector Fall back to detectors that can identify a shell (OS Linux) (even if detected shell is other)" time="0" classname="Fall back to detectors that can identify a shell (OS Linux) (even if detected shell is other)">
    </testcase>
  </testsuite>
  <testsuite name="Shell Detectors" timestamp="2021-11-08T22:03:04" tests="21" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/shellDetectors/shellDetectors.unit.test.js" failures="0" time="0.004">
    <testcase name="Shell Detectors Test Priority of detectors" time="0" classname="Test Priority of detectors">
    </testcase>
    <testcase name="Shell Detectors Test identification of Terminal Shells (base class method)" time="0.001" classname="Test identification of Terminal Shells (base class method)">
    </testcase>
    <testcase name="Shell Detectors Identify shell based on name of terminal" time="0" classname="Identify shell based on name of terminal">
    </testcase>
    <testcase name="Shell Detectors Identify shell based on custom VSC shell path" time="0.001" classname="Identify shell based on custom VSC shell path">
    </testcase>
    <testcase name="Shell Detectors Identify shell based on VSC API" time="0" classname="Identify shell based on VSC API">
    </testcase>
    <testcase name="Shell Detectors Identify shell based on VSC Settings" time="0" classname="Identify shell based on VSC Settings">
    </testcase>
    <testcase name="Shell Detectors Get shell path from settings (OS Unknown)" time="0" classname="Get shell path from settings (OS Unknown)">
    </testcase>
    <testcase name="Shell Detectors Get shell path from settings (OS Windows)" time="0" classname="Get shell path from settings (OS Windows)">
    </testcase>
    <testcase name="Shell Detectors Get shell path from settings (OS OSX)" time="0" classname="Get shell path from settings (OS OSX)">
    </testcase>
    <testcase name="Shell Detectors Get shell path from settings (OS Linux)" time="0" classname="Get shell path from settings (OS Linux)">
    </testcase>
    <testcase name="Shell Detectors Identify shell based on user environment variables" time="0" classname="Identify shell based on user environment variables">
    </testcase>
    <testcase name="Shell Detectors Default shell on Windows &lt; 10 is cmd.exe" time="0.001" classname="Default shell on Windows &lt; 10 is cmd.exe">
    </testcase>
    <testcase name="Shell Detectors Default shell on Windows &gt;= 10 32bit is powershell.exe" time="0" classname="Default shell on Windows &gt;= 10 32bit is powershell.exe">
    </testcase>
    <testcase name="Shell Detectors Default shell on Windows &gt;= 10 64bit is powershell.exe" time="0.001" classname="Default shell on Windows &gt;= 10 64bit is powershell.exe">
    </testcase>
    <testcase name="Shell Detectors Default shell on Windows &lt; 10 is what ever is defined in env.comspec" time="0" classname="Default shell on Windows &lt; 10 is what ever is defined in env.comspec">
    </testcase>
    <testcase name="Shell Detectors Default shell on OSX is /bin/bash" time="0" classname="Default shell on OSX is /bin/bash">
    </testcase>
    <testcase name="Shell Detectors Default shell on OSX is what ever is in env.SHELL" time="0" classname="Default shell on OSX is what ever is in env.SHELL">
    </testcase>
    <testcase name="Shell Detectors Default shell on OSX is what ever is /bin/bash if env.SHELL == /bin/false" time="0" classname="Default shell on OSX is what ever is /bin/bash if env.SHELL == /bin/false">
    </testcase>
    <testcase name="Shell Detectors Default shell on Linux is /bin/bash" time="0" classname="Default shell on Linux is /bin/bash">
    </testcase>
    <testcase name="Shell Detectors Default shell on Linux is what ever is in env.SHELL" time="0" classname="Default shell on Linux is what ever is in env.SHELL">
    </testcase>
    <testcase name="Shell Detectors Default shell on Linux is what ever is /bin/bash if env.SHELL == /bin/false" time="0" classname="Default shell on Linux is what ever is /bin/bash if env.SHELL == /bin/false">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Service (synchronous)" timestamp="2021-11-08T22:03:04" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/synchronousTerminalService.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService" timestamp="2021-11-08T22:03:04" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/synchronousTerminalService.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService Show should invoke show in terminal" time="0" classname="Show should invoke show in terminal">
    </testcase>
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService Show should invoke show in terminal (without chaning focus)" time="0" classname="Show should invoke show in terminal (without chaning focus)">
    </testcase>
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService Show should invoke show in terminal (without chaning focus)" time="0" classname="Show should invoke show in terminal (without chaning focus)">
    </testcase>
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService Show should invoke show in terminal (without chaning focus)" time="0" classname="Show should invoke show in terminal (without chaning focus)">
    </testcase>
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService Dispose should dipose the wrapped TerminalService" time="0" classname="Dispose should dipose the wrapped TerminalService">
    </testcase>
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService sendText should invokeSendText in wrapped TerminalService" time="0" classname="sendText should invokeSendText in wrapped TerminalService">
    </testcase>
    <testcase name="Terminal Service (synchronous) Show, sendText and dispose should invoke corresponding methods in wrapped TerminalService sendText should invokeSendText in wrapped TerminalService (errors should be bubbled up)" time="0" classname="sendText should invokeSendText in wrapped TerminalService (errors should be bubbled up)">
    </testcase>
  </testsuite>
  <testsuite name="sendCommand" timestamp="2021-11-08T22:03:04" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/terminals/synchronousTerminalService.unit.test.js" failures="0" time="1.005">
    <testcase name="Terminal Service (synchronous) sendCommand run sendCommand in terminalService if there is no cancellation token" time="0.001" classname="run sendCommand in terminalService if there is no cancellation token">
    </testcase>
    <testcase name="Terminal Service (synchronous) sendCommand run sendCommand in terminalService should be cancelled" time="0.501" classname="run sendCommand in terminalService should be cancelled">
    </testcase>
    <testcase name="Terminal Service (synchronous) sendCommand run sendCommand in terminalService should complete when command completes" time="0.503" classname="run sendCommand in terminalService should complete when command completes">
    </testcase>
  </testsuite>
  <testsuite name="Deferred" timestamp="2021-11-08T22:03:05" tests="2" file="/home/don/development/vsc/vscode-python/out/test/common/utils/async.unit.test.js" failures="0" time="0">
    <testcase name="Deferred Resolve" time="0" classname="Resolve">
    </testcase>
    <testcase name="Deferred Reject" time="0" classname="Reject">
    </testcase>
  </testsuite>
  <testsuite name="chain async iterators" timestamp="2021-11-08T22:03:05" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/utils/async.unit.test.js" failures="0" time="0.002">
    <testcase name="chain async iterators no iterators" time="0" classname="no iterators">
    </testcase>
    <testcase name="chain async iterators one iterator, one item" time="0" classname="one iterator, one item">
    </testcase>
    <testcase name="chain async iterators one iterator, many items" time="0" classname="one iterator, many items">
    </testcase>
    <testcase name="chain async iterators one iterator, no items" time="0" classname="one iterator, no items">
    </testcase>
    <testcase name="chain async iterators many iterators, one item each" time="0" classname="many iterators, one item each">
    </testcase>
    <testcase name="chain async iterators many iterators, many items each" time="0" classname="many iterators, many items each">
    </testcase>
    <testcase name="chain async iterators many iterators, one empty" time="0.001" classname="many iterators, one empty">
    </testcase>
    <testcase name="chain async iterators Results are yielded as soon as ready, regardless of source iterator." time="0" classname="Results are yielded as soon as ready, regardless of source iterator.">
    </testcase>
    <testcase name="chain async iterators A failed iterator does not block the others, with onError." time="0" classname="A failed iterator does not block the others, with onError.">
    </testcase>
    <testcase name="chain async iterators A failed iterator does not block the others, without onError." time="0" classname="A failed iterator does not block the others, without onError.">
    </testcase>
    <testcase name="chain async iterators A failed iterator does not block the others, if throwing before yielding." time="0.001" classname="A failed iterator does not block the others, if throwing before yielding.">
    </testcase>
    <testcase name="chain async iterators int results" time="0" classname="int results">
    </testcase>
    <testcase name="chain async iterators object results" time="0" classname="object results">
    </testcase>
  </testsuite>
  <testsuite name="Common Utils - CacheUtils" timestamp="2021-11-08T22:03:05" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/utils/cacheUtils.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="InMemory Cache" timestamp="2021-11-08T22:03:05" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/utils/cacheUtils.unit.test.js" failures="0" time="0.001">
    <testcase name="Common Utils - CacheUtils InMemory Cache Cached item should exist" time="0" classname="Cached item should exist">
    </testcase>
    <testcase name="Common Utils - CacheUtils InMemory Cache Cached item can be updated and should exist" time="0" classname="Cached item can be updated and should exist">
    </testcase>
    <testcase name="Common Utils - CacheUtils InMemory Cache Cached item should not exist after time expires" time="0.001" classname="Cached item should not exist after time expires">
    </testcase>
  </testsuite>
  <testsuite name="Common Utils - Decorators" timestamp="2021-11-08T22:03:05" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/utils/decorators.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Cache Decorator" timestamp="2021-11-08T22:03:05" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/utils/decorators.unit.test.js" failures="0" time="2.002">
    <testcase name="Common Utils - Decorators Cache Decorator Result should be cached for 1s" time="2.002" classname="Result should be cached for 1s">
    </testcase>
  </testsuite>
  <testsuite name="Debounce" timestamp="2021-11-08T22:03:07" tests="9" file="/home/don/development/vsc/vscode-python/out/test/common/utils/decorators.unit.test.js" failures="0" time="1.1179999999999999">
    <testcase name="Common Utils - Decorators Debounce Debounce: one sync call" time="0.104" classname="Debounce: one sync call">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: one async call &amp; no wait" time="0.102" classname="Debounce: one async call &amp; no wait">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: one async call" time="0.101" classname="Debounce: one async call">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: one async call and ensure exceptions are re-thrown" time="0.101" classname="Debounce: one async call and ensure exceptions are re-thrown">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: multiple async calls" time="0.102" classname="Debounce: multiple async calls">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: multiple async calls when awaiting on all" time="0.101" classname="Debounce: multiple async calls when awaiting on all">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: multiple async calls &amp; wait on some" time="0.202" classname="Debounce: multiple async calls &amp; wait on some">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: multiple calls grouped" time="0.103" classname="Debounce: multiple calls grouped">
    </testcase>
    <testcase name="Common Utils - Decorators Debounce Debounce: multiple calls spread" time="0.202" classname="Debounce: multiple calls spread">
    </testcase>
  </testsuite>
  <testsuite name="Utils for regular expressions - verboseRegExp()" timestamp="2021-11-08T22:03:08" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/utils/regexp.unit.test.js" failures="0" time="0.001">
    <testcase name="Utils for regular expressions - verboseRegExp() whitespace removed in multiline pattern (example of typical usage)" time="0" classname="whitespace removed in multiline pattern (example of typical usage)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() whitespace removed (&quot;spam eggs&quot;)" time="0" classname="whitespace removed (&quot;spam eggs&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() whitespace removed (&quot;spam
          eggs&quot;)" time="0" classname="whitespace removed (&quot;spam
          eggs&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() whitespace removed (&quot;  &quot;)" time="0.001" classname="whitespace removed (&quot;  &quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() whitespace removed (&quot;
         &quot;)" time="0" classname="whitespace removed (&quot;
         &quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() pattern not changed (&quot;^(?:spam\b.*)$&quot;)" time="0" classname="pattern not changed (&quot;^(?:spam\b.*)$&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() pattern not changed (&quot;spam&quot;)" time="0" classname="pattern not changed (&quot;spam&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() pattern not changed (&quot;^spam$&quot;)" time="0" classname="pattern not changed (&quot;^spam$&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() pattern not changed (&quot;spam$&quot;)" time="0" classname="pattern not changed (&quot;spam$&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() pattern not changed (&quot;^spam&quot;)" time="0" classname="pattern not changed (&quot;^spam&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() no pattern (&quot;&quot;)" time="0" classname="no pattern (&quot;&quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() no pattern (&quot;
        &quot;)" time="0" classname="no pattern (&quot;
        &quot;)">
    </testcase>
    <testcase name="Utils for regular expressions - verboseRegExp() no pattern (&quot;  &quot;)" time="0" classname="no pattern (&quot;  &quot;)">
    </testcase>
  </testsuite>
  <testsuite name="parseRange()" timestamp="2021-11-08T22:03:08" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/utils/text.unit.test.js" failures="0" time="0.002">
    <testcase name="parseRange() valid strings" time="0.001" classname="valid strings">
    </testcase>
    <testcase name="parseRange() valid numbers" time="0" classname="valid numbers">
    </testcase>
    <testcase name="parseRange() bad strings" time="0.001" classname="bad strings">
    </testcase>
  </testsuite>
  <testsuite name="parsePosition()" timestamp="2021-11-08T22:03:08" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/utils/text.unit.test.js" failures="0" time="0.001">
    <testcase name="parsePosition() valid strings" time="0" classname="valid strings">
    </testcase>
    <testcase name="parsePosition() valid numbers" time="0" classname="valid numbers">
    </testcase>
    <testcase name="parsePosition() bad strings" time="0.001" classname="bad strings">
    </testcase>
  </testsuite>
  <testsuite name="common utils - getVersionString" timestamp="2021-11-08T22:03:08" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
    <testcase name="common utils - getVersionString 2.7.0" time="0" classname="2.7.0">
    </testcase>
    <testcase name="common utils - getVersionString 2.7" time="0" classname="2.7">
    </testcase>
    <testcase name="common utils - getVersionString 2" time="0" classname="2">
    </testcase>
    <testcase name="common utils - getVersionString " time="0" classname="">
    </testcase>
    <testcase name="common utils - getVersionString 2.7.11" time="0" classname="2.7.11">
    </testcase>
    <testcase name="common utils - getVersionString 3.11.1" time="0" classname="3.11.1">
    </testcase>
    <testcase name="common utils - getVersionString 0.0.0" time="0" classname="0.0.0">
    </testcase>
  </testsuite>
  <testsuite name="common utils - isVersionEmpty" timestamp="2021-11-08T22:03:08" tests="13" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0.001">
    <testcase name="common utils - isVersionEmpty empty: [object Object]" time="0" classname="empty: [object Object]">
    </testcase>
    <testcase name="common utils - isVersionEmpty empty: [object Object]" time="0" classname="empty: [object Object]">
    </testcase>
    <testcase name="common utils - isVersionEmpty empty: [object Object]" time="0" classname="empty: [object Object]">
    </testcase>
    <testcase name="common utils - isVersionEmpty not empty: 3.4.5" time="0" classname="not empty: 3.4.5">
    </testcase>
    <testcase name="common utils - isVersionEmpty not empty: 3.4.-1" time="0" classname="not empty: 3.4.-1">
    </testcase>
    <testcase name="common utils - isVersionEmpty not empty: 3.-1.-1" time="0" classname="not empty: 3.-1.-1">
    </testcase>
    <testcase name="common utils - isVersionEmpty not empty: 0.0.0" time="0" classname="not empty: 0.0.0">
    </testcase>
    <testcase name="common utils - isVersionEmpty not empty: 0.0.-1" time="0" classname="not empty: 0.0.-1">
    </testcase>
    <testcase name="common utils - isVersionEmpty not empty: 0.-1.-1" time="0" classname="not empty: 0.-1.-1">
    </testcase>
    <testcase name="common utils - isVersionEmpty bogus: undefined" time="0" classname="bogus: undefined">
    </testcase>
    <testcase name="common utils - isVersionEmpty bogus: null" time="0" classname="bogus: null">
    </testcase>
    <testcase name="common utils - isVersionEmpty bogus: [object Object]" time="0" classname="bogus: [object Object]">
    </testcase>
    <testcase name="common utils - isVersionEmpty bogus: x" time="0.001" classname="bogus: x">
    </testcase>
  </testsuite>
  <testsuite name="common utils - normalizeVersionInfo" timestamp="2021-11-08T22:03:08" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="valid" timestamp="2021-11-08T22:03:08" tests="20" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
    <testcase name="common utils - normalizeVersionInfo valid noop" time="0" classname="noop">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid same" time="0" classname="same">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, 5]" time="0" classname="[3, 4, 5]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, 1]" time="0" classname="[3, 4, 1]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, 0]" time="0" classname="[3, 4, 0]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, -1]" time="0" classname="[3, 4, -1]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, -5]" time="0" classname="[3, 4, -5]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [-1, -1, -1]" time="0" classname="[-1, -1, -1]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [-3, -4, -5]" time="0" classname="[-3, -4, -5]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [1, 5, 10]" time="0" classname="[1, 5, 10]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [1, 5, -10]" time="0" classname="[1, 5, -10]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [1, -5, -10]" time="0" classname="[1, -5, -10]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [-1, -5, -10]" time="0" classname="[-1, -5, -10]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [1, -5, 10]" time="0" classname="[1, -5, 10]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [-1, -5, 10]" time="0" classname="[-1, -5, 10]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, 5]" time="0" classname="[3, 4, 5]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, 1]" time="0" classname="[3, 4, 1]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, 0]" time="0" classname="[3, 4, 0]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, -1]" time="0" classname="[3, 4, -1]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo valid [3, 4, -5]" time="0" classname="[3, 4, -5]">
    </testcase>
  </testsuite>
  <testsuite name="partially &quot;invalid&quot;" timestamp="2021-11-08T22:03:08" tests="8" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0.001">
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [undefined, 4, 5]" time="0" classname="[undefined, 4, 5]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, null, 5]" time="0" classname="[3, null, 5]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, 4, NaN]" time="0" classname="[3, 4, NaN]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, 4, ]" time="0.001" classname="[3, 4, ]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, 4,  ]" time="0" classname="[3, 4,  ]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, 4, foo]" time="0" classname="[3, 4, foo]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, 4, [object Object]]" time="0" classname="[3, 4, [object Object]]">
    </testcase>
    <testcase name="common utils - normalizeVersionInfo partially &quot;invalid&quot; [3, 4, ]" time="0" classname="[3, 4, ]">
    </testcase>
  </testsuite>
  <testsuite name="common utils - validateVersionInfo" timestamp="2021-11-08T22:03:08" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="valid" timestamp="2021-11-08T22:03:08" tests="5" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
    <testcase name="common utils - validateVersionInfo valid as-is: [3, 4, 5]" time="0" classname="as-is: [3, 4, 5]">
    </testcase>
    <testcase name="common utils - validateVersionInfo valid as-is: [3, 4, -1]" time="0" classname="as-is: [3, 4, -1]">
    </testcase>
    <testcase name="common utils - validateVersionInfo valid as-is: [3, -1, -1]" time="0" classname="as-is: [3, -1, -1]">
    </testcase>
    <testcase name="common utils - validateVersionInfo valid as-is: [3, -7, -11]" time="0" classname="as-is: [3, -7, -11]">
    </testcase>
    <testcase name="common utils - validateVersionInfo valid normalization worked" time="0" classname="normalization worked">
    </testcase>
  </testsuite>
  <testsuite name="invalid" timestamp="2021-11-08T22:03:08" tests="9" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
    <testcase name="common utils - validateVersionInfo invalid missing parts: [-1.-1.-1]" time="0" classname="missing parts: [-1.-1.-1]">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid missing parts: [-1.-1.5]" time="0" classname="missing parts: [-1.-1.5]">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid missing parts: [-1.4.-1]" time="0" classname="missing parts: [-1.4.-1]">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid missing parts: [-1.4.5]" time="0" classname="missing parts: [-1.4.5]">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid missing parts: [3.-1.5]" time="0" classname="missing parts: [3.-1.5]">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid normalization failed: string not numeric" time="0" classname="normalization failed: string not numeric">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid normalization failed: missing" time="0" classname="normalization failed: missing">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid normalization failed: unsupported type" time="0" classname="normalization failed: unsupported type">
    </testcase>
    <testcase name="common utils - validateVersionInfo invalid normalization failed: oops!" time="0" classname="normalization failed: oops!">
    </testcase>
  </testsuite>
  <testsuite name="common utils - parseVersionInfo" timestamp="2021-11-08T22:03:08" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="invalid versions" timestamp="2021-11-08T22:03:08" tests="9" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0.001">
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;2.&apos;" time="0" classname="invalid - &apos;2.&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;.2&apos;" time="0" classname="invalid - &apos;.2&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;.2.7&apos;" time="0.001" classname="invalid - &apos;.2.7&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;a&apos;" time="0" classname="invalid - &apos;a&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;2.a&apos;" time="0" classname="invalid - &apos;2.a&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;2.b7&apos;" time="0" classname="invalid - &apos;2.b7&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;2-b.7&apos;" time="0" classname="invalid - &apos;2-b.7&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;2.7rc1&apos;" time="0" classname="invalid - &apos;2.7rc1&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo invalid versions invalid - &apos;&apos;" time="0" classname="invalid - &apos;&apos;">
    </testcase>
  </testsuite>
  <testsuite name="valid versions" timestamp="2021-11-08T22:03:08" tests="19" file="/home/don/development/vsc/vscode-python/out/test/common/utils/version.unit.test.js" failures="0" time="0">
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2.7.0&apos;" time="0" classname="valid - &apos;2.7.0&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2.7&apos;" time="0" classname="valid - &apos;2.7&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2&apos;" time="0" classname="valid - &apos;2&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2.7.11&apos;" time="0" classname="valid - &apos;2.7.11&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;3.11.1&apos;" time="0" classname="valid - &apos;3.11.1&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;0.0.0&apos;" time="0" classname="valid - &apos;0.0.0&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;02.7&apos;" time="0" classname="valid - &apos;02.7&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2.07&apos;" time="0" classname="valid - &apos;2.07&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2.7.01&apos;" time="0" classname="valid - &apos;2.7.01&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos; 2.7.9 &apos;" time="0" classname="valid - &apos; 2.7.9 &apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;2.7.9-3.2.7&apos;" time="0" classname="valid - &apos;2.7.9-3.2.7&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;python2.7.exe&apos;" time="0" classname="valid - &apos;python2.7.exe&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;1.2.3.4.5-x2.2&apos;" time="0" classname="valid - &apos;1.2.3.4.5-x2.2&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;3.8.1a2&apos;" time="0" classname="valid - &apos;3.8.1a2&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;3.8.1-alpha2&apos;" time="0" classname="valid - &apos;3.8.1-alpha2&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;3.7.5 (default, Nov  7 2019, 10:50:52) \n[GCC 8.3.0]&apos;" time="0" classname="valid - &apos;3.7.5 (default, Nov  7 2019, 10:50:52) \n[GCC 8.3.0]&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;python2&apos;" time="0" classname="valid - &apos;python2&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;python2.a&apos;" time="0" classname="valid - &apos;python2.a&apos;">
    </testcase>
    <testcase name="common utils - parseVersionInfo valid versions valid - &apos;python2.b7&apos;" time="0" classname="valid - &apos;python2.b7&apos;">
    </testcase>
  </testsuite>
  <testsuite name="Multiroot Environment Variables Provider" timestamp="2021-11-08T22:03:08" tests="23" file="/home/don/development/vsc/vscode-python/out/test/common/variables/environmentVariablesProvider.unit.test.js" failures="0" time="0.404">
    <testcase name="Multiroot Environment Variables Provider Event is fired when there are changes to settings" time="0" classname="Event is fired when there are changes to settings">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is not fired when there are not changes to settings" time="0" classname="Event is not fired when there are not changes to settings">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is not fired when workspace is not tracked" time="0" classname="Event is not fired when workspace is not tracked">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is fired when the environment file is modified (without a workspace)" time="0" classname="Event is fired when the environment file is modified (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is fired when the environment file is deleted (without a workspace)" time="0.001" classname="Event is fired when the environment file is deleted (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is fired when the environment file is created (without a workspace)" time="0" classname="Event is fired when the environment file is created (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider File system watcher event handlers are added once (without a workspace)" time="0" classname="File system watcher event handlers are added once (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables (without an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (without a workspace)" time="0.01" classname="Getting environment variables (without an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables (with an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (without a workspace)" time="0.01" classname="Getting environment variables (with an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables (with an envfile, with PATH in current env, with PYTHONPATH in current env) &amp; (without a workspace)" time="0.01" classname="Getting environment variables (with an envfile, with PATH in current env, with PYTHONPATH in current env) &amp; (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables which are already cached does not reinvoke the method (without a workspace)" time="0.009" classname="Getting environment variables which are already cached does not reinvoke the method (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Cache result must be cleared when cache expires (without a workspace)" time="0.13" classname="Cache result must be cleared when cache expires (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Environment variables are updated when env file changes (without a workspace)" time="0.021" classname="Environment variables are updated when env file changes (without a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is fired when the environment file is modified (with a workspace)" time="0" classname="Event is fired when the environment file is modified (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is fired when the environment file is deleted (with a workspace)" time="0" classname="Event is fired when the environment file is deleted (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Event is fired when the environment file is created (with a workspace)" time="0" classname="Event is fired when the environment file is created (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider File system watcher event handlers are added once (with a workspace)" time="0.001" classname="File system watcher event handlers are added once (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables (without an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (with a workspace)" time="0.009" classname="Getting environment variables (without an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables (with an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (with a workspace)" time="0.009" classname="Getting environment variables (with an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables (with an envfile, with PATH in current env, with PYTHONPATH in current env) &amp; (with a workspace)" time="0.01" classname="Getting environment variables (with an envfile, with PATH in current env, with PYTHONPATH in current env) &amp; (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Getting environment variables which are already cached does not reinvoke the method (with a workspace)" time="0.008" classname="Getting environment variables which are already cached does not reinvoke the method (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Cache result must be cleared when cache expires (with a workspace)" time="0.13" classname="Cache result must be cleared when cache expires (with a workspace)">
    </testcase>
    <testcase name="Multiroot Environment Variables Provider Environment variables are updated when env file changes (with a workspace)" time="0.046" classname="Environment variables are updated when env file changes (with a workspace)">
    </testcase>
  </testsuite>
  <testsuite name="Environment Variables Service" timestamp="2021-11-08T22:03:09" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="parseFile()" timestamp="2021-11-08T22:03:09" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.003">
    <testcase name="Environment Variables Service parseFile() Custom variables should be undefined with no argument" time="0" classname="Custom variables should be undefined with no argument">
    </testcase>
    <testcase name="Environment Variables Service parseFile() Custom variables should be undefined with non-existent files" time="0" classname="Custom variables should be undefined with non-existent files">
    </testcase>
    <testcase name="Environment Variables Service parseFile() Custom variables should be undefined when folder name is passed instead of a file name" time="0.001" classname="Custom variables should be undefined when folder name is passed instead of a file name">
    </testcase>
    <testcase name="Environment Variables Service parseFile() Custom variables should be not undefined with a valid environment file" time="0.001" classname="Custom variables should be not undefined with a valid environment file">
    </testcase>
    <testcase name="Environment Variables Service parseFile() Custom variables should be parsed from env file" time="0.001" classname="Custom variables should be parsed from env file">
    </testcase>
    <testcase name="Environment Variables Service parseFile() PATH and PYTHONPATH from env file should be returned as is" time="0" classname="PATH and PYTHONPATH from env file should be returned as is">
    </testcase>
    <testcase name="Environment Variables Service parseFile() Simple variable substitution is supported" time="0" classname="Simple variable substitution is supported">
    </testcase>
  </testsuite>
  <testsuite name="mergeVariables() (path var: Path)" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Variables Service mergeVariables() (path var: Path) Ensure variables are merged" time="0.001" classname="Ensure variables are merged">
    </testcase>
    <testcase name="Environment Variables Service mergeVariables() (path var: Path) Ensure path variabnles variables are not merged into target" time="0" classname="Ensure path variabnles variables are not merged into target">
    </testcase>
    <testcase name="Environment Variables Service mergeVariables() (path var: Path) Ensure path variables variables in target are left untouched" time="0" classname="Ensure path variables variables in target are left untouched">
    </testcase>
  </testsuite>
  <testsuite name="mergeVariables() (path var: PATH)" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Variables Service mergeVariables() (path var: PATH) Ensure variables are merged" time="0" classname="Ensure variables are merged">
    </testcase>
    <testcase name="Environment Variables Service mergeVariables() (path var: PATH) Ensure path variabnles variables are not merged into target" time="0" classname="Ensure path variabnles variables are not merged into target">
    </testcase>
    <testcase name="Environment Variables Service mergeVariables() (path var: PATH) Ensure path variables variables in target are left untouched" time="0.001" classname="Ensure path variables variables in target are left untouched">
    </testcase>
  </testsuite>
  <testsuite name="appendPath() (path var: Path)" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Variables Service appendPath() (path var: Path) Ensure appending PATH has no effect if an undefined value or empty string is provided and PATH does not exist in vars object" time="0" classname="Ensure appending PATH has no effect if an undefined value or empty string is provided and PATH does not exist in vars object">
    </testcase>
    <testcase name="Environment Variables Service appendPath() (path var: Path) Ensure appending PATH has no effect if an empty string is provided and path does not exist in vars object (Path)" time="0" classname="Ensure appending PATH has no effect if an empty string is provided and path does not exist in vars object (Path)">
    </testcase>
    <testcase name="Environment Variables Service appendPath() (path var: Path) Ensure PATH is appeneded (Path)" time="0.001" classname="Ensure PATH is appeneded (Path)">
    </testcase>
  </testsuite>
  <testsuite name="appendPath() (path var: PATH)" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Variables Service appendPath() (path var: PATH) Ensure appending PATH has no effect if an undefined value or empty string is provided and PATH does not exist in vars object" time="0" classname="Ensure appending PATH has no effect if an undefined value or empty string is provided and PATH does not exist in vars object">
    </testcase>
    <testcase name="Environment Variables Service appendPath() (path var: PATH) Ensure appending PATH has no effect if an empty string is provided and path does not exist in vars object (PATH)" time="0.001" classname="Ensure appending PATH has no effect if an empty string is provided and path does not exist in vars object (PATH)">
    </testcase>
    <testcase name="Environment Variables Service appendPath() (path var: PATH) Ensure PATH is appeneded (PATH)" time="0" classname="Ensure PATH is appeneded (PATH)">
    </testcase>
  </testsuite>
  <testsuite name="appendPythonPath()" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Variables Service appendPythonPath() Ensure appending PYTHONPATH has no effect if an undefined value or empty string is provided and PYTHONPATH does not exist in vars object" time="0" classname="Ensure appending PYTHONPATH has no effect if an undefined value or empty string is provided and PYTHONPATH does not exist in vars object">
    </testcase>
    <testcase name="Environment Variables Service appendPythonPath() Ensure appending PYTHONPATH has no effect if an empty string is provided and PYTHONPATH does not exist in vars object" time="0.001" classname="Ensure appending PYTHONPATH has no effect if an empty string is provided and PYTHONPATH does not exist in vars object">
    </testcase>
    <testcase name="Environment Variables Service appendPythonPath() Ensure appending PYTHONPATH has no effect if an empty string is provided and PYTHONPATH does not exist in vars object" time="0" classname="Ensure appending PYTHONPATH has no effect if an empty string is provided and PYTHONPATH does not exist in vars object">
    </testcase>
  </testsuite>
  <testsuite name="Parsing Environment Variables Files" timestamp="2021-11-08T22:03:09" tests="0" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="parseEnvFile()" timestamp="2021-11-08T22:03:09" tests="8" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0.002">
    <testcase name="Parsing Environment Variables Files parseEnvFile() Custom variables should be parsed from env file" time="0" classname="Custom variables should be parsed from env file">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() PATH and PYTHONPATH from env file should be returned as is" time="0.001" classname="PATH and PYTHONPATH from env file should be returned as is">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() Variable names must be alpha + alnum/underscore" time="0" classname="Variable names must be alpha + alnum/underscore">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() Empty values become empty string" time="0" classname="Empty values become empty string">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() Outer quotation marks are removed" time="0" classname="Outer quotation marks are removed">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() Whitespace is ignored" time="0" classname="Whitespace is ignored">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() Blank lines are ignored" time="0" classname="Blank lines are ignored">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() Comments are ignored" time="0.001" classname="Comments are ignored">
    </testcase>
  </testsuite>
  <testsuite name="variable substitution" timestamp="2021-11-08T22:03:09" tests="7" file="/home/don/development/vsc/vscode-python/out/test/common/variables/envVarsService.unit.test.js" failures="0" time="0">
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution Basic substitution syntax" time="0" classname="Basic substitution syntax">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution Curly braces are required for substitution" time="0" classname="Curly braces are required for substitution">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution Nested substitution is not supported" time="0" classname="Nested substitution is not supported">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution Other bad substitution syntax" time="0" classname="Other bad substitution syntax">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution Recursive substitution is allowed" time="0" classname="Recursive substitution is allowed">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution Substitution may be escaped" time="0" classname="Substitution may be escaped">
    </testcase>
    <testcase name="Parsing Environment Variables Files parseEnvFile() variable substitution base substitution variables" time="0" classname="base substitution variables">
    </testcase>
  </testsuite>
  <testsuite name="Common variables Service Registry" timestamp="2021-11-08T22:03:09" tests="1" file="/home/don/development/vsc/vscode-python/out/test/common/variables/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Common variables Service Registry Ensure services are registered" time="0" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="Environment sorting" timestamp="2021-11-08T22:03:09" tests="13" file="/home/don/development/vsc/vscode-python/out/test/configuration/environmentTypeComparer.unit.test.js" failures="0" time="0.002">
    <testcase name="Environment sorting Local virtual environment should come first" time="0.001" classname="Local virtual environment should come first">
    </testcase>
    <testcase name="Environment sorting Non-local virtual environment should not come first when there&apos;s a local env" time="0" classname="Non-local virtual environment should not come first when there&apos;s a local env">
    </testcase>
    <testcase name="Environment sorting Conda environment should not come first when there&apos;s a local env" time="0.001" classname="Conda environment should not come first when there&apos;s a local env">
    </testcase>
    <testcase name="Environment sorting Conda base environment should come after any other conda env" time="0" classname="Conda base environment should come after any other conda env">
    </testcase>
    <testcase name="Environment sorting Pipenv environment should come before any other conda env" time="0" classname="Pipenv environment should come before any other conda env">
    </testcase>
    <testcase name="Environment sorting System environment should not come first when there are global envs" time="0" classname="System environment should not come first when there are global envs">
    </testcase>
    <testcase name="Environment sorting Pyenv environment should not come first when there are global envs" time="0" classname="Pyenv environment should not come first when there are global envs">
    </testcase>
    <testcase name="Environment sorting Global environment should not come first when there are global envs" time="0" classname="Global environment should not come first when there are global envs">
    </testcase>
    <testcase name="Environment sorting Windows Store environment should not come first when there are global envs" time="0" classname="Windows Store environment should not come first when there are global envs">
    </testcase>
    <testcase name="Environment sorting Unknown environment should not come first when there are global envs" time="0" classname="Unknown environment should not come first when there are global envs">
    </testcase>
    <testcase name="Environment sorting If 2 environments are of the same type, the most recent Python version comes first" time="0" classname="If 2 environments are of the same type, the most recent Python version comes first">
    </testcase>
    <testcase name="Environment sorting If 2 global environments have the same Python version and there&apos;s a Conda one, the Conda env should not come first" time="0" classname="If 2 global environments have the same Python version and there&apos;s a Conda one, the Conda env should not come first">
    </testcase>
    <testcase name="Environment sorting If 2 global environments are of the same type and have the same Python version, they should be sorted by name" time="0" classname="If 2 global environments are of the same type and have the same Python version, they should be sorted by name">
    </testcase>
  </testsuite>
  <testsuite name="getEnvTypeHeuristic tests" timestamp="2021-11-08T22:03:09" tests="23" file="/home/don/development/vsc/vscode-python/out/test/configuration/environmentTypeComparer.unit.test.js" failures="0" time="0">
    <testcase name="getEnvTypeHeuristic tests If the path to an environment starts with the workspace path it should be marked as local" time="0" classname="If the path to an environment starts with the workspace path it should be marked as local">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment does not start with the workspace path it should be marked as global" time="0" classname="If the path to an environment does not start with the workspace path it should be marked as global">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If envPath is not set, fallback to path" time="0" classname="If envPath is not set, fallback to path">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment starts with the workspace path it should be marked as local" time="0" classname="If the path to an environment starts with the workspace path it should be marked as local">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment does not start with the workspace path it should be marked as global" time="0" classname="If the path to an environment does not start with the workspace path it should be marked as global">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If envPath is not set, fallback to path" time="0" classname="If envPath is not set, fallback to path">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment starts with the workspace path it should be marked as local" time="0" classname="If the path to an environment starts with the workspace path it should be marked as local">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment does not start with the workspace path it should be marked as global" time="0" classname="If the path to an environment does not start with the workspace path it should be marked as global">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If envPath is not set, fallback to path" time="0" classname="If envPath is not set, fallback to path">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment starts with the workspace path it should be marked as local" time="0" classname="If the path to an environment starts with the workspace path it should be marked as local">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment does not start with the workspace path it should be marked as global" time="0" classname="If the path to an environment does not start with the workspace path it should be marked as global">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If envPath is not set, fallback to path" time="0" classname="If envPath is not set, fallback to path">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment starts with the workspace path it should be marked as local" time="0" classname="If the path to an environment starts with the workspace path it should be marked as local">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment does not start with the workspace path it should be marked as global" time="0" classname="If the path to an environment does not start with the workspace path it should be marked as global">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If envPath is not set, fallback to path" time="0" classname="If envPath is not set, fallback to path">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment starts with the workspace path it should be marked as local" time="0" classname="If the path to an environment starts with the workspace path it should be marked as local">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the path to an environment does not start with the workspace path it should be marked as global" time="0" classname="If the path to an environment does not start with the workspace path it should be marked as global">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If envPath is not set, fallback to path" time="0" classname="If envPath is not set, fallback to path">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the environment type is System and the environment path does not start with the workspace path it should be marked as a global interpreter" time="0" classname="If the environment type is System and the environment path does not start with the workspace path it should be marked as a global interpreter">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the environment type is WindowsStore and the environment path does not start with the workspace path it should be marked as a global interpreter" time="0" classname="If the environment type is WindowsStore and the environment path does not start with the workspace path it should be marked as a global interpreter">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the environment type is Global and the environment path does not start with the workspace path it should be marked as a global interpreter" time="0" classname="If the environment type is Global and the environment path does not start with the workspace path it should be marked as a global interpreter">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the environment type is Unknown and the environment path does not start with the workspace path it should be marked as a global interpreter" time="0" classname="If the environment type is Unknown and the environment path does not start with the workspace path it should be marked as a global interpreter">
    </testcase>
    <testcase name="getEnvTypeHeuristic tests If the environment type is Pyenv and the environment path does not start with the workspace path it should be marked as a global interpreter" time="0" classname="If the environment type is Pyenv and the environment path does not start with the workspace path it should be marked as a global interpreter">
    </testcase>
  </testsuite>
  <testsuite name="Reset Interpreter Command" timestamp="2021-11-08T22:03:09" tests="0" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/resetInterpreter.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test method resetInterpreter()" timestamp="2021-11-08T22:03:09" tests="5" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/resetInterpreter.unit.test.js" failures="0" time="0.003">
    <testcase name="Reset Interpreter Command Test method resetInterpreter() Update Global settings when there are no workspaces" time="0" classname="Update Global settings when there are no workspaces">
    </testcase>
    <testcase name="Reset Interpreter Command Test method resetInterpreter() Update workspace folder settings when there is one workspace folder and no workspace file" time="0.001" classname="Update workspace folder settings when there is one workspace folder and no workspace file">
    </testcase>
    <testcase name="Reset Interpreter Command Test method resetInterpreter() Update selected workspace folder settings when there is more than one workspace folder" time="0.001" classname="Update selected workspace folder settings when there is more than one workspace folder">
    </testcase>
    <testcase name="Reset Interpreter Command Test method resetInterpreter() Update entire workspace settings when there is more than one workspace folder and `Select at workspace level` is selected" time="0" classname="Update entire workspace settings when there is more than one workspace folder and `Select at workspace level` is selected">
    </testcase>
    <testcase name="Reset Interpreter Command Test method resetInterpreter() Do not update anything when user does not select a workspace folder and there is more than one workspace folder" time="0.001" classname="Do not update anything when user does not select a workspace folder and there is more than one workspace folder">
    </testcase>
  </testsuite>
  <testsuite name="Set Interpreter Command" timestamp="2021-11-08T22:03:09" tests="0" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/setInterpreter.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test method _pickInterpreter()" timestamp="2021-11-08T22:03:09" tests="8" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/setInterpreter.unit.test.js" failures="0" time="0.007">
    <testcase name="Set Interpreter Command Test method _pickInterpreter() Existing state path must be removed before displaying picker" time="0.001" classname="Existing state path must be removed before displaying picker">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() Picker should be displayed with expected items" time="0" classname="Picker should be displayed with expected items">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() Ensure a refresh is triggered if refresh button is clicked" time="0.001" classname="Ensure a refresh is triggered if refresh button is clicked">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() If an event to update quickpick is received, the quickpick is updated accordingly" time="0.003" classname="If an event to update quickpick is received, the quickpick is updated accordingly">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() If an item is selected, update state and return" time="0.001" classname="If an item is selected, update state and return">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() If an item is selected, send SELECT_INTERPRETER_SELECTED telemetry with the &quot;selected&quot; property value" time="0.001" classname="If an item is selected, send SELECT_INTERPRETER_SELECTED telemetry with the &quot;selected&quot; property value">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() If the dropdown is dismissed, send SELECT_INTERPRETER_SELECTED telemetry with the &quot;escape&quot; property value" time="0" classname="If the dropdown is dismissed, send SELECT_INTERPRETER_SELECTED telemetry with the &quot;escape&quot; property value">
    </testcase>
    <testcase name="Set Interpreter Command Test method _pickInterpreter() If `Enter or browse...` option is selected, call the corresponding method with correct arguments" time="0" classname="If `Enter or browse...` option is selected, call the corresponding method with correct arguments">
    </testcase>
  </testsuite>
  <testsuite name="Test method _enterOrBrowseInterpreterPath()" timestamp="2021-11-08T22:03:09" tests="5" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/setInterpreter.unit.test.js" failures="0" time="0.002">
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() Picker should be displayed with expected items" time="0" classname="Picker should be displayed with expected items">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() If user enters path to interpreter in the filter box, get path and update state" time="0" classname="If user enters path to interpreter in the filter box, get path and update state">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() If `Browse...` is selected, open the file browser to get path and update state" time="0" classname="If `Browse...` is selected, open the file browser to get path and update state">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() If `Browse...` option is selected on Windows, file browser is opened using expected parameters" time="0.001" classname="If `Browse...` option is selected on Windows, file browser is opened using expected parameters">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() If `Browse...` option is selected on non-Windows, file browser is opened using expected parameters" time="0.001" classname="If `Browse...` option is selected on non-Windows, file browser is opened using expected parameters">
    </testcase>
  </testsuite>
  <testsuite name="SELECT_INTERPRETER_ENTERED_EXISTS telemetry" timestamp="2021-11-08T22:03:09" tests="8" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/setInterpreter.unit.test.js" failures="0" time="0.003">
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent after manual entry of an intepreter path" time="0" classname="A telemetry event should be sent after manual entry of an intepreter path">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent after browsing for an interpreter" time="0" classname="A telemetry event should be sent after browsing for an interpreter">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent with the discovered prop set to true if the interpreter had already been discovered, with an interpreter path path that is absolute)" time="0.001" classname="A telemetry event should be sent with the discovered prop set to true if the interpreter had already been discovered, with an interpreter path path that is absolute)">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent with the discovered prop set to true if the interpreter had already been discovered, with an interpreter path path that is home relative)" time="0" classname="A telemetry event should be sent with the discovered prop set to true if the interpreter had already been discovered, with an interpreter path path that is home relative)">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent with the discovered prop set to true if the interpreter had already been discovered, with an interpreter path path that is workspace relative)" time="0.001" classname="A telemetry event should be sent with the discovered prop set to true if the interpreter had already been discovered, with an interpreter path path that is workspace relative)">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent with the discovered prop set to false if the interpreter had not been discovered, with an interpreter path path that is absolute)" time="0.001" classname="A telemetry event should be sent with the discovered prop set to false if the interpreter had not been discovered, with an interpreter path path that is absolute)">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent with the discovered prop set to false if the interpreter had not been discovered, with an interpreter path path that is home relative)" time="0" classname="A telemetry event should be sent with the discovered prop set to false if the interpreter had not been discovered, with an interpreter path path that is home relative)">
    </testcase>
    <testcase name="Set Interpreter Command Test method _enterOrBrowseInterpreterPath() SELECT_INTERPRETER_ENTERED_EXISTS telemetry A telemetry event should be sent with the discovered prop set to false if the interpreter had not been discovered, with an interpreter path path that is workspace relative)" time="0" classname="A telemetry event should be sent with the discovered prop set to false if the interpreter had not been discovered, with an interpreter path path that is workspace relative)">
    </testcase>
  </testsuite>
  <testsuite name="Test method setInterpreter()" timestamp="2021-11-08T22:03:09" tests="6" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/commands/setInterpreter.unit.test.js" failures="0" time="0.005">
    <testcase name="Set Interpreter Command Test method setInterpreter() Update Global settings when there are no workspaces" time="0.001" classname="Update Global settings when there are no workspaces">
    </testcase>
    <testcase name="Set Interpreter Command Test method setInterpreter() Update workspace folder settings when there is one workspace folder and no workspace file" time="0.001" classname="Update workspace folder settings when there is one workspace folder and no workspace file">
    </testcase>
    <testcase name="Set Interpreter Command Test method setInterpreter() Update selected workspace folder settings when there is more than one workspace folder" time="0.001" classname="Update selected workspace folder settings when there is more than one workspace folder">
    </testcase>
    <testcase name="Set Interpreter Command Test method setInterpreter() Update entire workspace settings when there is more than one workspace folder and `Select at workspace level` is selected" time="0.001" classname="Update entire workspace settings when there is more than one workspace folder and `Select at workspace level` is selected">
    </testcase>
    <testcase name="Set Interpreter Command Test method setInterpreter() Do not update anything when user does not select a workspace folder and there is more than one workspace folder" time="0.001" classname="Do not update anything when user does not select a workspace folder and there is more than one workspace folder">
    </testcase>
    <testcase name="Set Interpreter Command Test method setInterpreter() Make sure multiStepInput.run is called with the correct arguments" time="0" classname="Make sure multiStepInput.run is called with the correct arguments">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters - selector" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/configuration/interpreterSelector/interpreterSelector.unit.test.js" failures="0" time="0.001">
    <testcase name="Interpreters - selector Suggestions (Windows)" time="0" classname="Suggestions (Windows)">
    </testcase>
    <testcase name="Interpreters - selector Suggestions (Non-Windows)" time="0.001" classname="Suggestions (Non-Windows)">
    </testcase>
    <testcase name="Interpreters - selector Should sort environments with local ones first" time="0" classname="Should sort environments with local ones first">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Adapter Factory and logger Registration" timestamp="2021-11-08T22:03:09" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/activator.unit.test.js" failures="0" time="0.001">
    <testcase name="Debugging - Adapter Factory and logger Registration Register Debug adapter factory" time="0" classname="Register Debug adapter factory">
    </testcase>
    <testcase name="Debugging - Adapter Factory and logger Registration Register a disposable item" time="0.001" classname="Register a disposable item">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Adapter Factory" timestamp="2021-11-08T22:03:09" tests="16" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/factory.unit.test.js" failures="0" time="0.017000000000000008">
    <testcase name="Debugging - Adapter Factory Return the value of configuration.pythonPath as the current python path if it exists" time="0.002" classname="Return the value of configuration.pythonPath as the current python path if it exists">
    </testcase>
    <testcase name="Debugging - Adapter Factory Return the path of the active interpreter as the current python path, it exists and configuration.pythonPath is not defined" time="0.001" classname="Return the path of the active interpreter as the current python path, it exists and configuration.pythonPath is not defined">
    </testcase>
    <testcase name="Debugging - Adapter Factory Return the path of the first available interpreter as the current python path, configuration.pythonPath is not defined and there is no active interpreter" time="0.002" classname="Return the path of the first available interpreter as the current python path, configuration.pythonPath is not defined and there is no active interpreter">
    </testcase>
    <testcase name="Debugging - Adapter Factory Display a message if no python interpreter is set" time="0" classname="Display a message if no python interpreter is set">
    </testcase>
    <testcase name="Debugging - Adapter Factory Return Debug Adapter server if request is &quot;attach&quot;, and port is specified directly" time="0" classname="Return Debug Adapter server if request is &quot;attach&quot;, and port is specified directly">
    </testcase>
    <testcase name="Debugging - Adapter Factory Return Debug Adapter server if request is &quot;attach&quot;, and connect is specified" time="0" classname="Return Debug Adapter server if request is &quot;attach&quot;, and connect is specified">
    </testcase>
    <testcase name="Debugging - Adapter Factory Return Debug Adapter executable if request is &quot;attach&quot;, and listen is specified" time="0.003" classname="Return Debug Adapter executable if request is &quot;attach&quot;, and listen is specified">
    </testcase>
    <testcase name="Debugging - Adapter Factory Throw error if request is &quot;attach&quot;, and neither port, processId, listen, nor connect is specified" time="0.001" classname="Throw error if request is &quot;attach&quot;, and neither port, processId, listen, nor connect is specified">
    </testcase>
    <testcase name="Debugging - Adapter Factory Pass the --log-dir argument to debug adapter if configuration.logToFile is set" time="0.001" classname="Pass the --log-dir argument to debug adapter if configuration.logToFile is set">
    </testcase>
    <testcase name="Debugging - Adapter Factory Don&apos;t pass the --log-dir argument to debug adapter if configuration.logToFile is not set" time="0.001" classname="Don&apos;t pass the --log-dir argument to debug adapter if configuration.logToFile is not set">
    </testcase>
    <testcase name="Debugging - Adapter Factory Don&apos;t pass the --log-dir argument to debugger if configuration.logToFile is set to false" time="0.001" classname="Don&apos;t pass the --log-dir argument to debugger if configuration.logToFile is set to false">
    </testcase>
    <testcase name="Debugging - Adapter Factory Send attach to local process telemetry if attaching to a local process" time="0.001" classname="Send attach to local process telemetry if attaching to a local process">
    </testcase>
    <testcase name="Debugging - Adapter Factory Don&apos;t send any telemetry if not attaching to a local process" time="0.001" classname="Don&apos;t send any telemetry if not attaching to a local process">
    </testcase>
    <testcase name="Debugging - Adapter Factory Use &quot;debugAdapterPath&quot; when specified" time="0" classname="Use &quot;debugAdapterPath&quot; when specified">
    </testcase>
    <testcase name="Debugging - Adapter Factory Use &quot;debugAdapterPython&quot; when specified" time="0.002" classname="Use &quot;debugAdapterPython&quot; when specified">
    </testcase>
    <testcase name="Debugging - Adapter Factory Do not use &quot;python&quot; to spawn the debug adapter" time="0.001" classname="Do not use &quot;python&quot; to spawn the debug adapter">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Session Logging" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/logging.unit.test.js" failures="0" time="0">
    <testcase name="Debugging - Session Logging Create logger using session without logToFile" time="0" classname="Create logger using session without logToFile">
    </testcase>
    <testcase name="Debugging - Session Logging Create logger using session with logToFile set to false" time="0" classname="Create logger using session with logToFile set to false">
    </testcase>
    <testcase name="Debugging - Session Logging Create logger using session with logToFile set to true" time="0" classname="Create logger using session with logToFile set to true">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Outdated Debugger Prompt tests." timestamp="2021-11-08T22:03:09" tests="6" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/outdatedDebuggerPrompt.unit.test.js" failures="0" time="0.006">
    <testcase name="Debugging - Outdated Debugger Prompt tests. Show prompt when attaching to ptvsd, more info is NOT clicked" time="0.001" classname="Show prompt when attaching to ptvsd, more info is NOT clicked">
    </testcase>
    <testcase name="Debugging - Outdated Debugger Prompt tests. Show prompt when attaching to ptvsd, more info is clicked" time="0.001" classname="Show prompt when attaching to ptvsd, more info is clicked">
    </testcase>
    <testcase name="Debugging - Outdated Debugger Prompt tests. Don&apos;t show prompt attaching to debugpy" time="0.001" classname="Don&apos;t show prompt attaching to debugpy">
    </testcase>
    <testcase name="Debugging - Outdated Debugger Prompt tests. Don&apos;t show prompt when non-telemetry events are seen: {&quot;seq&quot;:1,&quot;type&quot;:&quot;request&quot;,&quot;command&quot;:&quot;runInTerminal&quot;,&quot;arguments&quot;:{&quot;cwd&quot;:&quot;&quot;,&quot;args&quot;:[&quot;&quot;]}}" time="0.001" classname="Don&apos;t show prompt when non-telemetry events are seen: {&quot;seq&quot;:1,&quot;type&quot;:&quot;request&quot;,&quot;command&quot;:&quot;runInTerminal&quot;,&quot;arguments&quot;:{&quot;cwd&quot;:&quot;&quot;,&quot;args&quot;:[&quot;&quot;]}}">
    </testcase>
    <testcase name="Debugging - Outdated Debugger Prompt tests. Don&apos;t show prompt when non-telemetry events are seen: {&quot;seq&quot;:1,&quot;type&quot;:&quot;event&quot;,&quot;event&quot;:&quot;continued&quot;,&quot;body&quot;:{&quot;threadId&quot;:1,&quot;allThreadsContinued&quot;:true}}" time="0.001" classname="Don&apos;t show prompt when non-telemetry events are seen: {&quot;seq&quot;:1,&quot;type&quot;:&quot;event&quot;,&quot;event&quot;:&quot;continued&quot;,&quot;body&quot;:{&quot;threadId&quot;:1,&quot;allThreadsContinued&quot;:true}}">
    </testcase>
    <testcase name="Debugging - Outdated Debugger Prompt tests. Don&apos;t show prompt when non-telemetry events are seen: {&quot;seq&quot;:1,&quot;type&quot;:&quot;event&quot;,&quot;event&quot;:&quot;output&quot;,&quot;body&quot;:{&quot;category&quot;:&quot;stdout&quot;,&quot;output&quot;:&quot;ptvsd&quot;}}" time="0.001" classname="Don&apos;t show prompt when non-telemetry events are seen: {&quot;seq&quot;:1,&quot;type&quot;:&quot;event&quot;,&quot;event&quot;:&quot;output&quot;,&quot;body&quot;:{&quot;category&quot;:&quot;stdout&quot;,&quot;output&quot;:&quot;ptvsd&quot;}}">
    </testcase>
  </testsuite>
  <testsuite name="External debugpy Debugger Launcher" timestamp="2021-11-08T22:03:09" tests="0" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/remoteLaunchers.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="When path to debugpy does not contains spaces" timestamp="2021-11-08T22:03:09" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/remoteLaunchers.unit.test.js" failures="0" time="0">
    <testcase name="External debugpy Debugger Launcher When path to debugpy does not contains spaces Test remote debug launcher args (and do not wait for debugger to attach)" time="0" classname="Test remote debug launcher args (and do not wait for debugger to attach)">
    </testcase>
    <testcase name="External debugpy Debugger Launcher When path to debugpy does not contains spaces Test remote debug launcher args (and wait for debugger to attach)" time="0" classname="Test remote debug launcher args (and wait for debugger to attach)">
    </testcase>
  </testsuite>
  <testsuite name="When path to debugpy contains spaces" timestamp="2021-11-08T22:03:09" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/remoteLaunchers.unit.test.js" failures="0" time="0">
    <testcase name="External debugpy Debugger Launcher When path to debugpy contains spaces Test remote debug launcher args (and do not wait for debugger to attach)" time="0" classname="Test remote debug launcher args (and do not wait for debugger to attach)">
    </testcase>
    <testcase name="External debugpy Debugger Launcher When path to debugpy contains spaces Test remote debug launcher args (and wait for debugger to attach)" time="0" classname="Test remote debug launcher args (and wait for debugger to attach)">
    </testcase>
  </testsuite>
  <testsuite name="Path To Debugger Package" timestamp="2021-11-08T22:03:09" tests="1" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/adapter/remoteLaunchers.unit.test.js" failures="0" time="0">
    <testcase name="Path To Debugger Package Path to debugpy debugger package" time="0" classname="Path to debugpy debugger package">
    </testcase>
  </testsuite>
  <testsuite name="Attach to process - attach process provider factory" timestamp="2021-11-08T22:03:09" tests="1" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/attachQuickPick/factory.unit.test.js" failures="0" time="0">
    <testcase name="Attach to process - attach process provider factory Register commands should not fail" time="0" classname="Register commands should not fail">
    </testcase>
  </testsuite>
  <testsuite name="Attach to process - process provider" timestamp="2021-11-08T22:03:09" tests="4" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/attachQuickPick/provider.unit.test.js" failures="0" time="0.001">
    <testcase name="Attach to process - process provider The Linux process list command should be called if the platform is Linux" time="0.001" classname="The Linux process list command should be called if the platform is Linux">
    </testcase>
    <testcase name="Attach to process - process provider The macOS process list command should be called if the platform is macOS" time="0" classname="The macOS process list command should be called if the platform is macOS">
    </testcase>
    <testcase name="Attach to process - process provider The Windows process list command should be called if the platform is Windows" time="0" classname="The Windows process list command should be called if the platform is Windows">
    </testcase>
    <testcase name="Attach to process - process provider An error should be thrown if the platform is neither Linux, macOS or Windows" time="0" classname="An error should be thrown if the platform is neither Linux, macOS or Windows">
    </testcase>
  </testsuite>
  <testsuite name="POSIX getAttachItems (Linux)" timestamp="2021-11-08T22:03:09" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/attachQuickPick/provider.unit.test.js" failures="0" time="0.001">
    <testcase name="Attach to process - process provider POSIX getAttachItems (Linux) Items returned by getAttachItems should be sorted alphabetically" time="0.001" classname="Items returned by getAttachItems should be sorted alphabetically">
    </testcase>
    <testcase name="Attach to process - process provider POSIX getAttachItems (Linux) Python processes should be at the top of the list returned by getAttachItems" time="0" classname="Python processes should be at the top of the list returned by getAttachItems">
    </testcase>
  </testsuite>
  <testsuite name="Windows getAttachItems" timestamp="2021-11-08T22:03:09" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/attachQuickPick/provider.unit.test.js" failures="0" time="0">
    <testcase name="Attach to process - process provider Windows getAttachItems Items returned by getAttachItems should be sorted alphabetically" time="0" classname="Items returned by getAttachItems should be sorted alphabetically">
    </testcase>
    <testcase name="Attach to process - process provider Windows getAttachItems Python processes should be at the top of the list returned by getAttachItems" time="0" classname="Python processes should be at the top of the list returned by getAttachItems">
    </testcase>
  </testsuite>
  <testsuite name="Attach to process - ps process parser (POSIX)" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/attachQuickPick/psProcessParser.unit.test.js" failures="0" time="0">
    <testcase name="Attach to process - ps process parser (POSIX) Processes should be parsed correctly if it is valid input" time="0" classname="Processes should be parsed correctly if it is valid input">
    </testcase>
    <testcase name="Attach to process - ps process parser (POSIX) Empty lines should be skipped when parsing process list input" time="0" classname="Empty lines should be skipped when parsing process list input">
    </testcase>
    <testcase name="Attach to process - ps process parser (POSIX) Incorrectly formatted lines should be skipped when parsing process list input" time="0" classname="Incorrectly formatted lines should be skipped when parsing process list input">
    </testcase>
  </testsuite>
  <testsuite name="Attach to process - wmic process parser (Windows)" timestamp="2021-11-08T22:03:09" tests="3" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/attachQuickPick/wmicProcessParser.unit.test.js" failures="0" time="0">
    <testcase name="Attach to process - wmic process parser (Windows) Processes should be parsed correctly if it is valid input" time="0" classname="Processes should be parsed correctly if it is valid input">
    </testcase>
    <testcase name="Attach to process - wmic process parser (Windows) Incorrectly formatted lines should be skipped when parsing process list input" time="0" classname="Incorrectly formatted lines should be skipped when parsing process list input">
    </testcase>
    <testcase name="Attach to process - wmic process parser (Windows) Command lines starting with a DOS device path prefix should be parsed correctly" time="0" classname="Command lines starting with a DOS device path prefix should be parsed correctly">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Banner" timestamp="2021-11-08T22:03:09" tests="111" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/banner.unit.test.js" failures="0" time="0.022000000000000013">
    <testcase name="Debugging - Banner Browser is displayed when launching service along with debugger launch counter" time="0.001" classname="Browser is displayed when launching service along with debugger launch counter">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 0)" time="0" classname="users are selected 10% of the time (random: 0)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 1)" time="0" classname="users are selected 10% of the time (random: 1)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 2)" time="0" classname="users are selected 10% of the time (random: 2)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 3)" time="0.001" classname="users are selected 10% of the time (random: 3)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 4)" time="0" classname="users are selected 10% of the time (random: 4)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 5)" time="0" classname="users are selected 10% of the time (random: 5)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 6)" time="0" classname="users are selected 10% of the time (random: 6)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 7)" time="0" classname="users are selected 10% of the time (random: 7)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 8)" time="0" classname="users are selected 10% of the time (random: 8)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 9)" time="0" classname="users are selected 10% of the time (random: 9)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 10)" time="0" classname="users are selected 10% of the time (random: 10)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 11)" time="0" classname="users are selected 10% of the time (random: 11)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 12)" time="0" classname="users are selected 10% of the time (random: 12)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 13)" time="0" classname="users are selected 10% of the time (random: 13)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 14)" time="0.001" classname="users are selected 10% of the time (random: 14)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 15)" time="0" classname="users are selected 10% of the time (random: 15)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 16)" time="0.001" classname="users are selected 10% of the time (random: 16)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 17)" time="0" classname="users are selected 10% of the time (random: 17)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 18)" time="0.001" classname="users are selected 10% of the time (random: 18)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 19)" time="0" classname="users are selected 10% of the time (random: 19)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 20)" time="0" classname="users are selected 10% of the time (random: 20)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 21)" time="0" classname="users are selected 10% of the time (random: 21)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 22)" time="0" classname="users are selected 10% of the time (random: 22)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 23)" time="0.001" classname="users are selected 10% of the time (random: 23)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 24)" time="0" classname="users are selected 10% of the time (random: 24)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 25)" time="0" classname="users are selected 10% of the time (random: 25)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 26)" time="0" classname="users are selected 10% of the time (random: 26)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 27)" time="0" classname="users are selected 10% of the time (random: 27)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 28)" time="0" classname="users are selected 10% of the time (random: 28)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 29)" time="0" classname="users are selected 10% of the time (random: 29)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 30)" time="0" classname="users are selected 10% of the time (random: 30)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 31)" time="0.001" classname="users are selected 10% of the time (random: 31)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 32)" time="0" classname="users are selected 10% of the time (random: 32)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 33)" time="0" classname="users are selected 10% of the time (random: 33)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 34)" time="0" classname="users are selected 10% of the time (random: 34)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 35)" time="0" classname="users are selected 10% of the time (random: 35)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 36)" time="0" classname="users are selected 10% of the time (random: 36)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 37)" time="0" classname="users are selected 10% of the time (random: 37)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 38)" time="0" classname="users are selected 10% of the time (random: 38)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 39)" time="0" classname="users are selected 10% of the time (random: 39)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 40)" time="0" classname="users are selected 10% of the time (random: 40)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 41)" time="0" classname="users are selected 10% of the time (random: 41)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 42)" time="0" classname="users are selected 10% of the time (random: 42)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 43)" time="0" classname="users are selected 10% of the time (random: 43)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 44)" time="0" classname="users are selected 10% of the time (random: 44)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 45)" time="0.001" classname="users are selected 10% of the time (random: 45)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 46)" time="0" classname="users are selected 10% of the time (random: 46)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 47)" time="0.001" classname="users are selected 10% of the time (random: 47)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 48)" time="0" classname="users are selected 10% of the time (random: 48)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 49)" time="0" classname="users are selected 10% of the time (random: 49)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 50)" time="0.001" classname="users are selected 10% of the time (random: 50)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 51)" time="0.001" classname="users are selected 10% of the time (random: 51)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 52)" time="0" classname="users are selected 10% of the time (random: 52)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 53)" time="0" classname="users are selected 10% of the time (random: 53)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 54)" time="0" classname="users are selected 10% of the time (random: 54)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 55)" time="0" classname="users are selected 10% of the time (random: 55)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 56)" time="0.001" classname="users are selected 10% of the time (random: 56)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 57)" time="0" classname="users are selected 10% of the time (random: 57)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 58)" time="0" classname="users are selected 10% of the time (random: 58)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 59)" time="0.001" classname="users are selected 10% of the time (random: 59)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 60)" time="0" classname="users are selected 10% of the time (random: 60)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 61)" time="0" classname="users are selected 10% of the time (random: 61)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 62)" time="0" classname="users are selected 10% of the time (random: 62)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 63)" time="0" classname="users are selected 10% of the time (random: 63)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 64)" time="0.001" classname="users are selected 10% of the time (random: 64)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 65)" time="0" classname="users are selected 10% of the time (random: 65)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 66)" time="0" classname="users are selected 10% of the time (random: 66)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 67)" time="0" classname="users are selected 10% of the time (random: 67)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 68)" time="0" classname="users are selected 10% of the time (random: 68)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 69)" time="0" classname="users are selected 10% of the time (random: 69)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 70)" time="0" classname="users are selected 10% of the time (random: 70)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 71)" time="0" classname="users are selected 10% of the time (random: 71)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 72)" time="0" classname="users are selected 10% of the time (random: 72)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 73)" time="0" classname="users are selected 10% of the time (random: 73)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 74)" time="0" classname="users are selected 10% of the time (random: 74)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 75)" time="0" classname="users are selected 10% of the time (random: 75)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 76)" time="0" classname="users are selected 10% of the time (random: 76)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 77)" time="0" classname="users are selected 10% of the time (random: 77)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 78)" time="0" classname="users are selected 10% of the time (random: 78)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 79)" time="0" classname="users are selected 10% of the time (random: 79)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 80)" time="0" classname="users are selected 10% of the time (random: 80)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 81)" time="0.001" classname="users are selected 10% of the time (random: 81)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 82)" time="0" classname="users are selected 10% of the time (random: 82)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 83)" time="0" classname="users are selected 10% of the time (random: 83)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 84)" time="0.001" classname="users are selected 10% of the time (random: 84)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 85)" time="0" classname="users are selected 10% of the time (random: 85)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 86)" time="0" classname="users are selected 10% of the time (random: 86)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 87)" time="0" classname="users are selected 10% of the time (random: 87)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 88)" time="0" classname="users are selected 10% of the time (random: 88)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 89)" time="0" classname="users are selected 10% of the time (random: 89)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 90)" time="0" classname="users are selected 10% of the time (random: 90)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 91)" time="0.001" classname="users are selected 10% of the time (random: 91)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 92)" time="0" classname="users are selected 10% of the time (random: 92)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 93)" time="0" classname="users are selected 10% of the time (random: 93)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 94)" time="0" classname="users are selected 10% of the time (random: 94)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 95)" time="0" classname="users are selected 10% of the time (random: 95)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 96)" time="0" classname="users are selected 10% of the time (random: 96)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 97)" time="0" classname="users are selected 10% of the time (random: 97)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 98)" time="0" classname="users are selected 10% of the time (random: 98)">
    </testcase>
    <testcase name="Debugging - Banner users are selected 10% of the time (random: 99)" time="0.001" classname="users are selected 10% of the time (random: 99)">
    </testcase>
    <testcase name="Debugging - Banner user selection does not change (random: 0)" time="0" classname="user selection does not change (random: 0)">
    </testcase>
    <testcase name="Debugging - Banner user selection does not change (random: 10)" time="0.001" classname="user selection does not change (random: 10)">
    </testcase>
    <testcase name="Debugging - Banner Increment Debugger Launch Counter when debug session starts" time="0.001" classname="Increment Debugger Launch Counter when debug session starts">
    </testcase>
    <testcase name="Debugging - Banner Do not Increment Debugger Launch Counter when debug session starts and Banner is disabled" time="0" classname="Do not Increment Debugger Launch Counter when debug session starts and Banner is disabled">
    </testcase>
    <testcase name="Debugging - Banner shouldShow must return false when Banner is disabled" time="0" classname="shouldShow must return false when Banner is disabled">
    </testcase>
    <testcase name="Debugging - Banner shouldShow must return false when Banner is enabled and debug counter is not same as threshold" time="0" classname="shouldShow must return false when Banner is enabled and debug counter is not same as threshold">
    </testcase>
    <testcase name="Debugging - Banner shouldShow must return true when Banner is enabled and debug counter is same as threshold" time="0" classname="shouldShow must return true when Banner is enabled and debug counter is same as threshold">
    </testcase>
    <testcase name="Debugging - Banner show must be invoked when shouldShow returns true" time="0.001" classname="show must be invoked when shouldShow returns true">
    </testcase>
    <testcase name="Debugging - Banner show must not be invoked the second time after dismissing the message" time="0.001" classname="show must not be invoked the second time after dismissing the message">
    </testcase>
    <testcase name="Debugging - Banner Disabling banner must store value of &apos;false&apos; in global store" time="0" classname="Disabling banner must store value of &apos;false&apos; in global store">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Service" timestamp="2021-11-08T22:03:09" tests="8" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/debugConfigurationService.unit.test.js" failures="0" time="0.003">
    <testcase name="Debugging - Configuration Service Should use attach resolver when passing attach config" time="0.001" classname="Should use attach resolver when passing attach config">
    </testcase>
    <testcase name="Debugging - Configuration Service Should use launch resolver when passing launch config with request=launch" time="0.001" classname="Should use launch resolver when passing launch config with request=launch">
    </testcase>
    <testcase name="Debugging - Configuration Service Should use launch resolver when passing launch config with request=undefined" time="0" classname="Should use launch resolver when passing launch config with request=undefined">
    </testcase>
    <testcase name="Debugging - Configuration Service Picker should be displayed" time="0" classname="Picker should be displayed">
    </testcase>
    <testcase name="Debugging - Configuration Service Existing Configuration items must be removed before displaying picker" time="0" classname="Existing Configuration items must be removed before displaying picker">
    </testcase>
    <testcase name="Debugging - Configuration Service Ensure generated config is returned" time="0.001" classname="Ensure generated config is returned">
    </testcase>
    <testcase name="Debugging - Configuration Service Ensure `undefined` is returned if QuickPick is cancelled" time="0" classname="Ensure `undefined` is returned if QuickPick is cancelled">
    </testcase>
    <testcase name="Debugging - Configuration Service Use cached debug configuration" time="0" classname="Use cached debug configuration">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - launch.json Completion Provider" timestamp="2021-11-08T22:03:09" tests="8" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/launch.json/completionProvider.unit.test.js" failures="0" time="0.002">
    <testcase name="Debugging - launch.json Completion Provider Activation will register the completion provider" time="0" classname="Activation will register the completion provider">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider Cannot provide completions for non launch.json files" time="0" classname="Cannot provide completions for non launch.json files">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider Cannot provide completions when there is no configurations section in json" time="0.001" classname="Cannot provide completions when there is no configurations section in json">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider Cannot provide completions when cursor position is not in configurations array" time="0" classname="Cannot provide completions when cursor position is not in configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider Cannot provide completions when cursor position is in an empty configurations array" time="0" classname="Cannot provide completions when cursor position is in an empty configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider No Completions for non launch.json" time="0.001" classname="No Completions for non launch.json">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider No Completions for files ending with launch.json" time="0" classname="No Completions for files ending with launch.json">
    </testcase>
    <testcase name="Debugging - launch.json Completion Provider Get Completions" time="0" classname="Get Completions">
    </testcase>
  </testsuite>
  <testsuite name="Interpreter Path Command" timestamp="2021-11-08T22:03:09" tests="4" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/launch.json/interpreterPathCommand.unit.test.js" failures="0" time="0.001">
    <testcase name="Interpreter Path Command Ensure command is registered with the correct callback handler" time="0" classname="Ensure command is registered with the correct callback handler">
    </testcase>
    <testcase name="Interpreter Path Command If `workspaceFolder` property exists in `args`, it is used to retrieve setting from config" time="0.001" classname="If `workspaceFolder` property exists in `args`, it is used to retrieve setting from config">
    </testcase>
    <testcase name="Interpreter Path Command If `args[1]` is defined, it is used to retrieve setting from config" time="0" classname="If `args[1]` is defined, it is used to retrieve setting from config">
    </testcase>
    <testcase name="Interpreter Path Command If neither of these exists, value of workspace folder is `undefined`" time="0" classname="If neither of these exists, value of workspace folder is `undefined`">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - launch.json Updater Service" timestamp="2021-11-08T22:03:09" tests="24" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/launch.json/updaterServer.unit.test.js" failures="0" time="0.005">
    <testcase name="Debugging - launch.json Updater Service Activation will register the required commands" time="0" classname="Activation will register the required commands">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Configuration Array is detected as being empty" time="0" classname="Configuration Array is detected as being empty">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Configuration Array is not empty" time="0.001" classname="Configuration Array is not empty">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Cursor is not positioned in the configurations array" time="0" classname="Cursor is not positioned in the configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Cursor is positioned in the empty configurations array" time="0" classname="Cursor is positioned in the empty configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Cursor is positioned before an item in the configurations array" time="0.001" classname="Cursor is positioned before an item in the configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Cursor is positioned before an item in the middle of the configurations array" time="0" classname="Cursor is positioned before an item in the middle of the configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Cursor is positioned after an item in the configurations array" time="0" classname="Cursor is positioned after an item in the configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Cursor is positioned after an item in the middle of the configurations array" time="0" classname="Cursor is positioned after an item in the middle of the configurations array">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Text to be inserted must be prefixed with a comma" time="0" classname="Text to be inserted must be prefixed with a comma">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Text to be inserted must not be prefixed with a comma (as a comma already exists)" time="0" classname="Text to be inserted must not be prefixed with a comma (as a comma already exists)">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Text to be inserted must be suffixed with a comma" time="0" classname="Text to be inserted must be suffixed with a comma">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Text to be inserted must not be prefixed nor suffixed with commas" time="0" classname="Text to be inserted must not be prefixed nor suffixed with commas">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service When inserting the debug config into the json file format the document" time="0.001" classname="When inserting the debug config into the json file format the document">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service No changes to configuration if there is not active document" time="0" classname="No changes to configuration if there is not active document">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service No changes to configuration if the active document is not same as the document passed in" time="0" classname="No changes to configuration if the active document is not same as the document passed in">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service No changes to configuration if cancellation token has been cancelled" time="0.001" classname="No changes to configuration if cancellation token has been cancelled">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service No changes to configuration if no configuration items are returned" time="0" classname="No changes to configuration if no configuration items are returned">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service Changes are made to the configuration" time="0" classname="Changes are made to the configuration">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service If cursor is at the begining of line 1 then there is no comma before cursor" time="0" classname="If cursor is at the begining of line 1 then there is no comma before cursor">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service If cursor is positioned after some text (not a comma) then detect this" time="0" classname="If cursor is positioned after some text (not a comma) then detect this">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service If cursor is positioned after a comma then detect this" time="0.001" classname="If cursor is positioned after a comma then detect this">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service If cursor is positioned in an empty line and previous line ends with comma, then detect this" time="0" classname="If cursor is positioned in an empty line and previous line ends with comma, then detect this">
    </testcase>
    <testcase name="Debugging - launch.json Updater Service If cursor is positioned in an empty line and previous line does not end with comma, then detect this" time="0" classname="If cursor is positioned in an empty line and previous line does not end with comma, then detect this">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider Django" timestamp="2021-11-08T22:03:09" tests="12" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/djangoLaunch.unit.test.js" failures="0" time="0.015000000000000003">
    <testcase name="Debugging - Configuration Provider Django getManagePyPath should return undefined if file doesn&apos;t exist" time="0" classname="getManagePyPath should return undefined if file doesn&apos;t exist">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django getManagePyPath should file path" time="0" classname="getManagePyPath should file path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Resolve variables (with resource)" time="0.012" classname="Resolve variables (with resource)">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Validation of path should return errors if path is undefined" time="0" classname="Validation of path should return errors if path is undefined">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Validation of path should return errors if path is empty" time="0" classname="Validation of path should return errors if path is empty">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Validation of path should return errors if resolved path is empty" time="0" classname="Validation of path should return errors if resolved path is empty">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Validation of path should return errors if resolved path doesn&apos;t exist" time="0" classname="Validation of path should return errors if resolved path doesn&apos;t exist">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Validation of path should return errors if resolved path is non-python" time="0.001" classname="Validation of path should return errors if resolved path is non-python">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Validation of path should return errors if resolved path is python" time="0" classname="Validation of path should return errors if resolved path is python">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Launch JSON with valid python path" time="0" classname="Launch JSON with valid python path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Launch JSON with selected managepy path" time="0.001" classname="Launch JSON with selected managepy path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Django Launch JSON with default managepy path" time="0.001" classname="Launch JSON with default managepy path">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider FastAPI" timestamp="2021-11-08T22:03:09" tests="4" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/fastapiLaunch.unit.test.js" failures="0" time="0.001">
    <testcase name="Debugging - Configuration Provider FastAPI getApplicationPath should return undefined if file doesn&apos;t exist" time="0.001" classname="getApplicationPath should return undefined if file doesn&apos;t exist">
    </testcase>
    <testcase name="Debugging - Configuration Provider FastAPI getApplicationPath should find path" time="0" classname="getApplicationPath should find path">
    </testcase>
    <testcase name="Debugging - Configuration Provider FastAPI Launch JSON with valid python path" time="0" classname="Launch JSON with valid python path">
    </testcase>
    <testcase name="Debugging - Configuration Provider FastAPI Launch JSON with selected app path" time="0" classname="Launch JSON with selected app path">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider File" timestamp="2021-11-08T22:03:09" tests="1" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/fileLaunch.unit.test.js" failures="0" time="0.001">
    <testcase name="Debugging - Configuration Provider File Launch JSON with default managepy path" time="0.001" classname="Launch JSON with default managepy path">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider Flask" timestamp="2021-11-08T22:03:09" tests="5" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/flaskLaunch.unit.test.js" failures="0" time="0.003">
    <testcase name="Debugging - Configuration Provider Flask getApplicationPath should return undefined if file doesn&apos;t exist" time="0" classname="getApplicationPath should return undefined if file doesn&apos;t exist">
    </testcase>
    <testcase name="Debugging - Configuration Provider Flask getApplicationPath should file path" time="0" classname="getApplicationPath should file path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Flask Launch JSON with valid python path" time="0.001" classname="Launch JSON with valid python path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Flask Launch JSON with selected app path" time="0.001" classname="Launch JSON with selected app path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Flask Launch JSON with default managepy path" time="0.001" classname="Launch JSON with default managepy path">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider Module" timestamp="2021-11-08T22:03:09" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/moduleLaunch.unit.test.js" failures="0" time="0.002">
    <testcase name="Debugging - Configuration Provider Module Launch JSON with default module name" time="0.001" classname="Launch JSON with default module name">
    </testcase>
    <testcase name="Debugging - Configuration Provider Module Launch JSON with selected module name" time="0.001" classname="Launch JSON with selected module name">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider File" timestamp="2021-11-08T22:03:09" tests="1" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/pidAttach.unit.test.js" failures="0" time="0.001">
    <testcase name="Debugging - Configuration Provider File Launch JSON with default process id" time="0.001" classname="Launch JSON with default process id">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider Factory" timestamp="2021-11-08T22:03:09" tests="8" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/providerFactory.unit.test.js" failures="0" time="0.001">
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for launchFile" time="0" classname="Configuration Provider for launchFile">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for remoteAttach" time="0" classname="Configuration Provider for remoteAttach">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for launchDjango" time="0" classname="Configuration Provider for launchDjango">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for launchFastAPI" time="0" classname="Configuration Provider for launchFastAPI">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for launchFlask" time="0" classname="Configuration Provider for launchFlask">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for launchModule" time="0" classname="Configuration Provider for launchModule">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for launchPyramid" time="0" classname="Configuration Provider for launchPyramid">
    </testcase>
    <testcase name="Debugging - Configuration Provider Factory Configuration Provider for pidAttach" time="0.001" classname="Configuration Provider for pidAttach">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider Pyramid" timestamp="2021-11-08T22:03:09" tests="12" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/pyramidLaunch.unit.test.js" failures="0" time="0.019000000000000003">
    <testcase name="Debugging - Configuration Provider Pyramid getDevelopmentIniPath should return undefined if file doesn&apos;t exist" time="0.001" classname="getDevelopmentIniPath should return undefined if file doesn&apos;t exist">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid getDevelopmentIniPath should file path" time="0.001" classname="getDevelopmentIniPath should file path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Resolve variables (with resource)" time="0.015" classname="Resolve variables (with resource)">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Validation of path should return errors if path is undefined" time="0" classname="Validation of path should return errors if path is undefined">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Validation of path should return errors if path is empty" time="0" classname="Validation of path should return errors if path is empty">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path is empty" time="0" classname="Validation of path should return errors if resolved path is empty">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path doesn&apos;t exist" time="0" classname="Validation of path should return errors if resolved path doesn&apos;t exist">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path is non-ini" time="0" classname="Validation of path should return errors if resolved path is non-ini">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path is ini" time="0" classname="Validation of path should return errors if resolved path is ini">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Launch JSON with valid ini path" time="0" classname="Launch JSON with valid ini path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Launch JSON with selected ini path" time="0.001" classname="Launch JSON with selected ini path">
    </testcase>
    <testcase name="Debugging - Configuration Provider Pyramid Launch JSON with default ini path" time="0.001" classname="Launch JSON with default ini path">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Configuration Provider Remote Attach" timestamp="2021-11-08T22:03:09" tests="6" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/providers/remoteAttach.unit.test.js" failures="0" time="0.004">
    <testcase name="Debugging - Configuration Provider Remote Attach Configure port will display prompt" time="0.001" classname="Configure port will display prompt">
    </testcase>
    <testcase name="Debugging - Configuration Provider Remote Attach Configure port will default to 5678 if entered value is not a number" time="0" classname="Configure port will default to 5678 if entered value is not a number">
    </testcase>
    <testcase name="Debugging - Configuration Provider Remote Attach Configure port will default to 5678" time="0.001" classname="Configure port will default to 5678">
    </testcase>
    <testcase name="Debugging - Configuration Provider Remote Attach Configure port will use user selected value" time="0.002" classname="Configure port will use user selected value">
    </testcase>
    <testcase name="Debugging - Configuration Provider Remote Attach Launch JSON with default host name" time="0" classname="Launch JSON with default host name">
    </testcase>
    <testcase name="Debugging - Configuration Provider Remote Attach Launch JSON with user defined host name" time="0" classname="Launch JSON with user defined host name">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver attach, OS = Windows" timestamp="2021-11-08T22:03:09" tests="40" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/attach.unit.test.js" failures="0" time="0.04">
    <testcase name="Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed with a Workspace Folder and active file" time="0.001" classname="Defaults should be returned when an empty object is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file" time="0" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file" time="0" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Default host should not be added if connect is available." time="0" classname="Default host should not be added if connect is available.">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Default host should not be added if listen is available." time="0.001" classname="Default host should not be added if listen is available.">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure &apos;localRoot&apos; is left unaltered" time="0.001" classname="Ensure &apos;localRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;localhost&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;" time="0.001" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;" time="0.001" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;::1&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;" time="0.001" classname="Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;" time="0" classname="Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used" time="0.014" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used" time="0.014" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure &apos;remoteRoot&apos; is left unaltered" time="0" classname="Ensure &apos;remoteRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure &apos;port&apos; is left unaltered" time="0.002" classname="Ensure &apos;port&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure &apos;debugOptions&apos; are left unaltered" time="0.001" classname="Ensure &apos;debugOptions&apos; are left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Windows Ensure justMyCode property is correctly derived from debugStdLib" time="0.001" classname="Ensure justMyCode property is correctly derived from debugStdLib">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver attach, OS = OSX" timestamp="2021-11-08T22:03:09" tests="40" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/attach.unit.test.js" failures="0" time="0.092">
    <testcase name="Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed with a Workspace Folder and active file" time="0" classname="Defaults should be returned when an empty object is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Default host should not be added if connect is available." time="0.001" classname="Default host should not be added if connect is available.">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Default host should not be added if listen is available." time="0.001" classname="Default host should not be added if listen is available.">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure &apos;localRoot&apos; is left unaltered" time="0.001" classname="Ensure &apos;localRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;localhost&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos; and with existing path mappings" time="0.014" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;LOCALHOST&apos;" time="0.001" classname="Ensure path mappings are automatically added when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos; and with existing path mappings" time="0.014" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos; and with existing path mappings" time="0.013" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;" time="0.001" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;::1&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos; and with existing path mappings" time="0.013" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;" time="0.001" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;" time="0" classname="Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;" time="0" classname="Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used" time="0.013" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used" time="0.014" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure &apos;remoteRoot&apos; is left unaltered" time="0" classname="Ensure &apos;remoteRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure &apos;port&apos; is left unaltered" time="0.001" classname="Ensure &apos;port&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure &apos;debugOptions&apos; are left unaltered" time="0" classname="Ensure &apos;debugOptions&apos; are left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = OSX Ensure justMyCode property is correctly derived from debugStdLib" time="0" classname="Ensure justMyCode property is correctly derived from debugStdLib">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver attach, OS = Linux" timestamp="2021-11-08T22:03:09" tests="40" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/attach.unit.test.js" failures="0" time="0.089">
    <testcase name="Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed with a Workspace Folder and active file" time="0" classname="Defaults should be returned when an empty object is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file" time="0.001" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file" time="0" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file" time="0" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file" time="0" classname="Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Default host should not be added if connect is available." time="0" classname="Default host should not be added if connect is available.">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Default host should not be added if listen is available." time="0" classname="Default host should not be added if listen is available.">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure &apos;localRoot&apos; is left unaltered" time="0.001" classname="Ensure &apos;localRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;localhost&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos; and with existing path mappings" time="0.013" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;localhost&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos; and with existing path mappings" time="0.014" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;LOCALHOST&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;LOCALHOST&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;LOCALHOST&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;" time="0.001" classname="Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos; and with existing path mappings" time="0.014" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;127.0.0.1&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;" time="0.001" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;::1&apos;" time="0" classname="Ensure path mappings are automatically added when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos;" time="0" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos; and with existing path mappings" time="0.014" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when host is &apos;::1&apos; and with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;" time="0" classname="Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;" time="0" classname="Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;" time="0.001" classname="Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used" time="0.014" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used" time="0.014" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure &apos;remoteRoot&apos; is left unaltered" time="0" classname="Ensure &apos;remoteRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure &apos;port&apos; is left unaltered" time="0" classname="Ensure &apos;port&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure &apos;debugOptions&apos; are left unaltered" time="0" classname="Ensure &apos;debugOptions&apos; are left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver attach, OS = Linux Ensure justMyCode property is correctly derived from debugStdLib" time="0.001" classname="Ensure justMyCode property is correctly derived from debugStdLib">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver" timestamp="2021-11-08T22:03:10" tests="24" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/base.unit.test.js" failures="0" time="0.022">
    <testcase name="Debugging - Config Resolver Program should return filepath of active editor if file is python" time="0.001" classname="Program should return filepath of active editor if file is python">
    </testcase>
    <testcase name="Debugging - Config Resolver Program should return undefined if active file is not python" time="0.001" classname="Program should return undefined if active file is not python">
    </testcase>
    <testcase name="Debugging - Config Resolver Program should return undefined if there is no active editor" time="0" classname="Program should return undefined if there is no active editor">
    </testcase>
    <testcase name="Debugging - Config Resolver Should get workspace folder when workspace folder is provided" time="0" classname="Should get workspace folder when workspace folder is provided">
    </testcase>
    <testcase name="Debugging - Config Resolver Should get directory of active program when there are not workspace folders" time="0" classname="Should get directory of active program when there are not workspace folders">
    </testcase>
    <testcase name="Debugging - Config Resolver Should get directory of active program when there are 0 workspace folders" time="0" classname="Should get directory of active program when there are 0 workspace folders">
    </testcase>
    <testcase name="Debugging - Config Resolver Should return uri of workspace folder if there is only one workspace folder" time="0" classname="Should return uri of workspace folder if there is only one workspace folder">
    </testcase>
    <testcase name="Debugging - Config Resolver Should return uri of workspace folder corresponding to program if there is more than one workspace folder" time="0" classname="Should return uri of workspace folder corresponding to program if there is more than one workspace folder">
    </testcase>
    <testcase name="Debugging - Config Resolver Should return undefined when program does not belong to any of the workspace folders" time="0.001" classname="Should return undefined when program does not belong to any of the workspace folders">
    </testcase>
    <testcase name="Debugging - Config Resolver Do nothing if debug configuration is undefined" time="0" classname="Do nothing if debug configuration is undefined">
    </testcase>
    <testcase name="Debugging - Config Resolver pythonPath in debug config must point to pythonPath in settings if pythonPath in config is not set" time="0.01" classname="pythonPath in debug config must point to pythonPath in settings if pythonPath in config is not set">
    </testcase>
    <testcase name="Debugging - Config Resolver pythonPath in debug config must point to pythonPath in settings  if pythonPath in config is ${command:python.interpreterPath}" time="0.009" classname="pythonPath in debug config must point to pythonPath in settings  if pythonPath in config is ${command:python.interpreterPath}">
    </testcase>
    <testcase name="Debugging - Config Resolver Local host = true for localhost" time="0" classname="Local host = true for localhost">
    </testcase>
    <testcase name="Debugging - Config Resolver Local host = true for 127.0.0.1" time="0" classname="Local host = true for 127.0.0.1">
    </testcase>
    <testcase name="Debugging - Config Resolver Local host = true for ::1" time="0" classname="Local host = true for ::1">
    </testcase>
    <testcase name="Debugging - Config Resolver Local host = false for 127.0.0.2" time="0" classname="Local host = false for 127.0.0.2">
    </testcase>
    <testcase name="Debugging - Config Resolver Local host = false for 156.1.2.3" time="0" classname="Local host = false for 156.1.2.3">
    </testcase>
    <testcase name="Debugging - Config Resolver Local host = false for ::2" time="0" classname="Local host = false for ::2">
    </testcase>
    <testcase name="Debugging - Config Resolver Is debugging fastapi=true" time="0" classname="Is debugging fastapi=true">
    </testcase>
    <testcase name="Debugging - Config Resolver Is debugging fastapi=false" time="0" classname="Is debugging fastapi=false">
    </testcase>
    <testcase name="Debugging - Config Resolver Is debugging fastapi=false when not defined" time="0" classname="Is debugging fastapi=false when not defined">
    </testcase>
    <testcase name="Debugging - Config Resolver Is debugging flask=true" time="0" classname="Is debugging flask=true">
    </testcase>
    <testcase name="Debugging - Config Resolver Is debugging flask=false" time="0" classname="Is debugging flask=false">
    </testcase>
    <testcase name="Debugging - Config Resolver Is debugging flask=false when not defined" time="0" classname="Is debugging flask=false when not defined">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver Launch, OS = Windows" timestamp="2021-11-08T22:03:10" tests="43" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/launch.unit.test.js" failures="0" time="0.6930000000000002">
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Defaults should be returned when an empty object is passed with a Workspace Folder and active file" time="0.012" classname="Defaults should be returned when an empty object is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file" time="0.011" classname="Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file" time="0.012" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file" time="0.012" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file" time="0.011" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file" time="0.011" classname="Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure &apos;port&apos; is left unaltered" time="0.011" classname="Ensure &apos;port&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure &apos;localRoot&apos; is left unaltered" time="0.01" classname="Ensure &apos;localRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure &apos;remoteRoot&apos; is left unaltered" time="0.01" classname="Ensure &apos;remoteRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; are not used" time="0.011" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; are not used">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure non-empty path mappings are used" time="0.021" classname="Ensure non-empty path mappings are used">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure replacement in path mappings happens" time="0.021" classname="Ensure replacement in path mappings happens">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure path mappings are not automatically added if missing" time="0.011" classname="Ensure path mappings are not automatically added if missing">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure path mappings are not automatically added if empty" time="0.013" classname="Ensure path mappings are not automatically added if empty">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure path mappings are not automatically added to existing" time="0.021" classname="Ensure path mappings are not automatically added to existing">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive" time="0.02" classname="Ensure local path mappings are not modified when not pointing to a local drive">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure `${command:python.interpreterPath}` is replaced with actual pythonPath" time="0.012" classname="Ensure `${command:python.interpreterPath}` is replaced with actual pythonPath">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure `${command:python.interpreterPath}` substitution is properly handled" time="0.012" classname="Ensure `${command:python.interpreterPath}` substitution is properly handled">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure hardcoded pythonPath is left unaltered" time="0.012" classname="Ensure hardcoded pythonPath is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure hardcoded &quot;python&quot; is left unaltered" time="0.012" classname="Ensure hardcoded &quot;python&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure hardcoded &quot;debugAdapterPython&quot; is left unaltered" time="0.013" classname="Ensure hardcoded &quot;debugAdapterPython&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure hardcoded &quot;debugLauncherPython&quot; is left unaltered" time="0.012" classname="Ensure hardcoded &quot;debugLauncherPython&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test defaults of debugger" time="0.013" classname="Test defaults of debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test defaults of python debugger" time="0" classname="Test defaults of python debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test overriding defaults of debugger" time="0.013" classname="Test overriding defaults of debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure justMyCode property is correctly derived from debugStdLib" time="0.098" classname="Ensure justMyCode property is correctly derived from debugStdLib">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Ensure redirectOutput property is correctly derived from console type" time="0.091" classname="Ensure redirectOutput property is correctly derived from console type">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test fixFilePathCase" time="0.012" classname="Test fixFilePathCase">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Jinja added for Pyramid" time="0.013" classname="Jinja added for Pyramid">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Auto detect flask debugging" time="0.012" classname="Auto detect flask debugging">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test validation of Python Path when launching debugger (with invalid &quot;python&quot;)" time="0.012" classname="Test validation of Python Path when launching debugger (with invalid &quot;python&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test validation of Python Path when launching debugger (with invalid &quot;debugLauncherPython&quot;)" time="0.012" classname="Test validation of Python Path when launching debugger (with invalid &quot;debugLauncherPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test validation of Python Path when launching debugger (with invalid &quot;debugAdapterPython&quot;)" time="0.011" classname="Test validation of Python Path when launching debugger (with invalid &quot;debugAdapterPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Test validation of Python Path when launching debugger (with valid &quot;python/debugAdapterPython/debugLauncherPython&quot;)" time="0.013" classname="Test validation of Python Path when launching debugger (with valid &quot;python/debugAdapterPython/debugLauncherPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Resolve path to envFile" time="0.026" classname="Resolve path to envFile">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Must not contain Sub Process when not specified(launch)" time="0.013" classname="Must not contain Sub Process when not specified(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Must not contain Sub Process setting = false(launch)" time="0.013" classname="Must not contain Sub Process setting = false(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Must not contain Sub Process setting = true(launch)" time="0.012" classname="Must not contain Sub Process setting = true(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Must not contain Sub Process when not specified(attach)" time="0.014" classname="Must not contain Sub Process when not specified(attach)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Must not contain Sub Process setting = false(attach)" time="0.012" classname="Must not contain Sub Process setting = false(attach)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Windows Must not contain Sub Process setting = true(attach)" time="0.012" classname="Must not contain Sub Process setting = true(attach)">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver Launch, OS = OSX" timestamp="2021-11-08T22:03:10" tests="43" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/launch.unit.test.js" failures="0" time="0.6340000000000001">
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Defaults should be returned when an empty object is passed with a Workspace Folder and active file" time="0.012" classname="Defaults should be returned when an empty object is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file" time="0.011" classname="Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file" time="0.011" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file" time="0.01" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file" time="0.012" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file" time="0.018" classname="Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure &apos;port&apos; is left unaltered" time="0.011" classname="Ensure &apos;port&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure &apos;localRoot&apos; is left unaltered" time="0.011" classname="Ensure &apos;localRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure &apos;remoteRoot&apos; is left unaltered" time="0.012" classname="Ensure &apos;remoteRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; are not used" time="0.011" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; are not used">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure non-empty path mappings are used" time="0.02" classname="Ensure non-empty path mappings are used">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure replacement in path mappings happens" time="0.019" classname="Ensure replacement in path mappings happens">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure path mappings are not automatically added if missing" time="0.012" classname="Ensure path mappings are not automatically added if missing">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure path mappings are not automatically added if empty" time="0.01" classname="Ensure path mappings are not automatically added if empty">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure path mappings are not automatically added to existing" time="0.02" classname="Ensure path mappings are not automatically added to existing">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure drive letter is not lower cased for local path mappings on non-Windows when with existing path mappings" time="0.02" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive" time="0.02" classname="Ensure local path mappings are not modified when not pointing to a local drive">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure `${command:python.interpreterPath}` is replaced with actual pythonPath" time="0.01" classname="Ensure `${command:python.interpreterPath}` is replaced with actual pythonPath">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure `${command:python.interpreterPath}` substitution is properly handled" time="0.01" classname="Ensure `${command:python.interpreterPath}` substitution is properly handled">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure hardcoded pythonPath is left unaltered" time="0.01" classname="Ensure hardcoded pythonPath is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure hardcoded &quot;python&quot; is left unaltered" time="0.01" classname="Ensure hardcoded &quot;python&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure hardcoded &quot;debugAdapterPython&quot; is left unaltered" time="0.01" classname="Ensure hardcoded &quot;debugAdapterPython&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure hardcoded &quot;debugLauncherPython&quot; is left unaltered" time="0.012" classname="Ensure hardcoded &quot;debugLauncherPython&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test defaults of debugger" time="0.013" classname="Test defaults of debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test defaults of python debugger" time="0" classname="Test defaults of python debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test overriding defaults of debugger" time="0.011" classname="Test overriding defaults of debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure justMyCode property is correctly derived from debugStdLib" time="0.078" classname="Ensure justMyCode property is correctly derived from debugStdLib">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Ensure redirectOutput property is correctly derived from console type" time="0.076" classname="Ensure redirectOutput property is correctly derived from console type">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test fixFilePathCase" time="0.009" classname="Test fixFilePathCase">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Jinja added for Pyramid" time="0.009" classname="Jinja added for Pyramid">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Auto detect flask debugging" time="0.01" classname="Auto detect flask debugging">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test validation of Python Path when launching debugger (with invalid &quot;python&quot;)" time="0.009" classname="Test validation of Python Path when launching debugger (with invalid &quot;python&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test validation of Python Path when launching debugger (with invalid &quot;debugLauncherPython&quot;)" time="0.009" classname="Test validation of Python Path when launching debugger (with invalid &quot;debugLauncherPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test validation of Python Path when launching debugger (with invalid &quot;debugAdapterPython&quot;)" time="0.009" classname="Test validation of Python Path when launching debugger (with invalid &quot;debugAdapterPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Test validation of Python Path when launching debugger (with valid &quot;python/debugAdapterPython/debugLauncherPython&quot;)" time="0.01" classname="Test validation of Python Path when launching debugger (with valid &quot;python/debugAdapterPython/debugLauncherPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Resolve path to envFile" time="0.022" classname="Resolve path to envFile">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Must not contain Sub Process when not specified(launch)" time="0.011" classname="Must not contain Sub Process when not specified(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Must not contain Sub Process setting = false(launch)" time="0.012" classname="Must not contain Sub Process setting = false(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Must not contain Sub Process setting = true(launch)" time="0.011" classname="Must not contain Sub Process setting = true(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Must not contain Sub Process when not specified(attach)" time="0.011" classname="Must not contain Sub Process when not specified(attach)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Must not contain Sub Process setting = false(attach)" time="0.011" classname="Must not contain Sub Process setting = false(attach)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = OSX Must not contain Sub Process setting = true(attach)" time="0.011" classname="Must not contain Sub Process setting = true(attach)">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Config Resolver Launch, OS = Linux" timestamp="2021-11-08T22:03:11" tests="43" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/configuration/resolvers/launch.unit.test.js" failures="0" time="0.6160000000000001">
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Defaults should be returned when an empty object is passed with a Workspace Folder and active file" time="0.01" classname="Defaults should be returned when an empty object is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file" time="0.011" classname="Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file" time="0.011" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file" time="0.01" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file" time="0.011" classname="Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file" time="0.011" classname="Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure &apos;port&apos; is left unaltered" time="0.01" classname="Ensure &apos;port&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure &apos;localRoot&apos; is left unaltered" time="0.011" classname="Ensure &apos;localRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure &apos;remoteRoot&apos; is left unaltered" time="0.01" classname="Ensure &apos;remoteRoot&apos; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; are not used" time="0.011" classname="Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; are not used">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure non-empty path mappings are used" time="0.02" classname="Ensure non-empty path mappings are used">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure replacement in path mappings happens" time="0.02" classname="Ensure replacement in path mappings happens">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure path mappings are not automatically added if missing" time="0.01" classname="Ensure path mappings are not automatically added if missing">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure path mappings are not automatically added if empty" time="0.014" classname="Ensure path mappings are not automatically added if empty">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure path mappings are not automatically added to existing" time="0.019" classname="Ensure path mappings are not automatically added to existing">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure drive letter is not lower cased for local path mappings on non-Windows when with existing path mappings" time="0.019" classname="Ensure drive letter is not lower cased for local path mappings on non-Windows when with existing path mappings">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive" time="0.019" classname="Ensure local path mappings are not modified when not pointing to a local drive">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure `${command:python.interpreterPath}` is replaced with actual pythonPath" time="0.01" classname="Ensure `${command:python.interpreterPath}` is replaced with actual pythonPath">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure `${command:python.interpreterPath}` substitution is properly handled" time="0.01" classname="Ensure `${command:python.interpreterPath}` substitution is properly handled">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure hardcoded pythonPath is left unaltered" time="0.01" classname="Ensure hardcoded pythonPath is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure hardcoded &quot;python&quot; is left unaltered" time="0.01" classname="Ensure hardcoded &quot;python&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure hardcoded &quot;debugAdapterPython&quot; is left unaltered" time="0.01" classname="Ensure hardcoded &quot;debugAdapterPython&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure hardcoded &quot;debugLauncherPython&quot; is left unaltered" time="0.01" classname="Ensure hardcoded &quot;debugLauncherPython&quot; is left unaltered">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test defaults of debugger" time="0.01" classname="Test defaults of debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test defaults of python debugger" time="0" classname="Test defaults of python debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test overriding defaults of debugger" time="0.01" classname="Test overriding defaults of debugger">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure justMyCode property is correctly derived from debugStdLib" time="0.076" classname="Ensure justMyCode property is correctly derived from debugStdLib">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Ensure redirectOutput property is correctly derived from console type" time="0.077" classname="Ensure redirectOutput property is correctly derived from console type">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test fixFilePathCase" time="0.009" classname="Test fixFilePathCase">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Jinja added for Pyramid" time="0.009" classname="Jinja added for Pyramid">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Auto detect flask debugging" time="0.009" classname="Auto detect flask debugging">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test validation of Python Path when launching debugger (with invalid &quot;python&quot;)" time="0.01" classname="Test validation of Python Path when launching debugger (with invalid &quot;python&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test validation of Python Path when launching debugger (with invalid &quot;debugLauncherPython&quot;)" time="0.012" classname="Test validation of Python Path when launching debugger (with invalid &quot;debugLauncherPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test validation of Python Path when launching debugger (with invalid &quot;debugAdapterPython&quot;)" time="0.009" classname="Test validation of Python Path when launching debugger (with invalid &quot;debugAdapterPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Test validation of Python Path when launching debugger (with valid &quot;python/debugAdapterPython/debugLauncherPython&quot;)" time="0.01" classname="Test validation of Python Path when launching debugger (with valid &quot;python/debugAdapterPython/debugLauncherPython&quot;)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Resolve path to envFile" time="0.021" classname="Resolve path to envFile">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Must not contain Sub Process when not specified(launch)" time="0.011" classname="Must not contain Sub Process when not specified(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Must not contain Sub Process setting = false(launch)" time="0.01" classname="Must not contain Sub Process setting = false(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Must not contain Sub Process setting = true(launch)" time="0.012" classname="Must not contain Sub Process setting = true(launch)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Must not contain Sub Process when not specified(attach)" time="0.011" classname="Must not contain Sub Process when not specified(attach)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Must not contain Sub Process setting = false(attach)" time="0.012" classname="Must not contain Sub Process setting = false(attach)">
    </testcase>
    <testcase name="Debugging - Config Resolver Launch, OS = Linux Must not contain Sub Process setting = true(attach)" time="0.011" classname="Must not contain Sub Process setting = true(attach)">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - commands" timestamp="2021-11-08T22:03:12" tests="2" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/debugCommands.unit.test.js" failures="0" time="0.001">
    <testcase name="Debugging - commands Test registering debug file command" time="0" classname="Test registering debug file command">
    </testcase>
    <testcase name="Debugging - commands Test running debug file command" time="0.001" classname="Test running debug file command">
    </testcase>
  </testsuite>
  <testsuite name="Debug - Child Process" timestamp="2021-11-08T22:03:12" tests="5" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/hooks/childProcessAttachHandler.unit.test.js" failures="0" time="0.001">
    <testcase name="Debug - Child Process Do not attach if the event is undefined" time="0" classname="Do not attach if the event is undefined">
    </testcase>
    <testcase name="Debug - Child Process Do not attach to child process if event is invalid" time="0" classname="Do not attach to child process if event is invalid">
    </testcase>
    <testcase name="Debug - Child Process Do not attach to child process if ptvsd_attach event is invalid" time="0.001" classname="Do not attach to child process if ptvsd_attach event is invalid">
    </testcase>
    <testcase name="Debug - Child Process Do not attach to child process if debugpy_attach event is invalid" time="0" classname="Do not attach to child process if debugpy_attach event is invalid">
    </testcase>
    <testcase name="Debug - Child Process Exceptions are not bubbled up if exceptions are thrown" time="0" classname="Exceptions are not bubbled up if exceptions are thrown">
    </testcase>
  </testsuite>
  <testsuite name="Debug - Attach to Child Process" timestamp="2021-11-08T22:03:12" tests="7" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/hooks/childProcessAttachService.unit.test.js" failures="0" time="0.001">
    <testcase name="Debug - Attach to Child Process Message is not displayed if debugger is launched" time="0" classname="Message is not displayed if debugger is launched">
    </testcase>
    <testcase name="Debug - Attach to Child Process Message is displayed if debugger is not launched" time="0" classname="Message is displayed if debugger is not launched">
    </testcase>
    <testcase name="Debug - Attach to Child Process Use correct workspace folder" time="0" classname="Use correct workspace folder">
    </testcase>
    <testcase name="Debug - Attach to Child Process Use empty workspace folder if right one is not found" time="0" classname="Use empty workspace folder if right one is not found">
    </testcase>
    <testcase name="Debug - Attach to Child Process Validate debug config is passed as is" time="0" classname="Validate debug config is passed as is">
    </testcase>
    <testcase name="Debug - Attach to Child Process Pass data as is if data is attach debug configuration" time="0" classname="Pass data as is if data is attach debug configuration">
    </testcase>
    <testcase name="Debug - Attach to Child Process Validate debug config when parent/root parent was attached" time="0.001" classname="Validate debug config when parent/root parent was attached">
    </testcase>
  </testsuite>
  <testsuite name="Debugging - Service Registry" timestamp="2021-11-08T22:03:12" tests="1" file="/home/don/development/vsc/vscode-python/out/test/debugger/extension/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Debugging - Service Registry Registrations" time="0" classname="Registrations">
    </testcase>
  </testsuite>
  <testsuite name="Formatting - Test Arguments" timestamp="2021-11-08T22:03:12" tests="6" file="/home/don/development/vsc/vscode-python/out/test/format/formatter.unit.test.js" failures="0" time="0.004">
    <testcase name="Formatting - Test Arguments Ensure blackPath and args used to launch the formatter" time="0" classname="Ensure blackPath and args used to launch the formatter">
    </testcase>
    <testcase name="Formatting - Test Arguments Ensure black modulename and args used to launch the formatter" time="0" classname="Ensure black modulename and args used to launch the formatter">
    </testcase>
    <testcase name="Formatting - Test Arguments Ensure autopep8path and args used to launch the formatter" time="0.001" classname="Ensure autopep8path and args used to launch the formatter">
    </testcase>
    <testcase name="Formatting - Test Arguments Ensure autpep8 modulename and args used to launch the formatter" time="0.001" classname="Ensure autpep8 modulename and args used to launch the formatter">
    </testcase>
    <testcase name="Formatting - Test Arguments Ensure yapfpath and args used to launch the formatter" time="0.001" classname="Ensure yapfpath and args used to launch the formatter">
    </testcase>
    <testcase name="Formatting - Test Arguments Ensure yapf modulename and args used to launch the formatter" time="0.001" classname="Ensure yapf modulename and args used to launch the formatter">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters Activation - Python Environment Variables" timestamp="2021-11-08T22:03:12" tests="0" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Without a resource" timestamp="2021-11-08T22:03:12" tests="1" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Unknown os will return empty variables" time="0" classname="Unknown os will return empty variables">
    </testcase>
  </testsuite>
  <testsuite name="Windows" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.005">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Validate command used to activation and printing env vars" time="0.001" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Validate env Vars used to activation and printing env vars" time="0.001" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Cache Variables" time="0.001" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Cache Variables get cleared when changing interpreter" time="0" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Windows Cache Variables get cleared when changing env variables file" time="0.001" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="OSX" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.003">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Validate env Vars used to activation and printing env vars" time="0.001" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Use current process variables if there are no custom variables" time="0" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Cache Variables get cleared when changing interpreter" time="0.001" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource OSX Cache Variables get cleared when changing env variables file" time="0.001" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="Linux" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.004">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Validate env Vars used to activation and printing env vars" time="0.001" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Return parsed variables" time="0.001" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Cache Variables get cleared when changing interpreter" time="0" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource Linux Cache Variables get cleared when changing env variables file" time="0.001" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="Without a resource and an interpreter" timestamp="2021-11-08T22:03:12" tests="1" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Unknown os will return empty variables" time="0" classname="Unknown os will return empty variables">
    </testcase>
  </testsuite>
  <testsuite name="Windows" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.003">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Error must be swallowed when activation fails" time="0.001" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Cache Variables" time="0.001" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Cache Variables get cleared when changing interpreter" time="0" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Windows Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="OSX" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.003">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Return parsed variables" time="0.001" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Cache Variables get cleared when changing interpreter" time="0.001" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter OSX Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="Linux" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.002">
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux getEnvironmentActivationShellCommands will be invoked" time="0.001" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Validate env Vars used to activation and printing env vars" time="0.001" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Use current process variables if there are no custom variables" time="0" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Cache Variables get cleared when changing interpreter" time="0" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables Without a resource and an interpreter Linux Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="With a resource" timestamp="2021-11-08T22:03:12" tests="1" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Unknown os will return empty variables" time="0" classname="Unknown os will return empty variables">
    </testcase>
  </testsuite>
  <testsuite name="Windows" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.004">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Validate command used to activation and printing env vars" time="0.001" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Return parsed variables" time="0.001" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Cache Variables get cleared when changing interpreter" time="0.001" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Windows Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="OSX" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.003">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Error must be swallowed when activation fails" time="0.001" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Cache Variables get cleared when changing interpreter" time="0.001" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource OSX Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="Linux" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.002">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Validate command used to activation and printing env vars" time="0.001" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Cache Variables get cleared when changing interpreter" time="0" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource Linux Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="With a resource and an interpreter" timestamp="2021-11-08T22:03:12" tests="1" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Unknown os will return empty variables" time="0" classname="Unknown os will return empty variables">
    </testcase>
  </testsuite>
  <testsuite name="Windows" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.003">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Cache Variables" time="0.001" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Cache Variables get cleared when changing interpreter" time="0" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Windows Cache Variables get cleared when changing env variables file" time="0.001" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="OSX" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.002">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Validate command used to activation and printing env vars" time="0.001" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Use current process variables if there are no custom variables" time="0" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Cache Variables get cleared when changing interpreter" time="0.001" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter OSX Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="Linux" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/activation/service.unit.test.js" failures="0" time="0.002">
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux getEnvironmentActivationShellCommands will be invoked" time="0" classname="getEnvironmentActivationShellCommands will be invoked">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Validate command used to activation and printing env vars" time="0" classname="Validate command used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Validate env Vars used to activation and printing env vars" time="0" classname="Validate env Vars used to activation and printing env vars">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Use current process variables if there are no custom variables" time="0.001" classname="Use current process variables if there are no custom variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Error must be swallowed when activation fails" time="0" classname="Error must be swallowed when activation fails">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Return parsed variables" time="0" classname="Return parsed variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Cache Variables" time="0" classname="Cache Variables">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Cache Variables get cleared when changing interpreter" time="0.001" classname="Cache Variables get cleared when changing interpreter">
    </testcase>
    <testcase name="Interpreters Activation - Python Environment Variables With a resource and an interpreter Linux Cache Variables get cleared when changing env variables file" time="0" classname="Cache Variables get cleared when changing env variables file">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters - Auto Selection" timestamp="2021-11-08T22:03:12" tests="13" file="/home/don/development/vsc/vscode-python/out/test/interpreters/autoSelection/index.unit.test.js" failures="0" time="0.003">
    <testcase name="Interpreters - Auto Selection Instance is registered in proxy" time="0" classname="Instance is registered in proxy">
    </testcase>
    <testcase name="Interpreters - Auto Selection Initialize the store" time="0" classname="Initialize the store">
    </testcase>
    <testcase name="Interpreters - Auto Selection Initializing the store would be executed once" time="0" classname="Initializing the store would be executed once">
    </testcase>
    <testcase name="Interpreters - Auto Selection Clear file stored in cache if it doesn&apos;t exist" time="0" classname="Clear file stored in cache if it doesn&apos;t exist">
    </testcase>
    <testcase name="Interpreters - Auto Selection Should not clear file stored in cache if it does exist" time="0" classname="Should not clear file stored in cache if it does exist">
    </testcase>
    <testcase name="Interpreters - Auto Selection Store interpreter info in state store when resource is undefined" time="0.001" classname="Store interpreter info in state store when resource is undefined">
    </testcase>
    <testcase name="Interpreters - Auto Selection Do not store global interpreter info in state store when resource is undefined and version is lower than one already in state" time="0.001" classname="Do not store global interpreter info in state store when resource is undefined and version is lower than one already in state">
    </testcase>
    <testcase name="Interpreters - Auto Selection Store global interpreter info in state store when resource is undefined and version is higher than one already in state" time="0.001" classname="Store global interpreter info in state store when resource is undefined and version is higher than one already in state">
    </testcase>
    <testcase name="Interpreters - Auto Selection Store global interpreter info in state store" time="0" classname="Store global interpreter info in state store">
    </testcase>
    <testcase name="Interpreters - Auto Selection Store interpreter info in state store when resource is defined" time="0" classname="Store interpreter info in state store when resource is defined">
    </testcase>
    <testcase name="Interpreters - Auto Selection Store workspace interpreter info in state store" time="0" classname="Store workspace interpreter info in state store">
    </testcase>
    <testcase name="Interpreters - Auto Selection Return undefined when we do not have a global value" time="0" classname="Return undefined when we do not have a global value">
    </testcase>
    <testcase name="Interpreters - Auto Selection Return global value if we do not have a matching value for the resource" time="0" classname="Return global value if we do not have a matching value for the resource">
    </testcase>
  </testsuite>
  <testsuite name="Test locator-based auto-selection method" timestamp="2021-11-08T22:03:12" tests="6" file="/home/don/development/vsc/vscode-python/out/test/interpreters/autoSelection/index.unit.test.js" failures="0" time="0.004">
    <testcase name="Interpreters - Auto Selection Test locator-based auto-selection method If there is a local environment select it" time="0" classname="If there is a local environment select it">
    </testcase>
    <testcase name="Interpreters - Auto Selection Test locator-based auto-selection method If there are no local environments, return a globally-installed interpreter" time="0" classname="If there are no local environments, return a globally-installed interpreter">
    </testcase>
    <testcase name="Interpreters - Auto Selection Test locator-based auto-selection method getAllInterpreters is called with ignoreCache at true if there is no value set in the workspace persistent state" time="0.001" classname="getAllInterpreters is called with ignoreCache at true if there is no value set in the workspace persistent state">
    </testcase>
    <testcase name="Interpreters - Auto Selection Test locator-based auto-selection method getAllInterpreters is called with ignoreCache at false if there is a value set in the workspace persistent state" time="0.001" classname="getAllInterpreters is called with ignoreCache at false if there is a value set in the workspace persistent state">
    </testcase>
    <testcase name="Interpreters - Auto Selection Test locator-based auto-selection method Telemetry event is sent with useCachedInterpreter set to false if auto-selection has not been run before" time="0.001" classname="Telemetry event is sent with useCachedInterpreter set to false if auto-selection has not been run before">
    </testcase>
    <testcase name="Interpreters - Auto Selection Test locator-based auto-selection method Telemetry event is sent with useCachedInterpreter set to true if auto-selection has been run before" time="0.001" classname="Telemetry event is sent with useCachedInterpreter set to true if auto-selection has been run before">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters - Auto Selection Proxy" timestamp="2021-11-08T22:03:12" tests="5" file="/home/don/development/vsc/vscode-python/out/test/interpreters/autoSelection/proxy.unit.test.js" failures="0" time="0">
    <testcase name="Interpreters - Auto Selection Proxy Change event is fired" time="0" classname="Change event is fired">
    </testcase>
    <testcase name="Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should return undefined when instance isn&apos;t registered (without a resource)" time="0" classname="getAutoSelectedInterpreter should return undefined when instance isn&apos;t registered (without a resource)">
    </testcase>
    <testcase name="Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should invoke instance method when instance isn&apos;t registered (without a resource)" time="0" classname="getAutoSelectedInterpreter should invoke instance method when instance isn&apos;t registered (without a resource)">
    </testcase>
    <testcase name="Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should return undefined when instance isn&apos;t registered (with a resource)" time="0" classname="getAutoSelectedInterpreter should return undefined when instance isn&apos;t registered (with a resource)">
    </testcase>
    <testcase name="Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should invoke instance method when instance isn&apos;t registered (with a resource)" time="0" classname="getAutoSelectedInterpreter should invoke instance method when instance isn&apos;t registered (with a resource)">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters Display" timestamp="2021-11-08T22:03:12" tests="6" file="/home/don/development/vsc/vscode-python/out/test/interpreters/display.unit.test.js" failures="0" time="0.002">
    <testcase name="Interpreters Display Statusbar must be created and have command name initialized" time="0" classname="Statusbar must be created and have command name initialized">
    </testcase>
    <testcase name="Interpreters Display Display name and tooltip must come from interpreter info" time="0.001" classname="Display name and tooltip must come from interpreter info">
    </testcase>
    <testcase name="Interpreters Display Log the output channel if displayed needs to be updated with a new interpreter" time="0" classname="Log the output channel if displayed needs to be updated with a new interpreter">
    </testcase>
    <testcase name="Interpreters Display If interpreter is not identified then tooltip should point to python Path" time="0" classname="If interpreter is not identified then tooltip should point to python Path">
    </testcase>
    <testcase name="Interpreters Display If interpreter file does not exist then update status bar accordingly" time="0" classname="If interpreter file does not exist then update status bar accordingly">
    </testcase>
    <testcase name="Interpreters Display Ensure we try to identify the active workspace when a resource is not provided " time="0.001" classname="Ensure we try to identify the active workspace when a resource is not provided ">
    </testcase>
  </testsuite>
  <testsuite name="Visibility" timestamp="2021-11-08T22:03:12" tests="5" file="/home/don/development/vsc/vscode-python/out/test/interpreters/display.unit.test.js" failures="0" time="0.005">
    <testcase name="Interpreters Display Visibility Status bar must be displayed" time="0" classname="Status bar must be displayed">
    </testcase>
    <testcase name="Interpreters Display Visibility Status bar must not be displayed if a filter is registered that needs it to be hidden" time="0.002" classname="Status bar must not be displayed if a filter is registered that needs it to be hidden">
    </testcase>
    <testcase name="Interpreters Display Visibility Status bar must not be displayed if both filters need it to be hidden" time="0.001" classname="Status bar must not be displayed if both filters need it to be hidden">
    </testcase>
    <testcase name="Interpreters Display Visibility Status bar must be displayed if both filter needs it to be displayed" time="0.001" classname="Status bar must be displayed if both filter needs it to be displayed">
    </testcase>
    <testcase name="Interpreters Display Visibility Status bar must hidden if a filter triggers need for status bar to be hidden" time="0.001" classname="Status bar must hidden if a filter triggers need for status bar to be hidden">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters - Display Progress" timestamp="2021-11-08T22:03:12" tests="3" file="/home/don/development/vsc/vscode-python/out/test/interpreters/display/progressDisplay.unit.test.js" failures="0" time="0.001">
    <testcase name="Interpreters - Display Progress Display discovering message when refreshing interpreters for the first time" time="0" classname="Display discovering message when refreshing interpreters for the first time">
    </testcase>
    <testcase name="Interpreters - Display Progress Display refreshing message when refreshing interpreters for the second time" time="0.001" classname="Display refreshing message when refreshing interpreters for the second time">
    </testcase>
    <testcase name="Interpreters - Display Progress Progress message is hidden when loading has completed" time="0" classname="Progress message is hidden when loading has completed">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters Display Helper" timestamp="2021-11-08T22:03:12" tests="8" file="/home/don/development/vsc/vscode-python/out/test/interpreters/helpers.unit.test.js" failures="0" time="0">
    <testcase name="Interpreters Display Helper getActiveWorkspaceUri should return undefined if there are no workspaces" time="0" classname="getActiveWorkspaceUri should return undefined if there are no workspaces">
    </testcase>
    <testcase name="Interpreters Display Helper getActiveWorkspaceUri should return the workspace if there is only one" time="0" classname="getActiveWorkspaceUri should return the workspace if there is only one">
    </testcase>
    <testcase name="Interpreters Display Helper getActiveWorkspaceUri should return undefined if we no active editor and have more than one workspace folder" time="0" classname="getActiveWorkspaceUri should return undefined if we no active editor and have more than one workspace folder">
    </testcase>
    <testcase name="Interpreters Display Helper getActiveWorkspaceUri should return undefined of the active editor does not belong to a workspace and if we have more than one workspace folder" time="0" classname="getActiveWorkspaceUri should return undefined of the active editor does not belong to a workspace and if we have more than one workspace folder">
    </testcase>
    <testcase name="Interpreters Display Helper getActiveWorkspaceUri should return workspace folder of the active editor if belongs to a workspace and if we have more than one workspace folder" time="0" classname="getActiveWorkspaceUri should return workspace folder of the active editor if belongs to a workspace and if we have more than one workspace folder">
    </testcase>
    <testcase name="Interpreters Display Helper getBestInterpreter should return undefined for an empty list" time="0" classname="getBestInterpreter should return undefined for an empty list">
    </testcase>
    <testcase name="Interpreters Display Helper getBestInterpreter should return first item if there is only one" time="0" classname="getBestInterpreter should return first item if there is only one">
    </testcase>
    <testcase name="Interpreters Display Helper getBestInterpreter should return interpreter with highest version" time="0" classname="getBestInterpreter should return interpreter with highest version">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters service" timestamp="2021-11-08T22:03:12" tests="8" file="/home/don/development/vsc/vscode-python/out/test/interpreters/interpreterService.unit.test.js" failures="0" time="0.006">
    <testcase name="Interpreters service Refresh invokes refresh of display (without a resource)" time="0.001" classname="Refresh invokes refresh of display (without a resource)">
    </testcase>
    <testcase name="Interpreters service Refresh invokes refresh of display (with a resource)" time="0" classname="Refresh invokes refresh of display (with a resource)">
    </testcase>
    <testcase name="Interpreters service Changes to active document should invoke interpreter.refresh method" time="0.001" classname="Changes to active document should invoke interpreter.refresh method">
    </testcase>
    <testcase name="Interpreters service If there is no active document then interpreter.refresh should not be invoked" time="0.001" classname="If there is no active document then interpreter.refresh should not be invoked">
    </testcase>
    <testcase name="Interpreters service If user belongs to Deprecate pythonPath experiment, register the correct handler" time="0.002" classname="If user belongs to Deprecate pythonPath experiment, register the correct handler">
    </testcase>
    <testcase name="Interpreters service If stored setting is an empty string, refresh the interpreter display" time="0.001" classname="If stored setting is an empty string, refresh the interpreter display">
    </testcase>
    <testcase name="Interpreters service If stored setting is not equal to current interpreter path setting, refresh the interpreter display" time="0" classname="If stored setting is not equal to current interpreter path setting, refresh the interpreter display">
    </testcase>
    <testcase name="Interpreters service If stored setting is equal to current interpreter path setting, do not refresh the interpreter display" time="0" classname="If stored setting is equal to current interpreter path setting, do not refresh the interpreter display">
    </testcase>
  </testsuite>
  <testsuite name="Python Path Settings Updater" timestamp="2021-11-08T22:03:12" tests="0" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="When not in Deprecate PythonPath experiment" timestamp="2021-11-08T22:03:12" tests="0" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Global" timestamp="2021-11-08T22:03:12" tests="2" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment Global Python Path should not be updated when current pythonPath is the same" time="0" classname="Python Path should not be updated when current pythonPath is the same">
    </testcase>
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment Global Python Path should be updated when current pythonPath is different" time="0" classname="Python Path should be updated when current pythonPath is different">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceFolder" timestamp="2021-11-08T22:03:12" tests="3" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment WorkspaceFolder Python Path should not be updated when current pythonPath is the same" time="0" classname="Python Path should not be updated when current pythonPath is the same">
    </testcase>
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment WorkspaceFolder Python Path should be updated when current pythonPath is different" time="0" classname="Python Path should be updated when current pythonPath is different">
    </testcase>
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment WorkspaceFolder Python Path should be truncated for worspace-relative paths" time="0" classname="Python Path should be truncated for worspace-relative paths">
    </testcase>
  </testsuite>
  <testsuite name="Workspace (multiroot scenario)" timestamp="2021-11-08T22:03:12" tests="3" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment Workspace (multiroot scenario) Python Path should not be updated when current pythonPath is the same" time="0" classname="Python Path should not be updated when current pythonPath is the same">
    </testcase>
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment Workspace (multiroot scenario) Python Path should be updated when current pythonPath is different" time="0" classname="Python Path should be updated when current pythonPath is different">
    </testcase>
    <testcase name="Python Path Settings Updater When not in Deprecate PythonPath experiment Workspace (multiroot scenario) Python Path should be truncated for workspace-relative paths" time="0" classname="Python Path should be truncated for workspace-relative paths">
    </testcase>
  </testsuite>
  <testsuite name="When in Deprecate PythonPath experiment" timestamp="2021-11-08T22:03:12" tests="0" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Global" timestamp="2021-11-08T22:03:12" tests="2" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment Global Python Path should not be updated when current pythonPath is the same" time="0" classname="Python Path should not be updated when current pythonPath is the same">
    </testcase>
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment Global Python Path should be updated when current pythonPath is different" time="0" classname="Python Path should be updated when current pythonPath is different">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceFolder" timestamp="2021-11-08T22:03:12" tests="3" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0.002">
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment WorkspaceFolder Python Path should not be updated when current pythonPath is the same" time="0.001" classname="Python Path should not be updated when current pythonPath is the same">
    </testcase>
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment WorkspaceFolder Python Path should be updated when current pythonPath is different" time="0" classname="Python Path should be updated when current pythonPath is different">
    </testcase>
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment WorkspaceFolder Python Path should be truncated for workspace-relative paths" time="0.001" classname="Python Path should be truncated for workspace-relative paths">
    </testcase>
  </testsuite>
  <testsuite name="Workspace (multiroot scenario)" timestamp="2021-11-08T22:03:12" tests="3" file="/home/don/development/vsc/vscode-python/out/test/interpreters/pythonPathUpdaterFactory.unit.test.js" failures="0" time="0">
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment Workspace (multiroot scenario) Python Path should not be updated when current pythonPath is the same" time="0" classname="Python Path should not be updated when current pythonPath is the same">
    </testcase>
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment Workspace (multiroot scenario) Python Path should be updated when current pythonPath is different" time="0" classname="Python Path should be updated when current pythonPath is different">
    </testcase>
    <testcase name="Python Path Settings Updater When in Deprecate PythonPath experiment Workspace (multiroot scenario) Python Path should be truncated for workspace-relative paths" time="0" classname="Python Path should be truncated for workspace-relative paths">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters - Service Registry" timestamp="2021-11-08T22:03:12" tests="1" file="/home/don/development/vsc/vscode-python/out/test/interpreters/serviceRegistry.unit.test.js" failures="0" time="0.001">
    <testcase name="Interpreters - Service Registry Registrations" time="0.001" classname="Registrations">
    </testcase>
  </testsuite>
  <testsuite name="Conda Inherit Env Prompt" timestamp="2021-11-08T22:03:12" tests="0" file="/home/don/development/vsc/vscode-python/out/test/interpreters/virtualEnvs/condaInheritEnvPrompt.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Method shouldShowPrompt()" timestamp="2021-11-08T22:03:12" tests="9" file="/home/don/development/vsc/vscode-python/out/test/interpreters/virtualEnvs/condaInheritEnvPrompt.unit.test.js" failures="0" time="0.003">
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if prompt has already been shown in the current session" time="0.001" classname="Returns false if prompt has already been shown in the current session">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if on Windows" time="0" classname="Returns false if on Windows">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if active interpreter is not of type Conda" time="0.001" classname="Returns false if active interpreter is not of type Conda">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if no active interpreter is present" time="0" classname="Returns false if no active interpreter is present">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if settings returned is `undefined`" time="0.001" classname="Returns false if settings returned is `undefined`">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if globalValue `terminal.integrated.inheritEnv` setting is set" time="0" classname="Returns false if globalValue `terminal.integrated.inheritEnv` setting is set">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if workspaceValue of `terminal.integrated.inheritEnv` setting is set" time="0" classname="Returns false if workspaceValue of `terminal.integrated.inheritEnv` setting is set">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns false if workspaceFolderValue of `terminal.integrated.inheritEnv` setting is set" time="0" classname="Returns false if workspaceFolderValue of `terminal.integrated.inheritEnv` setting is set">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method shouldShowPrompt() Returns true otherwise" time="0" classname="Returns true otherwise">
    </testcase>
  </testsuite>
  <testsuite name="Method activate()" timestamp="2021-11-08T22:03:12" tests="2" file="/home/don/development/vsc/vscode-python/out/test/interpreters/virtualEnvs/condaInheritEnvPrompt.unit.test.js" failures="0" time="0.003">
    <testcase name="Conda Inherit Env Prompt Method activate() Invokes initializeInBackground() in the background" time="0.003" classname="Invokes initializeInBackground() in the background">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method activate() Ignores errors raised by initializeInBackground()" time="0" classname="Ignores errors raised by initializeInBackground()">
    </testcase>
  </testsuite>
  <testsuite name="Method initializeInBackground()" timestamp="2021-11-08T22:03:12" tests="2" file="/home/don/development/vsc/vscode-python/out/test/interpreters/virtualEnvs/condaInheritEnvPrompt.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda Inherit Env Prompt Method initializeInBackground() Show prompt if shouldShowPrompt() returns true" time="0.001" classname="Show prompt if shouldShowPrompt() returns true">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method initializeInBackground() Do not show prompt if shouldShowPrompt() returns false" time="0" classname="Do not show prompt if shouldShowPrompt() returns false">
    </testcase>
  </testsuite>
  <testsuite name="Method promptAndUpdate()" timestamp="2021-11-08T22:03:12" tests="5" file="/home/don/development/vsc/vscode-python/out/test/interpreters/virtualEnvs/condaInheritEnvPrompt.unit.test.js" failures="0" time="0.004">
    <testcase name="Conda Inherit Env Prompt Method promptAndUpdate() Does not display prompt if it is disabled" time="0" classname="Does not display prompt if it is disabled">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method promptAndUpdate() Do nothing if no option is selected" time="0.001" classname="Do nothing if no option is selected">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method promptAndUpdate() Update terminal settings if `Yes` is selected" time="0.001" classname="Update terminal settings if `Yes` is selected">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method promptAndUpdate() Disable notification prompt if `No` is selected" time="0.001" classname="Disable notification prompt if `No` is selected">
    </testcase>
    <testcase name="Conda Inherit Env Prompt Method promptAndUpdate() Launch browser if `More info` option is selected" time="0.001" classname="Launch browser if `More info` option is selected">
    </testcase>
  </testsuite>
  <testsuite name="Virtual Environment Prompt" timestamp="2021-11-08T22:03:12" tests="6" file="/home/don/development/vsc/vscode-python/out/test/interpreters/virtualEnvs/virtualEnvPrompt.unit.test.js" failures="0" time="2.0079999999999996">
    <testcase name="Virtual Environment Prompt User is notified if interpreter exists and only python path to global interpreter is specified in settings" time="1.003" classname="User is notified if interpreter exists and only python path to global interpreter is specified in settings">
    </testcase>
    <testcase name="Virtual Environment Prompt When in experiment, user is notified if interpreter exists and only python path to global interpreter is specified in settings" time="1.003" classname="When in experiment, user is notified if interpreter exists and only python path to global interpreter is specified in settings">
    </testcase>
    <testcase name="Virtual Environment Prompt If user selects &apos;Yes&apos;, python path is updated" time="0" classname="If user selects &apos;Yes&apos;, python path is updated">
    </testcase>
    <testcase name="Virtual Environment Prompt If user selects &apos;No&apos;, no operation is performed" time="0.001" classname="If user selects &apos;No&apos;, no operation is performed">
    </testcase>
    <testcase name="Virtual Environment Prompt If user selects &apos;Do not show again&apos;, prompt is disabled" time="0.001" classname="If user selects &apos;Do not show again&apos;, prompt is disabled">
    </testcase>
    <testcase name="Virtual Environment Prompt If prompt is disabled, no notification is shown" time="0" classname="If prompt is disabled, no notification is shown">
    </testcase>
  </testsuite>
  <testsuite name="Language.CharacterStream" timestamp="2021-11-08T22:03:14" tests="5" file="/home/don/development/vsc/vscode-python/out/test/language/characterStream.unit.test.js" failures="0" time="0.002">
    <testcase name="Language.CharacterStream Iteration (string)" time="0.001" classname="Iteration (string)">
    </testcase>
    <testcase name="Language.CharacterStream Iteration (iterator)" time="0" classname="Iteration (iterator)">
    </testcase>
    <testcase name="Language.CharacterStream Positioning" time="0.001" classname="Positioning">
    </testcase>
    <testcase name="Language.CharacterStream Characters" time="0" classname="Characters">
    </testcase>
    <testcase name="Language.CharacterStream Skip" time="0" classname="Skip">
    </testcase>
  </testsuite>
  <testsuite name="Language Configuration" timestamp="2021-11-08T22:03:14" tests="0" file="/home/don/development/vsc/vscode-python/out/test/language/languageConfiguration.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="&quot;brackets&quot;" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/language/languageConfiguration.unit.test.js" failures="0" time="0">
    <testcase name="Language Configuration &quot;brackets&quot; brackets is not defined" time="0" classname="brackets is not defined">
    </testcase>
  </testsuite>
  <testsuite name="&quot;comments&quot;" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/language/languageConfiguration.unit.test.js" failures="0" time="0">
    <testcase name="Language Configuration &quot;comments&quot; comments is not defined" time="0" classname="comments is not defined">
    </testcase>
  </testsuite>
  <testsuite name="&quot;indentationRules&quot;" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/language/languageConfiguration.unit.test.js" failures="0" time="0">
    <testcase name="Language Configuration &quot;indentationRules&quot; indentationRules is not defined" time="0" classname="indentationRules is not defined">
    </testcase>
  </testsuite>
  <testsuite name="&quot;onEnterRules&quot;" timestamp="2021-11-08T22:03:14" tests="898" file="/home/don/development/vsc/vscode-python/out/test/language/languageConfiguration.unit.test.js" failures="0" time="0.01800000000000001">
    <testcase name="Language Configuration &quot;onEnterRules&quot; Multiline separator indent regex should not pick up strings with no multiline separator" time="0.001" classname="Multiline separator indent regex should not pick up strings with no multiline separator">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Multiline separator indent regex should not pick up strings with escaped characters" time="0" classname="Multiline separator indent regex should not pick up strings with escaped characters">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Multiline separator indent regex should pick up strings ending with a multiline separator" time="0" classname="Multiline separator indent regex should pick up strings ending with a multiline separator">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self):&quot;" time="0" classname="Check indent-on-enter for line &quot;async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self):&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async def test(self):&quot;" time="0.001" classname="Check indent-on-enter for line &quot;    async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async def test(self):&quot;" time="0" classname="Check dedent-on-enter for line &quot;    async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async def test(self):&quot;" time="0" classname="Check indent-on-enter for line &quot;   async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async def test(self):&quot;" time="0" classname="Check dedent-on-enter for line &quot;   async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		async def test(self):&quot;" time="0" classname="Check indent-on-enter for line &quot;		async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		async def test(self):&quot;" time="0" classname="Check dedent-on-enter for line &quot;		async def test(self):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xasync def test(self):&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xasync def test(self):&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  def test(self):&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;asyncx  def test(self):&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self) :&quot;" time="0" classname="Check indent-on-enter for line &quot;async def test(self) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self) :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def test(self) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self): &quot;" time="0" classname="Check indent-on-enter for line &quot;async def test(self): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self): &quot;" time="0" classname="Check dedent-on-enter for line &quot;async def test(self): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self):# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;async def test(self):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self):# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def test(self):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;async def test(self): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def test(self): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def :&quot;" time="0" classname="Check indent-on-enter for line &quot;async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async def :&quot;" time="0" classname="Check indent-on-enter for line &quot;    async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async def :&quot;" time="0" classname="Check indent-on-enter for line &quot;   async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		async def :&quot;" time="0" classname="Check indent-on-enter for line &quot;		async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		async def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		async def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xasync def :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xasync def :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  def :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;asyncx  def :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def  :&quot;" time="0" classname="Check indent-on-enter for line &quot;async def  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def : &quot;" time="0" classname="Check indent-on-enter for line &quot;async def : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def : &quot;" time="0" classname="Check dedent-on-enter for line &quot;async def : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;async def :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;async def : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;async def : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async :&quot;" time="0" classname="Check indent-on-enter for line &quot;async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async :&quot;" time="0" classname="Check indent-on-enter for line &quot;    async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async :&quot;" time="0" classname="Check indent-on-enter for line &quot;   async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		async :&quot;" time="0" classname="Check indent-on-enter for line &quot;		async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		async :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		async :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xasync :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xasync :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;asyncx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async  :&quot;" time="0" classname="Check indent-on-enter for line &quot;async  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async : &quot;" time="0" classname="Check indent-on-enter for line &quot;async : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async : &quot;" time="0" classname="Check dedent-on-enter for line &quot;async : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;async :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;async :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;async : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;async : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async for spam in bacon:&quot;" time="0" classname="Check indent-on-enter for line &quot;async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async for spam in bacon:&quot;" time="0" classname="Check dedent-on-enter for line &quot;async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async for spam in bacon:&quot;" time="0" classname="Check indent-on-enter for line &quot;    async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async for spam in bacon:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async for spam in bacon:&quot;" time="0" classname="Check indent-on-enter for line &quot;   async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async for spam in bacon:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		async for spam in bacon:&quot;" time="0" classname="Check indent-on-enter for line &quot;		async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		async for spam in bacon:&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;		async for spam in bacon:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xasync for spam in bacon:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xasync for spam in bacon:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  for spam in bacon:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;asyncx  for spam in bacon:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async for spam in bacon :&quot;" time="0" classname="Check indent-on-enter for line &quot;async for spam in bacon :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async for spam in bacon :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async for spam in bacon :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async for spam in bacon: &quot;" time="0" classname="Check indent-on-enter for line &quot;async for spam in bacon: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async for spam in bacon: &quot;" time="0" classname="Check dedent-on-enter for line &quot;async for spam in bacon: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async for spam in bacon:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;async for spam in bacon:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async for spam in bacon:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;async for spam in bacon:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async for spam in bacon: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;async for spam in bacon: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async for spam in bacon: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;async for spam in bacon: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context:&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context:&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async with context:&quot;" time="0" classname="Check indent-on-enter for line &quot;    async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async with context:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async with context:&quot;" time="0" classname="Check indent-on-enter for line &quot;   async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async with context:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		async with context:&quot;" time="0" classname="Check indent-on-enter for line &quot;		async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		async with context:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		async with context:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xasync with context:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xasync with context:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  with context:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;asyncx  with context:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context :&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context: &quot;" time="0" classname="Check indent-on-enter for line &quot;async with context: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context: &quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context in manager:&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context in manager:&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async with context in manager:&quot;" time="0" classname="Check indent-on-enter for line &quot;    async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async with context in manager:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async with context in manager:&quot;" time="0" classname="Check indent-on-enter for line &quot;   async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async with context in manager:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		async with context in manager:&quot;" time="0" classname="Check indent-on-enter for line &quot;		async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		async with context in manager:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		async with context in manager:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xasync with context in manager:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xasync with context in manager:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  with context in manager:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;asyncx  with context in manager:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context in manager :&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context in manager :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context in manager :&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context in manager :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context in manager: &quot;" time="0" classname="Check indent-on-enter for line &quot;async with context in manager: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context in manager: &quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context in manager: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context in manager:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context in manager:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context in manager:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context in manager:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async with context in manager: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;async with context in manager: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async with context in manager: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;async with context in manager: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test:&quot;" time="0.001" classname="Check indent-on-enter for line &quot;class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    class Test:&quot;" time="0" classname="Check indent-on-enter for line &quot;    class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    class Test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   class Test:&quot;" time="0" classname="Check indent-on-enter for line &quot;   class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   class Test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		class Test:&quot;" time="0" classname="Check indent-on-enter for line &quot;		class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		class Test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		class Test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xclass Test:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xclass Test:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;classx  Test:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;classx  Test:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test :&quot;" time="0" classname="Check indent-on-enter for line &quot;class Test :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test :&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test: &quot;" time="0" classname="Check indent-on-enter for line &quot;class Test: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test: &quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;class Test:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;class Test: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object):&quot;" time="0" classname="Check indent-on-enter for line &quot;class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object):&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    class Test(object):&quot;" time="0" classname="Check indent-on-enter for line &quot;    class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    class Test(object):&quot;" time="0" classname="Check dedent-on-enter for line &quot;    class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   class Test(object):&quot;" time="0" classname="Check indent-on-enter for line &quot;   class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   class Test(object):&quot;" time="0" classname="Check dedent-on-enter for line &quot;   class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		class Test(object):&quot;" time="0" classname="Check indent-on-enter for line &quot;		class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		class Test(object):&quot;" time="0" classname="Check dedent-on-enter for line &quot;		class Test(object):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xclass Test(object):&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xclass Test(object):&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;classx  Test(object):&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;classx  Test(object):&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object) :&quot;" time="0.001" classname="Check indent-on-enter for line &quot;class Test(object) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object) :&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test(object) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object): &quot;" time="0" classname="Check indent-on-enter for line &quot;class Test(object): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object): &quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test(object): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object):# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;class Test(object):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object):# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test(object):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;class Test(object): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;class Test(object): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class :&quot;" time="0" classname="Check indent-on-enter for line &quot;class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class :&quot;" time="0" classname="Check dedent-on-enter for line &quot;class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    class :&quot;" time="0" classname="Check indent-on-enter for line &quot;    class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    class :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   class :&quot;" time="0" classname="Check indent-on-enter for line &quot;   class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   class :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		class :&quot;" time="0" classname="Check indent-on-enter for line &quot;		class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		class :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		class :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xclass :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xclass :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;classx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;classx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class  :&quot;" time="0" classname="Check indent-on-enter for line &quot;class  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;class  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class : &quot;" time="0" classname="Check indent-on-enter for line &quot;class : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class : &quot;" time="0" classname="Check dedent-on-enter for line &quot;class : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;class :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;class :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;class : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;class : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam():&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam():&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    def spam():&quot;" time="0" classname="Check indent-on-enter for line &quot;    def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    def spam():&quot;" time="0" classname="Check dedent-on-enter for line &quot;    def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   def spam():&quot;" time="0" classname="Check indent-on-enter for line &quot;   def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   def spam():&quot;" time="0" classname="Check dedent-on-enter for line &quot;   def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		def spam():&quot;" time="0" classname="Check indent-on-enter for line &quot;		def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		def spam():&quot;" time="0" classname="Check dedent-on-enter for line &quot;		def spam():&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xdef spam():&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xdef spam():&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;defx  spam():&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;defx  spam():&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam() :&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam() :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam() :&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam() :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(): &quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(): &quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam(): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam():# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam():# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam():# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam():# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam(): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    def spam(self, node, namespace=&quot;&quot;):&quot;" time="0" classname="Check indent-on-enter for line &quot;    def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    def spam(self, node, namespace=&quot;&quot;):&quot;" time="0" classname="Check dedent-on-enter for line &quot;    def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   def spam(self, node, namespace=&quot;&quot;):&quot;" time="0" classname="Check indent-on-enter for line &quot;   def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   def spam(self, node, namespace=&quot;&quot;):&quot;" time="0" classname="Check dedent-on-enter for line &quot;   def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		def spam(self, node, namespace=&quot;&quot;):&quot;" time="0" classname="Check indent-on-enter for line &quot;		def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		def spam(self, node, namespace=&quot;&quot;):&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;		def spam(self, node, namespace=&quot;&quot;):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xdef spam(self, node, namespace=&quot;&quot;):&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xdef spam(self, node, namespace=&quot;&quot;):&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;defx  spam(self, node, namespace=&quot;&quot;):&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;defx  spam(self, node, namespace=&quot;&quot;):&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;) :&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;) :&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): &quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): &quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def :&quot;" time="0" classname="Check indent-on-enter for line &quot;def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    def :&quot;" time="0" classname="Check indent-on-enter for line &quot;    def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   def :&quot;" time="0" classname="Check indent-on-enter for line &quot;   def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		def :&quot;" time="0" classname="Check indent-on-enter for line &quot;		def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		def :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		def :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xdef :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xdef :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;defx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;defx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def  :&quot;" time="0" classname="Check indent-on-enter for line &quot;def  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;def  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def : &quot;" time="0" classname="Check indent-on-enter for line &quot;def : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def : &quot;" time="0" classname="Check dedent-on-enter for line &quot;def : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;def :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;def :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;def : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;def : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items:&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items:&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    for item in items:&quot;" time="0" classname="Check indent-on-enter for line &quot;    for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    for item in items:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   for item in items:&quot;" time="0" classname="Check indent-on-enter for line &quot;   for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   for item in items:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		for item in items:&quot;" time="0" classname="Check indent-on-enter for line &quot;		for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		for item in items:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		for item in items:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xfor item in items:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xfor item in items:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;forx  item in items:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;forx  item in items:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items :&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in items :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items :&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in items :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items: &quot;" time="0" classname="Check indent-on-enter for line &quot;for item in items: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items: &quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in items: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in items:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in items:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in items: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in items: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in :&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in :&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    for item in :&quot;" time="0" classname="Check indent-on-enter for line &quot;    for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    for item in :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   for item in :&quot;" time="0" classname="Check indent-on-enter for line &quot;   for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   for item in :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		for item in :&quot;" time="0" classname="Check indent-on-enter for line &quot;		for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		for item in :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		for item in :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xfor item in :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xfor item in :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;forx  item in :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;forx  item in :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in  :&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in : &quot;" time="0" classname="Check indent-on-enter for line &quot;for item in : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in : &quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;for item in : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;for item in : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for :&quot;" time="0" classname="Check indent-on-enter for line &quot;for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for :&quot;" time="0" classname="Check dedent-on-enter for line &quot;for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    for :&quot;" time="0" classname="Check indent-on-enter for line &quot;    for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    for :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   for :&quot;" time="0" classname="Check indent-on-enter for line &quot;   for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   for :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		for :&quot;" time="0" classname="Check indent-on-enter for line &quot;		for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		for :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		for :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xfor :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xfor :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;forx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;forx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for  :&quot;" time="0" classname="Check indent-on-enter for line &quot;for  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;for  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for : &quot;" time="0" classname="Check indent-on-enter for line &quot;for : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for : &quot;" time="0" classname="Check dedent-on-enter for line &quot;for : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for :# a comment&quot;" time="0.001" classname="Check indent-on-enter for line &quot;for :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;for :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;for : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;for : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None:&quot;" time="0" classname="Check indent-on-enter for line &quot;if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None:&quot;" time="0" classname="Check dedent-on-enter for line &quot;if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    if foo is None:&quot;" time="0" classname="Check indent-on-enter for line &quot;    if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    if foo is None:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   if foo is None:&quot;" time="0" classname="Check indent-on-enter for line &quot;   if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   if foo is None:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		if foo is None:&quot;" time="0" classname="Check indent-on-enter for line &quot;		if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		if foo is None:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		if foo is None:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xif foo is None:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xif foo is None:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;ifx  foo is None:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;ifx  foo is None:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None :&quot;" time="0" classname="Check indent-on-enter for line &quot;if foo is None :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None :&quot;" time="0" classname="Check dedent-on-enter for line &quot;if foo is None :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None: &quot;" time="0" classname="Check indent-on-enter for line &quot;if foo is None: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None: &quot;" time="0" classname="Check dedent-on-enter for line &quot;if foo is None: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;if foo is None:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;if foo is None:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;if foo is None: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;if foo is None: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if :&quot;" time="0" classname="Check indent-on-enter for line &quot;if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if :&quot;" time="0" classname="Check dedent-on-enter for line &quot;if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    if :&quot;" time="0" classname="Check indent-on-enter for line &quot;    if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    if :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   if :&quot;" time="0" classname="Check indent-on-enter for line &quot;   if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   if :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		if :&quot;" time="0" classname="Check indent-on-enter for line &quot;		if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		if :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		if :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xif :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xif :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;ifx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;ifx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if  :&quot;" time="0" classname="Check indent-on-enter for line &quot;if  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;if  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if : &quot;" time="0" classname="Check indent-on-enter for line &quot;if : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if : &quot;" time="0" classname="Check dedent-on-enter for line &quot;if : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;if :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;if :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;if : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;if : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try:&quot;" time="0" classname="Check indent-on-enter for line &quot;try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try:&quot;" time="0" classname="Check dedent-on-enter for line &quot;try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    try:&quot;" time="0.001" classname="Check indent-on-enter for line &quot;    try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    try:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   try:&quot;" time="0" classname="Check indent-on-enter for line &quot;   try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   try:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		try:&quot;" time="0" classname="Check indent-on-enter for line &quot;		try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		try:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		try:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xtry:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xtry:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;tryx:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;tryx:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try :&quot;" time="0" classname="Check indent-on-enter for line &quot;try :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try :&quot;" time="0" classname="Check dedent-on-enter for line &quot;try :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try: &quot;" time="0" classname="Check indent-on-enter for line &quot;try: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try: &quot;" time="0" classname="Check dedent-on-enter for line &quot;try: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;try:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;try:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;try: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;try: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check indent-on-enter for line &quot;    while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check indent-on-enter for line &quot;   while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check indent-on-enter for line &quot;		while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		while &apos;::&apos; in macaddress:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		while &apos;::&apos; in macaddress:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xwhile &apos;::&apos; in macaddress:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xwhile &apos;::&apos; in macaddress:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;whilex  &apos;::&apos; in macaddress:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;whilex  &apos;::&apos; in macaddress:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress :&quot;" time="0" classname="Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress :&quot;" time="0" classname="Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress: &quot;" time="0" classname="Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress: &quot;" time="0" classname="Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while :&quot;" time="0" classname="Check indent-on-enter for line &quot;while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while :&quot;" time="0" classname="Check dedent-on-enter for line &quot;while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    while :&quot;" time="0" classname="Check indent-on-enter for line &quot;    while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    while :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   while :&quot;" time="0" classname="Check indent-on-enter for line &quot;   while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   while :&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;   while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		while :&quot;" time="0" classname="Check indent-on-enter for line &quot;		while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		while :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		while :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xwhile :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xwhile :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;whilex  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;whilex  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while  :&quot;" time="0" classname="Check indent-on-enter for line &quot;while  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;while  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while : &quot;" time="0" classname="Check indent-on-enter for line &quot;while : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while : &quot;" time="0" classname="Check dedent-on-enter for line &quot;while : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;while :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;while :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;while : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;while : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test:&quot;" time="0" classname="Check indent-on-enter for line &quot;with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    with self.test:&quot;" time="0" classname="Check indent-on-enter for line &quot;    with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    with self.test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   with self.test:&quot;" time="0" classname="Check indent-on-enter for line &quot;   with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   with self.test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		with self.test:&quot;" time="0" classname="Check indent-on-enter for line &quot;		with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		with self.test:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		with self.test:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xwith self.test:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xwith self.test:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;withx  self.test:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;withx  self.test:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test :&quot;" time="0" classname="Check indent-on-enter for line &quot;with self.test :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test :&quot;" time="0" classname="Check dedent-on-enter for line &quot;with self.test :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test: &quot;" time="0" classname="Check indent-on-enter for line &quot;with self.test: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test: &quot;" time="0" classname="Check dedent-on-enter for line &quot;with self.test: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;with self.test:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;with self.test:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;with self.test: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;with self.test: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with :&quot;" time="0" classname="Check indent-on-enter for line &quot;with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with :&quot;" time="0" classname="Check dedent-on-enter for line &quot;with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    with :&quot;" time="0" classname="Check indent-on-enter for line &quot;    with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    with :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   with :&quot;" time="0" classname="Check indent-on-enter for line &quot;   with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   with :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		with :&quot;" time="0" classname="Check indent-on-enter for line &quot;		with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		with :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		with :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xwith :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xwith :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;withx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;withx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with  :&quot;" time="0" classname="Check indent-on-enter for line &quot;with  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;with  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with : &quot;" time="0" classname="Check indent-on-enter for line &quot;with : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with : &quot;" time="0" classname="Check dedent-on-enter for line &quot;with : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;with :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;with :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;with : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;with : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5:&quot;" time="0" classname="Check indent-on-enter for line &quot;elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5:&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    elif x &lt; 5:&quot;" time="0" classname="Check indent-on-enter for line &quot;    elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    elif x &lt; 5:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   elif x &lt; 5:&quot;" time="0" classname="Check indent-on-enter for line &quot;   elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   elif x &lt; 5:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		elif x &lt; 5:&quot;" time="0" classname="Check indent-on-enter for line &quot;		elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		elif x &lt; 5:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		elif x &lt; 5:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xelif x &lt; 5:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xelif x &lt; 5:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;elifx  x &lt; 5:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;elifx  x &lt; 5:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5 :&quot;" time="0" classname="Check indent-on-enter for line &quot;elif x &lt; 5 :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5 :&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif x &lt; 5 :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5: &quot;" time="0" classname="Check indent-on-enter for line &quot;elif x &lt; 5: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5: &quot;" time="0" classname="Check dedent-on-enter for line &quot;elif x &lt; 5: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;elif x &lt; 5:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif x &lt; 5:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;elif x &lt; 5: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif x &lt; 5: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif :&quot;" time="0" classname="Check indent-on-enter for line &quot;elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif :&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    elif :&quot;" time="0" classname="Check indent-on-enter for line &quot;    elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    elif :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   elif :&quot;" time="0" classname="Check indent-on-enter for line &quot;   elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   elif :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		elif :&quot;" time="0" classname="Check indent-on-enter for line &quot;		elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		elif :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		elif :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xelif :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xelif :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;elifx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;elifx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif  :&quot;" time="0" classname="Check indent-on-enter for line &quot;elif  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif : &quot;" time="0" classname="Check indent-on-enter for line &quot;elif : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif : &quot;" time="0" classname="Check dedent-on-enter for line &quot;elif : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;elif :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;elif : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;elif : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else:&quot;" time="0" classname="Check indent-on-enter for line &quot;else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else:&quot;" time="0" classname="Check dedent-on-enter for line &quot;else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    else:&quot;" time="0" classname="Check indent-on-enter for line &quot;    else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    else:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   else:&quot;" time="0" classname="Check indent-on-enter for line &quot;   else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   else:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		else:&quot;" time="0" classname="Check indent-on-enter for line &quot;		else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		else:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		else:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xelse:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xelse:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;elsex:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;elsex:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else :&quot;" time="0" classname="Check indent-on-enter for line &quot;else :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else :&quot;" time="0" classname="Check dedent-on-enter for line &quot;else :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else: &quot;" time="0" classname="Check indent-on-enter for line &quot;else: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else: &quot;" time="0" classname="Check dedent-on-enter for line &quot;else: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;else:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;else:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;else: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;else: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError:&quot;" time="0" classname="Check indent-on-enter for line &quot;except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError:&quot;" time="0" classname="Check dedent-on-enter for line &quot;except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    except TestError:&quot;" time="0" classname="Check indent-on-enter for line &quot;    except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    except TestError:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   except TestError:&quot;" time="0" classname="Check indent-on-enter for line &quot;   except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   except TestError:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		except TestError:&quot;" time="0" classname="Check indent-on-enter for line &quot;		except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		except TestError:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		except TestError:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xexcept TestError:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xexcept TestError:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;exceptx  TestError:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;exceptx  TestError:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError :&quot;" time="0" classname="Check indent-on-enter for line &quot;except TestError :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError :&quot;" time="0" classname="Check dedent-on-enter for line &quot;except TestError :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError: &quot;" time="0" classname="Check indent-on-enter for line &quot;except TestError: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError: &quot;" time="0" classname="Check dedent-on-enter for line &quot;except TestError: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;except TestError:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;except TestError:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;except TestError: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;except TestError: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except :&quot;" time="0" classname="Check indent-on-enter for line &quot;except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except :&quot;" time="0" classname="Check dedent-on-enter for line &quot;except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    except :&quot;" time="0" classname="Check indent-on-enter for line &quot;    except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    except :&quot;" time="0" classname="Check dedent-on-enter for line &quot;    except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   except :&quot;" time="0" classname="Check indent-on-enter for line &quot;   except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   except :&quot;" time="0" classname="Check dedent-on-enter for line &quot;   except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		except :&quot;" time="0" classname="Check indent-on-enter for line &quot;		except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		except :&quot;" time="0" classname="Check dedent-on-enter for line &quot;		except :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xexcept :&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xexcept :&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;exceptx  :&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;exceptx  :&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except  :&quot;" time="0" classname="Check indent-on-enter for line &quot;except  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except  :&quot;" time="0" classname="Check dedent-on-enter for line &quot;except  :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except : &quot;" time="0.001" classname="Check indent-on-enter for line &quot;except : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except : &quot;" time="0" classname="Check dedent-on-enter for line &quot;except : &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except :# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;except :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except :# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;except :# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except : # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;except : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except : # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;except : # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally:&quot;" time="0" classname="Check indent-on-enter for line &quot;finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally:&quot;" time="0" classname="Check dedent-on-enter for line &quot;finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    finally:&quot;" time="0" classname="Check indent-on-enter for line &quot;    finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    finally:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   finally:&quot;" time="0" classname="Check indent-on-enter for line &quot;   finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   finally:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		finally:&quot;" time="0" classname="Check indent-on-enter for line &quot;		finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		finally:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		finally:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xfinally:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xfinally:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;finallyx:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;finallyx:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally :&quot;" time="0" classname="Check indent-on-enter for line &quot;finally :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally :&quot;" time="0" classname="Check dedent-on-enter for line &quot;finally :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally: &quot;" time="0" classname="Check indent-on-enter for line &quot;finally: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally: &quot;" time="0" classname="Check dedent-on-enter for line &quot;finally: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;finally:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;finally:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;finally: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;finally: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;match item:&quot;" time="0" classname="Check indent-on-enter for line &quot;match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;match item:&quot;" time="0" classname="Check dedent-on-enter for line &quot;match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    match item:&quot;" time="0.001" classname="Check indent-on-enter for line &quot;    match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    match item:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   match item:&quot;" time="0" classname="Check indent-on-enter for line &quot;   match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   match item:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		match item:&quot;" time="0" classname="Check indent-on-enter for line &quot;		match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		match item:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		match item:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xmatch item:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xmatch item:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;matchx  item:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;matchx  item:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;match item :&quot;" time="0" classname="Check indent-on-enter for line &quot;match item :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;match item :&quot;" time="0" classname="Check dedent-on-enter for line &quot;match item :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;match item: &quot;" time="0" classname="Check indent-on-enter for line &quot;match item: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;match item: &quot;" time="0" classname="Check dedent-on-enter for line &quot;match item: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;match item:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;match item:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;match item:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;match item:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;match item: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;match item: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;match item: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;match item: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 200:&quot;" time="0" classname="Check indent-on-enter for line &quot;case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 200:&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case 200:&quot;" time="0" classname="Check indent-on-enter for line &quot;    case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case 200:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case 200:&quot;" time="0" classname="Check indent-on-enter for line &quot;   case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case 200:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case 200:&quot;" time="0" classname="Check indent-on-enter for line &quot;		case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case 200:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case 200:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase 200:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase 200:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  200:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  200:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 200 :&quot;" time="0" classname="Check indent-on-enter for line &quot;case 200 :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 200 :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 200 :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 200: &quot;" time="0" classname="Check indent-on-enter for line &quot;case 200: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 200: &quot;" time="0" classname="Check dedent-on-enter for line &quot;case 200: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 200:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case 200:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 200:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 200:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 200: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case 200: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 200: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 200: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (1, 1):&quot;" time="0" classname="Check indent-on-enter for line &quot;case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (1, 1):&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case (1, 1):&quot;" time="0" classname="Check indent-on-enter for line &quot;    case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case (1, 1):&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case (1, 1):&quot;" time="0" classname="Check indent-on-enter for line &quot;   case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case (1, 1):&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case (1, 1):&quot;" time="0" classname="Check indent-on-enter for line &quot;		case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case (1, 1):&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case (1, 1):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase (1, 1):&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase (1, 1):&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  (1, 1):&quot; ignored (look-alike - post-keyword)" time="0.001" classname="Line &quot;casex  (1, 1):&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (1, 1) :&quot;" time="0" classname="Check indent-on-enter for line &quot;case (1, 1) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (1, 1) :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (1, 1) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (1, 1): &quot;" time="0" classname="Check indent-on-enter for line &quot;case (1, 1): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (1, 1): &quot;" time="0" classname="Check dedent-on-enter for line &quot;case (1, 1): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (1, 1):# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case (1, 1):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (1, 1):# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (1, 1):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (1, 1): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case (1, 1): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (1, 1): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (1, 1): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x=0, y=0):&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x=0, y=0):&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case Point(x=0, y=0):&quot;" time="0" classname="Check indent-on-enter for line &quot;    case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case Point(x=0, y=0):&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;    case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case Point(x=0, y=0):&quot;" time="0" classname="Check indent-on-enter for line &quot;   case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case Point(x=0, y=0):&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case Point(x=0, y=0):&quot;" time="0" classname="Check indent-on-enter for line &quot;		case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case Point(x=0, y=0):&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case Point(x=0, y=0):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase Point(x=0, y=0):&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase Point(x=0, y=0):&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  Point(x=0, y=0):&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  Point(x=0, y=0):&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x=0, y=0) :&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x=0, y=0) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x=0, y=0) :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x=0, y=0) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x=0, y=0): &quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x=0, y=0): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x=0, y=0): &quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x=0, y=0): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x=0, y=0):# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x=0, y=0):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x=0, y=0):# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x=0, y=0):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x=0, y=0): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x=0, y=0): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x=0, y=0): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x=0, y=0): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case [Point(0, 0)]:&quot;" time="0" classname="Check indent-on-enter for line &quot;case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case [Point(0, 0)]:&quot;" time="0" classname="Check dedent-on-enter for line &quot;case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case [Point(0, 0)]:&quot;" time="0" classname="Check indent-on-enter for line &quot;    case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case [Point(0, 0)]:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case [Point(0, 0)]:&quot;" time="0" classname="Check indent-on-enter for line &quot;   case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case [Point(0, 0)]:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case [Point(0, 0)]:&quot;" time="0" classname="Check indent-on-enter for line &quot;		case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case [Point(0, 0)]:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case [Point(0, 0)]:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase [Point(0, 0)]:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase [Point(0, 0)]:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  [Point(0, 0)]:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  [Point(0, 0)]:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case [Point(0, 0)] :&quot;" time="0" classname="Check indent-on-enter for line &quot;case [Point(0, 0)] :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case [Point(0, 0)] :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case [Point(0, 0)] :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case [Point(0, 0)]: &quot;" time="0" classname="Check indent-on-enter for line &quot;case [Point(0, 0)]: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case [Point(0, 0)]: &quot;" time="0" classname="Check dedent-on-enter for line &quot;case [Point(0, 0)]: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case [Point(0, 0)]:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case [Point(0, 0)]:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case [Point(0, 0)]:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case [Point(0, 0)]:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case [Point(0, 0)]: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case [Point(0, 0)]: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case [Point(0, 0)]: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case [Point(0, 0)]: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x, y) if x == y:&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x, y) if x == y:&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case Point(x, y) if x == y:&quot;" time="0" classname="Check indent-on-enter for line &quot;    case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case Point(x, y) if x == y:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case Point(x, y) if x == y:&quot;" time="0" classname="Check indent-on-enter for line &quot;   case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case Point(x, y) if x == y:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case Point(x, y) if x == y:&quot;" time="0" classname="Check indent-on-enter for line &quot;		case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case Point(x, y) if x == y:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case Point(x, y) if x == y:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase Point(x, y) if x == y:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase Point(x, y) if x == y:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  Point(x, y) if x == y:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  Point(x, y) if x == y:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x, y) if x == y :&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x, y) if x == y :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x, y) if x == y :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x, y) if x == y :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x, y) if x == y: &quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x, y) if x == y: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x, y) if x == y: &quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x, y) if x == y: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x, y) if x == y:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x, y) if x == y:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x, y) if x == y:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x, y) if x == y:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Point(x, y) if x == y: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case Point(x, y) if x == y: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Point(x, y) if x == y: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Point(x, y) if x == y: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check indent-on-enter for line &quot;    case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check indent-on-enter for line &quot;   case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check indent-on-enter for line &quot;		case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case (Point(x1, y1), Point(x2, y2) as p2):&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case (Point(x1, y1), Point(x2, y2) as p2):&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase (Point(x1, y1), Point(x2, y2) as p2):&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase (Point(x1, y1), Point(x2, y2) as p2):&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  (Point(x1, y1), Point(x2, y2) as p2):&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  (Point(x1, y1), Point(x2, y2) as p2):&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2) :&quot;" time="0" classname="Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2) :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2) :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): &quot;" time="0" classname="Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): &quot;" time="0" classname="Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2):# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case (Point(x1, y1), Point(x2, y2) as p2): # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Color.RED:&quot;" time="0.001" classname="Check indent-on-enter for line &quot;case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Color.RED:&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case Color.RED:&quot;" time="0" classname="Check indent-on-enter for line &quot;    case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case Color.RED:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case Color.RED:&quot;" time="0" classname="Check indent-on-enter for line &quot;   case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case Color.RED:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case Color.RED:&quot;" time="0" classname="Check indent-on-enter for line &quot;		case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case Color.RED:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case Color.RED:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase Color.RED:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase Color.RED:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  Color.RED:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  Color.RED:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Color.RED :&quot;" time="0" classname="Check indent-on-enter for line &quot;case Color.RED :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Color.RED :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Color.RED :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Color.RED: &quot;" time="0" classname="Check indent-on-enter for line &quot;case Color.RED: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Color.RED: &quot;" time="0" classname="Check dedent-on-enter for line &quot;case Color.RED: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Color.RED:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case Color.RED:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Color.RED:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Color.RED:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case Color.RED: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case Color.RED: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case Color.RED: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case Color.RED: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 401 | 403 | 404:&quot;" time="0" classname="Check indent-on-enter for line &quot;case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 401 | 403 | 404:&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case 401 | 403 | 404:&quot;" time="0" classname="Check indent-on-enter for line &quot;    case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case 401 | 403 | 404:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case 401 | 403 | 404:&quot;" time="0" classname="Check indent-on-enter for line &quot;   case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case 401 | 403 | 404:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case 401 | 403 | 404:&quot;" time="0" classname="Check indent-on-enter for line &quot;		case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case 401 | 403 | 404:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case 401 | 403 | 404:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase 401 | 403 | 404:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase 401 | 403 | 404:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  401 | 403 | 404:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  401 | 403 | 404:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 401 | 403 | 404 :&quot;" time="0" classname="Check indent-on-enter for line &quot;case 401 | 403 | 404 :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 401 | 403 | 404 :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 401 | 403 | 404 :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 401 | 403 | 404: &quot;" time="0" classname="Check indent-on-enter for line &quot;case 401 | 403 | 404: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 401 | 403 | 404: &quot;" time="0" classname="Check dedent-on-enter for line &quot;case 401 | 403 | 404: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 401 | 403 | 404:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case 401 | 403 | 404:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 401 | 403 | 404:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 401 | 403 | 404:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case 401 | 403 | 404: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case 401 | 403 | 404: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case 401 | 403 | 404: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case 401 | 403 | 404: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case _:&quot;" time="0" classname="Check indent-on-enter for line &quot;case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case _:&quot;" time="0" classname="Check dedent-on-enter for line &quot;case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    case _:&quot;" time="0" classname="Check indent-on-enter for line &quot;    case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    case _:&quot;" time="0" classname="Check dedent-on-enter for line &quot;    case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   case _:&quot;" time="0" classname="Check indent-on-enter for line &quot;   case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   case _:&quot;" time="0" classname="Check dedent-on-enter for line &quot;   case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		case _:&quot;" time="0" classname="Check indent-on-enter for line &quot;		case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		case _:&quot;" time="0" classname="Check dedent-on-enter for line &quot;		case _:&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcase _:&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcase _:&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;casex  _:&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;casex  _:&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case _ :&quot;" time="0" classname="Check indent-on-enter for line &quot;case _ :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case _ :&quot;" time="0" classname="Check dedent-on-enter for line &quot;case _ :&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case _: &quot;" time="0" classname="Check indent-on-enter for line &quot;case _: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case _: &quot;" time="0" classname="Check dedent-on-enter for line &quot;case _: &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case _:# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;case _:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case _:# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;case _:# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;case _: # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;case _: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;case _: # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;case _: # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass&quot;" time="0" classname="Check indent-on-enter for line &quot;pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass&quot;" time="0" classname="Check dedent-on-enter for line &quot;pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    pass&quot;" time="0" classname="Check indent-on-enter for line &quot;    pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    pass&quot;" time="0" classname="Check dedent-on-enter for line &quot;    pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   pass&quot;" time="0" classname="Check indent-on-enter for line &quot;   pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   pass&quot;" time="0" classname="Check dedent-on-enter for line &quot;   pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		pass&quot;" time="0" classname="Check indent-on-enter for line &quot;		pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		pass&quot;" time="0" classname="Check dedent-on-enter for line &quot;		pass&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xpass&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xpass&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;passx&quot; ignored (look-alike - post-keyword)" time="0" classname="Line &quot;passx&quot; ignored (look-alike - post-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass &quot;" time="0" classname="Check indent-on-enter for line &quot;pass &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass &quot;" time="0" classname="Check dedent-on-enter for line &quot;pass &quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass# a comment&quot;" time="0" classname="Check indent-on-enter for line &quot;pass# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass# a comment&quot;" time="0" classname="Check dedent-on-enter for line &quot;pass# a comment&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass # ...&quot;" time="0" classname="Check indent-on-enter for line &quot;pass # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass # ...&quot;" time="0" classname="Check dedent-on-enter for line &quot;pass # ...&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception(msg)&quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception(msg)&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    raise Exception(msg)&quot;" time="0" classname="Check indent-on-enter for line &quot;    raise Exception(msg)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    raise Exception(msg)&quot;" time="0" classname="Check dedent-on-enter for line &quot;    raise Exception(msg)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   raise Exception(msg)&quot;" time="0" classname="Check indent-on-enter for line &quot;   raise Exception(msg)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   raise Exception(msg)&quot;" time="0" classname="Check dedent-on-enter for line &quot;   raise Exception(msg)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		raise Exception(msg)&quot;" time="0" classname="Check indent-on-enter for line &quot;		raise Exception(msg)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		raise Exception(msg)&quot;" time="0" classname="Check dedent-on-enter for line &quot;		raise Exception(msg)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xraise Exception(msg)&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xraise Exception(msg)&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raisex  Exception(msg)&quot; ignored (expected indent)" time="0" classname="Line &quot;raisex  Exception(msg)&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception(msg) &quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception(msg) &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception(msg)# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception(msg)# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception(msg) # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception(msg) # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception&quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    raise Exception&quot;" time="0" classname="Check indent-on-enter for line &quot;    raise Exception&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    raise Exception&quot;" time="0" classname="Check dedent-on-enter for line &quot;    raise Exception&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   raise Exception&quot;" time="0" classname="Check indent-on-enter for line &quot;   raise Exception&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   raise Exception&quot;" time="0" classname="Check dedent-on-enter for line &quot;   raise Exception&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		raise Exception&quot;" time="0" classname="Check indent-on-enter for line &quot;		raise Exception&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		raise Exception&quot;" time="0" classname="Check dedent-on-enter for line &quot;		raise Exception&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xraise Exception&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xraise Exception&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raisex  Exception&quot; ignored (expected indent)" time="0" classname="Line &quot;raisex  Exception&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception &quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise Exception # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;raise Exception # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise&quot; ignored (expected indent)" time="0" classname="Line &quot;raise&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    raise&quot;" time="0" classname="Check indent-on-enter for line &quot;    raise&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    raise&quot;" time="0" classname="Check dedent-on-enter for line &quot;    raise&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   raise&quot;" time="0" classname="Check indent-on-enter for line &quot;   raise&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   raise&quot;" time="0" classname="Check dedent-on-enter for line &quot;   raise&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		raise&quot;" time="0" classname="Check indent-on-enter for line &quot;		raise&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		raise&quot;" time="0" classname="Check dedent-on-enter for line &quot;		raise&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xraise&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xraise&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raisex&quot; ignored (expected indent)" time="0" classname="Line &quot;raisex&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise &quot; ignored (expected indent)" time="0" classname="Line &quot;raise &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;raise# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;raise # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;raise # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;break&quot; ignored (expected indent)" time="0" classname="Line &quot;break&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    break&quot;" time="0" classname="Check indent-on-enter for line &quot;    break&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    break&quot;" time="0" classname="Check dedent-on-enter for line &quot;    break&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   break&quot;" time="0" classname="Check indent-on-enter for line &quot;   break&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   break&quot;" time="0" classname="Check dedent-on-enter for line &quot;   break&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		break&quot;" time="0" classname="Check indent-on-enter for line &quot;		break&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		break&quot;" time="0" classname="Check dedent-on-enter for line &quot;		break&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xbreak&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xbreak&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;breakx&quot; ignored (expected indent)" time="0" classname="Line &quot;breakx&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;break &quot; ignored (expected indent)" time="0" classname="Line &quot;break &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;break# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;break# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;break # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;break # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;continue&quot; ignored (expected indent)" time="0" classname="Line &quot;continue&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    continue&quot;" time="0" classname="Check indent-on-enter for line &quot;    continue&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    continue&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;    continue&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   continue&quot;" time="0" classname="Check indent-on-enter for line &quot;   continue&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   continue&quot;" time="0" classname="Check dedent-on-enter for line &quot;   continue&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		continue&quot;" time="0" classname="Check indent-on-enter for line &quot;		continue&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		continue&quot;" time="0" classname="Check dedent-on-enter for line &quot;		continue&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xcontinue&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xcontinue&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;continuex&quot; ignored (expected indent)" time="0" classname="Line &quot;continuex&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;continue &quot; ignored (expected indent)" time="0" classname="Line &quot;continue &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;continue# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;continue# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;continue # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;continue # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return&quot; ignored (expected indent)" time="0" classname="Line &quot;return&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return&quot;" time="0" classname="Check indent-on-enter for line &quot;    return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return&quot;" time="0" classname="Check indent-on-enter for line &quot;   return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return&quot;" time="0" classname="Check indent-on-enter for line &quot;		return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return &quot; ignored (expected indent)" time="0" classname="Line &quot;return &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return True&quot; ignored (expected indent)" time="0" classname="Line &quot;return True&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return True&quot;" time="0" classname="Check indent-on-enter for line &quot;    return True&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return True&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return True&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return True&quot;" time="0" classname="Check indent-on-enter for line &quot;   return True&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return True&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return True&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return True&quot;" time="0" classname="Check indent-on-enter for line &quot;		return True&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return True&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return True&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn True&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn True&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  True&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  True&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return True &quot; ignored (expected indent)" time="0" classname="Line &quot;return True &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return True# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return True# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return True # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return True # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False)&quot; ignored (expected indent)" time="0" classname="Line &quot;return (True, False, False)&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return (True, False, False)&quot;" time="0" classname="Check indent-on-enter for line &quot;    return (True, False, False)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return (True, False, False)&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return (True, False, False)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return (True, False, False)&quot;" time="0" classname="Check indent-on-enter for line &quot;   return (True, False, False)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return (True, False, False)&quot;" time="0.001" classname="Check dedent-on-enter for line &quot;   return (True, False, False)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return (True, False, False)&quot;" time="0" classname="Check indent-on-enter for line &quot;		return (True, False, False)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return (True, False, False)&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return (True, False, False)&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn (True, False, False)&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn (True, False, False)&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  (True, False, False)&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  (True, False, False)&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False) &quot; ignored (expected indent)" time="0" classname="Line &quot;return (True, False, False) &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False)# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return (True, False, False)# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False) # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return (True, False, False) # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False]&quot; ignored (expected indent)" time="0" classname="Line &quot;return [True, False, False]&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return [True, False, False]&quot;" time="0" classname="Check indent-on-enter for line &quot;    return [True, False, False]&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return [True, False, False]&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return [True, False, False]&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return [True, False, False]&quot;" time="0" classname="Check indent-on-enter for line &quot;   return [True, False, False]&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return [True, False, False]&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return [True, False, False]&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return [True, False, False]&quot;" time="0" classname="Check indent-on-enter for line &quot;		return [True, False, False]&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return [True, False, False]&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return [True, False, False]&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn [True, False, False]&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn [True, False, False]&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  [True, False, False]&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  [True, False, False]&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False] &quot; ignored (expected indent)" time="0" classname="Line &quot;return [True, False, False] &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False]# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return [True, False, False]# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False] # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return [True, False, False] # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False}&quot; ignored (expected indent)" time="0" classname="Line &quot;return {True, False, False}&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return {True, False, False}&quot;" time="0" classname="Check indent-on-enter for line &quot;    return {True, False, False}&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return {True, False, False}&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return {True, False, False}&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return {True, False, False}&quot;" time="0" classname="Check indent-on-enter for line &quot;   return {True, False, False}&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return {True, False, False}&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return {True, False, False}&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return {True, False, False}&quot;" time="0" classname="Check indent-on-enter for line &quot;		return {True, False, False}&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return {True, False, False}&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return {True, False, False}&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn {True, False, False}&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn {True, False, False}&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  {True, False, False}&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  {True, False, False}&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False} &quot; ignored (expected indent)" time="0" classname="Line &quot;return {True, False, False} &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False}# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return {True, False, False}# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False} # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return {True, False, False} # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return (&quot; ignored (expected indent)" time="0" classname="Line &quot;return (&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return (&quot;" time="0" classname="Check indent-on-enter for line &quot;    return (&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return (&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return (&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return (&quot;" time="0" classname="Check indent-on-enter for line &quot;   return (&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return (&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return (&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return (&quot;" time="0" classname="Check indent-on-enter for line &quot;		return (&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return (&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return (&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn (&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn (&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  (&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  (&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return ( &quot; ignored (expected indent)" time="0" classname="Line &quot;return ( &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return (# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return (# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return ( # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return ( # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [&quot; ignored (expected indent)" time="0" classname="Line &quot;return [&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return [&quot;" time="0" classname="Check indent-on-enter for line &quot;    return [&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return [&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return [&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return [&quot;" time="0" classname="Check indent-on-enter for line &quot;   return [&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return [&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return [&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return [&quot;" time="0" classname="Check indent-on-enter for line &quot;		return [&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return [&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return [&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn [&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn [&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  [&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  [&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [ &quot; ignored (expected indent)" time="0" classname="Line &quot;return [ &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return [# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return [ # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return [ # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return {&quot; ignored (expected indent)" time="0" classname="Line &quot;return {&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return {&quot;" time="0" classname="Check indent-on-enter for line &quot;    return {&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return {&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return {&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return {&quot;" time="0" classname="Check indent-on-enter for line &quot;   return {&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return {&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return {&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return {&quot;" time="0" classname="Check indent-on-enter for line &quot;		return {&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return {&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return {&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn {&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn {&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  {&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx  {&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return { &quot; ignored (expected indent)" time="0" classname="Line &quot;return { &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return {# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return {# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return { # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return { # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return&quot; ignored (expected indent)" time="0" classname="Line &quot;return&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return&quot;" time="0" classname="Check indent-on-enter for line &quot;    return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return&quot;" time="0" classname="Check dedent-on-enter for line &quot;    return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return&quot;" time="0" classname="Check indent-on-enter for line &quot;   return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return&quot;" time="0" classname="Check dedent-on-enter for line &quot;   return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;		return&quot;" time="0" classname="Check indent-on-enter for line &quot;		return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;		return&quot;" time="0" classname="Check dedent-on-enter for line &quot;		return&quot;">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn&quot; ignored (look-alike - pre-keyword)" time="0" classname="Line &quot;xreturn&quot; ignored (look-alike - pre-keyword)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;returnx&quot; ignored (expected indent)" time="0" classname="Line &quot;returnx&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return &quot; ignored (expected indent)" time="0" classname="Line &quot;return &quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return# a comment&quot; ignored (expected indent)" time="0" classname="Line &quot;return# a comment&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;return # ...&quot; ignored (expected indent)" time="0" classname="Line &quot;return # ...&quot; ignored (expected indent)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;&quot; ignored (blank line)" time="0" classname="Line &quot;&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;    &quot; ignored (blank line)" time="0" classname="Line &quot;    &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;   &quot; ignored (blank line)" time="0" classname="Line &quot;   &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;		&quot; ignored (blank line)" time="0" classname="Line &quot;		&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;x&quot; ignored (blank line)" time="0" classname="Line &quot;x&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;x&quot; ignored (blank line)" time="0" classname="Line &quot;x&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot; &quot; ignored (blank line)" time="0.001" classname="Line &quot; &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;# a comment&quot; ignored (blank line)" time="0" classname="Line &quot;# a comment&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot; # ...&quot; ignored (blank line)" time="0" classname="Line &quot; # ...&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot; &quot; ignored (blank line)" time="0" classname="Line &quot; &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;     &quot; ignored (blank line)" time="0" classname="Line &quot;     &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;    &quot; ignored (blank line)" time="0" classname="Line &quot;    &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;		 &quot; ignored (blank line)" time="0" classname="Line &quot;		 &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;x &quot; ignored (blank line)" time="0" classname="Line &quot;x &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;x  &quot; ignored (blank line)" time="0" classname="Line &quot;x  &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;  &quot; ignored (blank line)" time="0" classname="Line &quot;  &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot; # a comment&quot; ignored (blank line)" time="0" classname="Line &quot; # a comment&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;  # ...&quot; ignored (blank line)" time="0" classname="Line &quot;  # ...&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;  &quot; ignored (blank line)" time="0" classname="Line &quot;  &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;      &quot; ignored (blank line)" time="0" classname="Line &quot;      &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;     &quot; ignored (blank line)" time="0" classname="Line &quot;     &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;		  &quot; ignored (blank line)" time="0" classname="Line &quot;		  &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;x  &quot; ignored (blank line)" time="0" classname="Line &quot;x  &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;x   &quot; ignored (blank line)" time="0" classname="Line &quot;x   &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;   &quot; ignored (blank line)" time="0" classname="Line &quot;   &quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;  # a comment&quot; ignored (blank line)" time="0" classname="Line &quot;  # a comment&quot; ignored (blank line)">
    </testcase>
    <testcase name="Language Configuration &quot;onEnterRules&quot; Line &quot;   # ...&quot; ignored (blank line)" time="0" classname="Line &quot;   # ...&quot; ignored (blank line)">
    </testcase>
  </testsuite>
  <testsuite name="&quot;wordPattern&quot;" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/language/languageConfiguration.unit.test.js" failures="0" time="0">
    <testcase name="Language Configuration &quot;wordPattern&quot; wordPattern is not defined" time="0" classname="wordPattern is not defined">
    </testcase>
  </testsuite>
  <testsuite name="Language.TextIterator" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/language/textIterator.unit.test.js" failures="0" time="0.001">
    <testcase name="Language.TextIterator Construction" time="0.001" classname="Construction">
    </testcase>
    <testcase name="Language.TextIterator Iteration" time="0" classname="Iteration">
    </testcase>
  </testsuite>
  <testsuite name="Language.TextRange" timestamp="2021-11-08T22:03:14" tests="5" file="/home/don/development/vsc/vscode-python/out/test/language/textRange.unit.test.js" failures="0" time="0">
    <testcase name="Language.TextRange Empty static" time="0" classname="Empty static">
    </testcase>
    <testcase name="Language.TextRange Construction" time="0" classname="Construction">
    </testcase>
    <testcase name="Language.TextRange From bounds" time="0" classname="From bounds">
    </testcase>
    <testcase name="Language.TextRange Contains" time="0" classname="Contains">
    </testcase>
    <testcase name="Language.TextRange Exceptions" time="0" classname="Exceptions">
    </testcase>
  </testsuite>
  <testsuite name="Language.TextRangeCollection" timestamp="2021-11-08T22:03:14" tests="7" file="/home/don/development/vsc/vscode-python/out/test/language/textRangeCollection.unit.test.js" failures="0" time="0">
    <testcase name="Language.TextRangeCollection Empty" time="0" classname="Empty">
    </testcase>
    <testcase name="Language.TextRangeCollection Basic" time="0" classname="Basic">
    </testcase>
    <testcase name="Language.TextRangeCollection Contains position (simple)" time="0" classname="Contains position (simple)">
    </testcase>
    <testcase name="Language.TextRangeCollection Contains position (adjoint)" time="0" classname="Contains position (adjoint)">
    </testcase>
    <testcase name="Language.TextRangeCollection Contains position (out of range)" time="0" classname="Contains position (out of range)">
    </testcase>
    <testcase name="Language.TextRangeCollection Contains position (empty)" time="0" classname="Contains position (empty)">
    </testcase>
    <testcase name="Language.TextRangeCollection Item at position" time="0" classname="Item at position">
    </testcase>
  </testsuite>
  <testsuite name="Language.Tokenizer" timestamp="2021-11-08T22:03:14" tests="63" file="/home/don/development/vsc/vscode-python/out/test/language/tokenizer.unit.test.js" failures="0" time="0.334">
    <testcase name="Language.Tokenizer Empty" time="0" classname="Empty">
    </testcase>
    <testcase name="Language.Tokenizer Strings: unclosed" time="0" classname="Strings: unclosed">
    </testcase>
    <testcase name="Language.Tokenizer Strings: block next to regular, double-quoted" time="0" classname="Strings: block next to regular, double-quoted">
    </testcase>
    <testcase name="Language.Tokenizer Strings: block next to block, double-quoted" time="0" classname="Strings: block next to block, double-quoted">
    </testcase>
    <testcase name="Language.Tokenizer Strings: unclosed sequence of quotes" time="0" classname="Strings: unclosed sequence of quotes">
    </testcase>
    <testcase name="Language.Tokenizer Strings: single quote escape" time="0" classname="Strings: single quote escape">
    </testcase>
    <testcase name="Language.Tokenizer Strings: double quote escape" time="0" classname="Strings: double quote escape">
    </testcase>
    <testcase name="Language.Tokenizer Strings: single quoted f-string " time="0.331" classname="Strings: single quoted f-string ">
    </testcase>
    <testcase name="Language.Tokenizer Strings: double quoted f-string " time="0" classname="Strings: double quoted f-string ">
    </testcase>
    <testcase name="Language.Tokenizer Strings: single quoted multiline f-string " time="0" classname="Strings: single quoted multiline f-string ">
    </testcase>
    <testcase name="Language.Tokenizer Strings: double quoted multiline f-string " time="0" classname="Strings: double quoted multiline f-string ">
    </testcase>
    <testcase name="Language.Tokenizer Strings: escape at the end of single quoted string " time="0" classname="Strings: escape at the end of single quoted string ">
    </testcase>
    <testcase name="Language.Tokenizer Strings: escape at the end of double quoted string " time="0" classname="Strings: escape at the end of double quoted string ">
    </testcase>
    <testcase name="Language.Tokenizer Strings: b/u/r-string" time="0" classname="Strings: b/u/r-string">
    </testcase>
    <testcase name="Language.Tokenizer Strings: escape at the end of double quoted string " time="0.001" classname="Strings: escape at the end of double quoted string ">
    </testcase>
    <testcase name="Language.Tokenizer Comments" time="0" classname="Comments">
    </testcase>
    <testcase name="Language.Tokenizer Period to operator token" time="0" classname="Period to operator token">
    </testcase>
    <testcase name="Language.Tokenizer @ to operator token" time="0" classname="@ to operator token">
    </testcase>
    <testcase name="Language.Tokenizer Unknown token" time="0" classname="Unknown token">
    </testcase>
    <testcase name="Language.Tokenizer Hex number" time="0" classname="Hex number">
    </testcase>
    <testcase name="Language.Tokenizer Binary number" time="0" classname="Binary number">
    </testcase>
    <testcase name="Language.Tokenizer Octal number" time="0" classname="Octal number">
    </testcase>
    <testcase name="Language.Tokenizer Decimal number" time="0" classname="Decimal number">
    </testcase>
    <testcase name="Language.Tokenizer Decimal number operator" time="0" classname="Decimal number operator">
    </testcase>
    <testcase name="Language.Tokenizer Floating point number" time="0.001" classname="Floating point number">
    </testcase>
    <testcase name="Language.Tokenizer Floating point numbers with braces" time="0" classname="Floating point numbers with braces">
    </testcase>
    <testcase name="Language.Tokenizer Underscore numbers" time="0" classname="Underscore numbers">
    </testcase>
    <testcase name="Language.Tokenizer Simple expression, leading minus" time="0" classname="Simple expression, leading minus">
    </testcase>
    <testcase name="Language.Tokenizer Operators" time="0.001" classname="Operators">
    </testcase>
    <testcase name="Language.Tokenizer Exceptions: out-of-range start = -1" time="0" classname="Exceptions: out-of-range start = -1">
    </testcase>
    <testcase name="Language.Tokenizer Exceptions: out-of-range start = 10" time="0" classname="Exceptions: out-of-range start = 10">
    </testcase>
    <testcase name="Language.Tokenizer Exceptions: out-of-range length = -1" time="0" classname="Exceptions: out-of-range length = -1">
    </testcase>
    <testcase name="Language.Tokenizer Exceptions: out-of-range length = 10" time="0" classname="Exceptions: out-of-range length = 10">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: (" time="0" classname="Character tokens: (">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: )" time="0" classname="Character tokens: )">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: [" time="0" classname="Character tokens: [">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: ]" time="0" classname="Character tokens: ]">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: {" time="0" classname="Character tokens: {">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: }" time="0" classname="Character tokens: }">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: ," time="0" classname="Character tokens: ,">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: :" time="0" classname="Character tokens: :">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: ;" time="0" classname="Character tokens: ;">
    </testcase>
    <testcase name="Language.Tokenizer Character tokens: ." time="0" classname="Character tokens: .">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: 1" time="0" classname="Possible numbers: 1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -1" time="0" classname="Possible numbers: -1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: +1" time="0" classname="Possible numbers: +1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: .1" time="0" classname="Possible numbers: .1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -.1" time="0" classname="Possible numbers: -.1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: +.1" time="0" classname="Possible numbers: +.1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: 1_1" time="0" classname="Possible numbers: 1_1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: _1" time="0" classname="Possible numbers: _1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -0x1" time="0" classname="Possible numbers: -0x1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -0X1" time="0" classname="Possible numbers: -0X1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -0b1" time="0" classname="Possible numbers: -0b1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -0B1" time="0" classname="Possible numbers: -0B1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -0o1" time="0" classname="Possible numbers: -0o1">
    </testcase>
    <testcase name="Language.Tokenizer Possible numbers: -0O1" time="0" classname="Possible numbers: -0O1">
    </testcase>
    <testcase name="Language.Tokenizer Numbers after braces or operators: (-1" time="0" classname="Numbers after braces or operators: (-1">
    </testcase>
    <testcase name="Language.Tokenizer Numbers after braces or operators: [+1" time="0" classname="Numbers after braces or operators: [+1">
    </testcase>
    <testcase name="Language.Tokenizer Numbers after braces or operators: ,-1" time="0" classname="Numbers after braces or operators: ,-1">
    </testcase>
    <testcase name="Language.Tokenizer Numbers after braces or operators: :+1" time="0" classname="Numbers after braces or operators: :+1">
    </testcase>
    <testcase name="Language.Tokenizer Numbers after braces or operators: ;+1" time="0" classname="Numbers after braces or operators: ;+1">
    </testcase>
    <testcase name="Language.Tokenizer Numbers after braces or operators: =+1" time="0" classname="Numbers after braces or operators: =+1">
    </testcase>
  </testsuite>
  <testsuite name="Linting - Bandit" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/linters/bandit.unit.test.js" failures="0" time="0.001">
    <testcase name="Linting - Bandit parsing new bandit with col" time="0" classname="parsing new bandit with col">
    </testcase>
    <testcase name="Linting - Bandit parsing old bandit with no col" time="0.001" classname="parsing old bandit with no col">
    </testcase>
  </testsuite>
  <testsuite name="Linting Scenarios" timestamp="2021-11-08T22:03:14" tests="31" file="/home/don/development/vsc/vscode-python/out/test/linters/lint.unit.test.js" failures="0" time="0.02700000000000001">
    <testcase name="Linting Scenarios No linting with PyLint (enabled) when disabled at top-level" time="0.002" classname="No linting with PyLint (enabled) when disabled at top-level">
    </testcase>
    <testcase name="Linting Scenarios No linting with Pylint disabled (and Flake8 enabled)" time="0.001" classname="No linting with Pylint disabled (and Flake8 enabled)">
    </testcase>
    <testcase name="Linting Scenarios Disable Flake8 and run linter" time="0.001" classname="Disable Flake8 and run linter">
    </testcase>
    <testcase name="Linting Scenarios Enable Flake8 and run linter" time="0.002" classname="Enable Flake8 and run linter">
    </testcase>
    <testcase name="Linting Scenarios Disable Pylint and run linter" time="0.001" classname="Disable Pylint and run linter">
    </testcase>
    <testcase name="Linting Scenarios Enable Pylint and run linter" time="0.002" classname="Enable Pylint and run linter">
    </testcase>
    <testcase name="Linting Scenarios Disable Pycodestyle and run linter" time="0.001" classname="Disable Pycodestyle and run linter">
    </testcase>
    <testcase name="Linting Scenarios Enable Pycodestyle and run linter" time="0.002" classname="Enable Pycodestyle and run linter">
    </testcase>
    <testcase name="Linting Scenarios Disable Pydocstyle and run linter" time="0" classname="Disable Pydocstyle and run linter">
    </testcase>
    <testcase name="Linting Scenarios Enable Pydocstyle and run linter" time="0.001" classname="Enable Pydocstyle and run linter">
    </testcase>
    <testcase name="Linting Scenarios PyLint enabled with minimal checkers" time="0.002" classname="PyLint enabled with minimal checkers">
    </testcase>
    <testcase name="Linting Scenarios PyLint disabled with minimal checkers" time="0.001" classname="PyLint disabled with minimal checkers">
    </testcase>
    <testcase name="Linting Scenarios PyLint enabled without minimal checkers" time="0.002" classname="PyLint enabled without minimal checkers">
    </testcase>
    <testcase name="Linting Scenarios PyLint disabled without minimal checkers" time="0.001" classname="PyLint disabled without minimal checkers">
    </testcase>
    <testcase name="Linting Scenarios Check Flake8 messages" time="0.002" classname="Check Flake8 messages">
    </testcase>
    <testcase name="Linting Scenarios Check Pylint messages" time="0.002" classname="Check Pylint messages">
    </testcase>
    <testcase name="Linting Scenarios Check Pycodestyle messages" time="0.002" classname="Check Pycodestyle messages">
    </testcase>
    <testcase name="Linting Scenarios Check Pydocstyle messages" time="0.001" classname="Check Pydocstyle messages">
    </testcase>
    <testcase name="Linting Scenarios Three line output counted as one message (Pylint)" time="0.001" classname="Three line output counted as one message (Pylint)">
    </testcase>
  </testsuite>
  <testsuite name="Linting Products" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/linters/lint.unit.test.js" failures="0" time="0.001">
    <testcase name="Linting Products All linting products are represented by linters" time="0.001" classname="All linting products are represented by linters">
    </testcase>
    <testcase name="Linting Products All linters match linting products" time="0" classname="All linters match linting products">
    </testcase>
    <testcase name="Linting Products All linting product names match linter IDs" time="0" classname="All linting product names match linter IDs">
    </testcase>
  </testsuite>
  <testsuite name="Linting - Linter Commands" timestamp="2021-11-08T22:03:14" tests="11" file="/home/don/development/vsc/vscode-python/out/test/linters/linterCommands.unit.test.js" failures="0" time="0.002">
    <testcase name="Linting - Linter Commands Commands are registered" time="0" classname="Commands are registered">
    </testcase>
    <testcase name="Linting - Linter Commands Run Linting method will lint all open files" time="0" classname="Run Linting method will lint all open files">
    </testcase>
    <testcase name="Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;Enable&apos; and select nothing" time="0" classname="Enable linting should check if linting is enabled, and display current state of &apos;Enable&apos; and select nothing">
    </testcase>
    <testcase name="Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;Enable&apos; and select &apos;Enable&apos;" time="0" classname="Enable linting should check if linting is enabled, and display current state of &apos;Enable&apos; and select &apos;Enable&apos;">
    </testcase>
    <testcase name="Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;Enable&apos; and select &apos;Disable&apos;" time="0.001" classname="Enable linting should check if linting is enabled, and display current state of &apos;Enable&apos; and select &apos;Disable&apos;">
    </testcase>
    <testcase name="Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;Disable&apos; and select &apos;Enable&apos;" time="0" classname="Enable linting should check if linting is enabled, and display current state of &apos;Disable&apos; and select &apos;Enable&apos;">
    </testcase>
    <testcase name="Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;Disable&apos; and select &apos;Disable&apos;" time="0" classname="Enable linting should check if linting is enabled, and display current state of &apos;Disable&apos; and select &apos;Disable&apos;">
    </testcase>
    <testcase name="Linting - Linter Commands Set Linter should display a quickpick" time="0" classname="Set Linter should display a quickpick">
    </testcase>
    <testcase name="Linting - Linter Commands Set Linter should display a quickpick and currently active linter when only one is enabled" time="0.001" classname="Set Linter should display a quickpick and currently active linter when only one is enabled">
    </testcase>
    <testcase name="Linting - Linter Commands Set Linter should display a quickpick and with message about multiple linters being enabled" time="0" classname="Set Linter should display a quickpick and with message about multiple linters being enabled">
    </testcase>
    <testcase name="Linting - Linter Commands Selecting a linter should display warning message about multiple linters" time="0" classname="Selecting a linter should display warning message about multiple linters">
    </testcase>
  </testsuite>
  <testsuite name="Linting - Linter Manager" timestamp="2021-11-08T22:03:14" tests="15" file="/home/don/development/vsc/vscode-python/out/test/linters/linterManager.unit.test.js" failures="0" time="0.002">
    <testcase name="Linting - Linter Manager Get all linters will return a list of all linters" time="0" classname="Get all linters will return a list of all linters">
    </testcase>
    <testcase name="Linting - Linter Manager Get linter info for non-linter product should throw an exception" time="0" classname="Get linter info for non-linter product should throw an exception">
    </testcase>
    <testcase name="Linting - Linter Manager Pylint configuration file watch" time="0" classname="Pylint configuration file watch">
    </testcase>
    <testcase name="Linting - Linter Manager Enable linting should update config (enable) &amp; (without a resource)" time="0.001" classname="Enable linting should update config (enable) &amp; (without a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager Enable linting should update config (disable) &amp; (without a resource)" time="0" classname="Enable linting should update config (disable) &amp; (without a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager getActiveLinters will check if linter is enabled and in silent mode (without a resource)" time="0" classname="getActiveLinters will check if linter is enabled and in silent mode (without a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager setActiveLintersAsync with invalid products does nothing (without a resource)" time="0" classname="setActiveLintersAsync with invalid products does nothing (without a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager setActiveLintersAsync with single product will disable it then enable it (without a resource)" time="0" classname="setActiveLintersAsync with single product will disable it then enable it (without a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager setActiveLintersAsync with single product will disable all existing then enable the necessary two (without a resource)" time="0" classname="setActiveLintersAsync with single product will disable all existing then enable the necessary two (without a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager Enable linting should update config (enable) &amp; (with a resource)" time="0" classname="Enable linting should update config (enable) &amp; (with a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager Enable linting should update config (disable) &amp; (with a resource)" time="0" classname="Enable linting should update config (disable) &amp; (with a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager getActiveLinters will check if linter is enabled and in silent mode (with a resource)" time="0" classname="getActiveLinters will check if linter is enabled and in silent mode (with a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager setActiveLintersAsync with invalid products does nothing (with a resource)" time="0" classname="setActiveLintersAsync with invalid products does nothing (with a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager setActiveLintersAsync with single product will disable it then enable it (with a resource)" time="0" classname="setActiveLintersAsync with single product will disable it then enable it (with a resource)">
    </testcase>
    <testcase name="Linting - Linter Manager setActiveLintersAsync with single product will disable all existing then enable the necessary two (with a resource)" time="0.001" classname="setActiveLintersAsync with single product will disable all existing then enable the necessary two (with a resource)">
    </testcase>
  </testsuite>
  <testsuite name="Linting - MyPy" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/linters/mypy.unit.test.js" failures="0" time="0">
    <testcase name="Linting - MyPy regex" time="0" classname="regex">
    </testcase>
    <testcase name="Linting - MyPy regex excludes unexpected files" time="0" classname="regex excludes unexpected files">
    </testcase>
    <testcase name="Linting - MyPy getRegex escapes filename correctly" time="0" classname="getRegex escapes filename correctly">
    </testcase>
  </testsuite>
  <testsuite name="Pylint - Function runLinter()" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/linters/pylint.unit.test.js" failures="0" time="0.002">
    <testcase name="Pylint - Function runLinter() Test pylint with default settings." time="0.001" classname="Test pylint with default settings.">
    </testcase>
    <testcase name="Pylint - Function runLinter() Message returned by runLinter() is as expected" time="0.001" classname="Message returned by runLinter() is as expected">
    </testcase>
  </testsuite>
  <testsuite name="Linters Service Registry" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/linters/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Linters Service Registry Ensure services are registered" time="0" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="LaunchJson CodeAction Provider" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/providers/codeActionProvider/launchJsonCodeActionProvider.unit.test.js" failures="0" time="0">
    <testcase name="LaunchJson CodeAction Provider Ensure correct code action is returned if diagnostic message equals `Incorrect type. Expected &quot;string&quot;.`" time="0" classname="Ensure correct code action is returned if diagnostic message equals `Incorrect type. Expected &quot;string&quot;.`">
    </testcase>
    <testcase name="LaunchJson CodeAction Provider Ensure no code action is returned if diagnostic message does not equal `Incorrect type. Expected &quot;string&quot;.`" time="0" classname="Ensure no code action is returned if diagnostic message does not equal `Incorrect type. Expected &quot;string&quot;.`">
    </testcase>
  </testsuite>
  <testsuite name="Code Action Provider service" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/providers/codeActionProvider/main.unit.test.js" failures="0" time="0.005">
    <testcase name="Code Action Provider service Code actions are registered correctly" time="0.005" classname="Code actions are registered correctly">
    </testcase>
  </testsuite>
  <testsuite name="Python CodeAction Provider" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/providers/codeActionProvider/pythonCodeActionsProvider.unit.test.js" failures="0" time="0.001">
    <testcase name="Python CodeAction Provider Ensure it always returns a source.organizeImports CodeAction" time="0" classname="Ensure it always returns a source.organizeImports CodeAction">
    </testcase>
    <testcase name="Python CodeAction Provider Ensure it does not returns a source.organizeImports CodeAction for Notebook Cells" time="0.001" classname="Ensure it does not returns a source.organizeImports CodeAction for Notebook Cells">
    </testcase>
  </testsuite>
  <testsuite name="Import Sort Provider" timestamp="2021-11-08T22:03:14" tests="15" file="/home/don/development/vsc/vscode-python/out/test/providers/importSortProvider.unit.test.js" failures="0" time="0.010000000000000002">
    <testcase name="Import Sort Provider Ensure command is registered" time="0" classname="Ensure command is registered">
    </testcase>
    <testcase name="Import Sort Provider Ensure message is displayed when no doc is opened and uri isn&apos;t provided" time="0" classname="Ensure message is displayed when no doc is opened and uri isn&apos;t provided">
    </testcase>
    <testcase name="Import Sort Provider Ensure message is displayed when uri isn&apos;t provided and current doc is non-python" time="0.001" classname="Ensure message is displayed when uri isn&apos;t provided and current doc is non-python">
    </testcase>
    <testcase name="Import Sort Provider Ensure document is opened" time="0.001" classname="Ensure document is opened">
    </testcase>
    <testcase name="Import Sort Provider Ensure no edits are provided when there is only one line" time="0" classname="Ensure no edits are provided when there is only one line">
    </testcase>
    <testcase name="Import Sort Provider Ensure no edits are provided when there are no lines" time="0" classname="Ensure no edits are provided when there are no lines">
    </testcase>
    <testcase name="Import Sort Provider Ensure empty line is added when line does not end with an empty line" time="0.001" classname="Ensure empty line is added when line does not end with an empty line">
    </testcase>
    <testcase name="Import Sort Provider Ensure no edits are provided when there is only one line (when using provider method)" time="0" classname="Ensure no edits are provided when there is only one line (when using provider method)">
    </testcase>
    <testcase name="Import Sort Provider Ensure no edits are provided when there are no lines (when using provider method)" time="0.001" classname="Ensure no edits are provided when there are no lines (when using provider method)">
    </testcase>
    <testcase name="Import Sort Provider Ensure stdin is used for sorting (with custom isort path)" time="0.002" classname="Ensure stdin is used for sorting (with custom isort path)">
    </testcase>
    <testcase name="Import Sort Provider Ensure stdin is used for sorting" time="0.001" classname="Ensure stdin is used for sorting">
    </testcase>
    <testcase name="Import Sort Provider If a second sort command is initiated before the execution of first one is finished, discard the result from first isort process" time="0.001" classname="If a second sort command is initiated before the execution of first one is finished, discard the result from first isort process">
    </testcase>
    <testcase name="Import Sort Provider If isort raises a warning message related to isort5 upgrade guide, show message" time="0.001" classname="If isort raises a warning message related to isort5 upgrade guide, show message">
    </testcase>
    <testcase name="Import Sort Provider If user clicks show output on the isort5 warning prompt, show the Python output" time="0" classname="If user clicks show output on the isort5 warning prompt, show the Python output">
    </testcase>
    <testcase name="Import Sort Provider If user clicks do not show again on the isort5 warning prompt, do not show the prompt again" time="0.001" classname="If user clicks do not show again on the isort5 warning prompt, do not show the prompt again">
    </testcase>
  </testsuite>
  <testsuite name="REPL Provider" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/providers/repl.unit.test.js" failures="0" time="0.002">
    <testcase name="REPL Provider Ensure command is registered" time="0.001" classname="Ensure command is registered">
    </testcase>
    <testcase name="REPL Provider Ensure command handler is disposed" time="0" classname="Ensure command handler is disposed">
    </testcase>
    <testcase name="REPL Provider Ensure execution is carried smoothly in the handler if there are no errors" time="0.001" classname="Ensure execution is carried smoothly in the handler if there are no errors">
    </testcase>
  </testsuite>
  <testsuite name="Common Providers Service Registry" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/providers/serviceRegistry.unit.test.js" failures="0" time="0">
    <testcase name="Common Providers Service Registry Ensure services are registered" time="0" classname="Ensure services are registered">
    </testcase>
  </testsuite>
  <testsuite name="Shebang detection" timestamp="2021-11-08T22:03:14" tests="11" file="/home/don/development/vsc/vscode-python/out/test/providers/shebangCodeLenseProvider.unit.test.js" failures="0" time="0.004">
    <testcase name="Shebang detection Shebang should be empty when first line is empty when resolving shebang as interpreter" time="0" classname="Shebang should be empty when first line is empty when resolving shebang as interpreter">
    </testcase>
    <testcase name="Shebang detection Shebang should be empty when first line is empty when not resolving shebang as interpreter" time="0" classname="Shebang should be empty when first line is empty when not resolving shebang as interpreter">
    </testcase>
    <testcase name="Shebang detection Shebang should be returned as it is when not resolving shebang as interpreter" time="0.001" classname="Shebang should be returned as it is when not resolving shebang as interpreter">
    </testcase>
    <testcase name="Shebang detection Shebang should be empty when python path is invalid in shebang" time="0" classname="Shebang should be empty when python path is invalid in shebang">
    </testcase>
    <testcase name="Shebang detection Shebang should be returned when python path is valid" time="0" classname="Shebang should be returned when python path is valid">
    </testcase>
    <testcase name="Shebang detection Shebang should be returned when python path is valid and text is&apos;/usr/bin/env python&apos;" time="0.001" classname="Shebang should be returned when python path is valid and text is&apos;/usr/bin/env python&apos;">
    </testcase>
    <testcase name="Shebang detection Shebang should be returned when python path is valid and text is&apos;/usr/bin/env python&apos; and is windows" time="0" classname="Shebang should be returned when python path is valid and text is&apos;/usr/bin/env python&apos; and is windows">
    </testcase>
    <testcase name="Shebang detection No code lens when there&apos;s no shebang" time="0" classname="No code lens when there&apos;s no shebang">
    </testcase>
    <testcase name="Shebang detection No code lens when shebang is an empty string" time="0.001" classname="No code lens when shebang is an empty string">
    </testcase>
    <testcase name="Shebang detection No code lens when python path in settings is the same as that in shebang" time="0.001" classname="No code lens when python path in settings is the same as that in shebang">
    </testcase>
    <testcase name="Shebang detection Code lens returned when python path in settings is different to one in shebang" time="0" classname="Code lens returned when python path in settings is different to one in shebang">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Provider" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/providers/terminal.unit.test.js" failures="0" time="0.001">
    <testcase name="Terminal Provider Ensure command is registered" time="0" classname="Ensure command is registered">
    </testcase>
    <testcase name="Terminal Provider Ensure command handler is disposed" time="0" classname="Ensure command handler is disposed">
    </testcase>
    <testcase name="Terminal Provider Ensure terminal is created and displayed when command is invoked" time="0.001" classname="Ensure terminal is created and displayed when command is invoked">
    </testcase>
  </testsuite>
  <testsuite name="terminal.activateCurrentTerminal setting" timestamp="2021-11-08T22:03:14" tests="5" file="/home/don/development/vsc/vscode-python/out/test/providers/terminal.unit.test.js" failures="0" time="0.003">
    <testcase name="Terminal Provider terminal.activateCurrentTerminal setting If terminal.activateCurrentTerminal setting is set, provided terminal should be activated" time="0.001" classname="If terminal.activateCurrentTerminal setting is set, provided terminal should be activated">
    </testcase>
    <testcase name="Terminal Provider terminal.activateCurrentTerminal setting If terminal.activateCurrentTerminal setting is not set, provided terminal should not be activated" time="0.001" classname="If terminal.activateCurrentTerminal setting is not set, provided terminal should not be activated">
    </testcase>
    <testcase name="Terminal Provider terminal.activateCurrentTerminal setting If terminal.activateCurrentTerminal setting is set, but hideFromUser is true, provided terminal should not be activated" time="0" classname="If terminal.activateCurrentTerminal setting is set, but hideFromUser is true, provided terminal should not be activated">
    </testcase>
    <testcase name="Terminal Provider terminal.activateCurrentTerminal setting terminal.activateCurrentTerminal setting is set but provided terminal is undefined" time="0" classname="terminal.activateCurrentTerminal setting is set but provided terminal is undefined">
    </testcase>
    <testcase name="Terminal Provider terminal.activateCurrentTerminal setting Exceptions are swallowed if initializing terminal provider fails" time="0.001" classname="Exceptions are swallowed if initializing terminal provider fails">
    </testcase>
  </testsuite>
  <testsuite name="pyenvs info - getEnvDisplayString()" timestamp="2021-11-08T22:03:14" tests="10" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/env.unit.test.js" failures="0" time="0.001">
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python&quot;" time="0" classname="&quot;Python&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python 3.8.1 64-bit (&apos;my-env&apos;: venv)&quot;" time="0.001" classname="&quot;Python 3.8.1 64-bit (&apos;my-env&apos;: venv)&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python 3.8.1&quot;" time="0" classname="&quot;Python 3.8.1&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python 64-bit&quot;" time="0" classname="&quot;Python 64-bit&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python 3.8.1 64-bit&quot;" time="0" classname="&quot;Python 3.8.1 64-bit&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python (&apos;my-env&apos;)&quot;" time="0" classname="&quot;Python (&apos;my-env&apos;)&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python (venv)&quot;" time="0" classname="&quot;Python (venv)&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python (&apos;my-env&apos;: venv)&quot;" time="0" classname="&quot;Python (&apos;my-env&apos;: venv)&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python&quot;" time="0" classname="&quot;Python&quot;">
    </testcase>
    <testcase name="pyenvs info - getEnvDisplayString() &quot;Python (&apos;my-env&apos;)&quot;" time="0" classname="&quot;Python (&apos;my-env&apos;)&quot;">
    </testcase>
  </testsuite>
  <testsuite name="pyenvs info - PyEnvKind" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/envKind.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - PyEnvKind all Python env kinds are covered" time="0" classname="all Python env kinds are covered">
    </testcase>
  </testsuite>
  <testsuite name="getKindDisplayName()" timestamp="2021-11-08T22:03:14" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/envKind.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="known" timestamp="2021-11-08T22:03:14" tests="12" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/envKind.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-system" time="0" classname="check global-system">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-mac-default" time="0" classname="check global-mac-default">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-windows-store" time="0" classname="check global-windows-store">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-pyenv" time="0" classname="check global-pyenv">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-conda-base" time="0" classname="check global-conda-base">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-poetry" time="0" classname="check global-poetry">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check global-custom" time="0" classname="check global-custom">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check virt-venv" time="0" classname="check virt-venv">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check virt-virtualenv" time="0" classname="check virt-virtualenv">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check virt-virtualenvwrapper" time="0" classname="check virt-virtualenvwrapper">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check virt-pipenv" time="0" classname="check virt-pipenv">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() known check virt-conda" time="0" classname="check virt-conda">
    </testcase>
  </testsuite>
  <testsuite name="not known" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/envKind.unit.test.js" failures="0" time="0.001">
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() not known check unknown" time="0.001" classname="check unknown">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() not known check global-other" time="0" classname="check global-other">
    </testcase>
    <testcase name="pyenvs info - PyEnvKind getKindDisplayName() not known check virt-other" time="0" classname="check virt-other">
    </testcase>
  </testsuite>
  <testsuite name="getPrioritizedEnvKinds()" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/envKind.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - PyEnvKind getPrioritizedEnvKinds() all Python env kinds are covered" time="0" classname="all Python env kinds are covered">
    </testcase>
  </testsuite>
  <testsuite name="pyenvs info - getShortVersionString" timestamp="2021-11-08T22:03:14" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - getShortVersionString conversion works for &apos;0.9.2b2&apos;" time="0" classname="conversion works for &apos;0.9.2b2&apos;">
    </testcase>
    <testcase name="pyenvs info - getShortVersionString conversion works for &apos;3.3.1&apos;" time="0" classname="conversion works for &apos;3.3.1&apos;">
    </testcase>
    <testcase name="pyenvs info - getShortVersionString conversion works for &apos;3.9.0rc1&apos;" time="0" classname="conversion works for &apos;3.9.0rc1&apos;">
    </testcase>
    <testcase name="pyenvs info - getShortVersionString conversion works for &apos;2.7.11a3&apos;" time="0" classname="conversion works for &apos;2.7.11a3&apos;">
    </testcase>
    <testcase name="pyenvs info - getShortVersionString conversion works for final" time="0" classname="conversion works for final">
    </testcase>
  </testsuite>
  <testsuite name="pyenvs info - parseVersion" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - parseVersion empty string results in empty version" time="0" classname="empty string results in empty version">
    </testcase>
  </testsuite>
  <testsuite name="full versions (short)" timestamp="2021-11-08T22:03:14" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - parseVersion full versions (short) conversion works for &apos;0.9.2b2&apos;" time="0" classname="conversion works for &apos;0.9.2b2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (short) conversion works for &apos;3.3.1&apos;" time="0" classname="conversion works for &apos;3.3.1&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (short) conversion works for &apos;3.9.0rc1&apos;" time="0" classname="conversion works for &apos;3.9.0rc1&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (short) conversion works for &apos;2.7.11a3&apos;" time="0" classname="conversion works for &apos;2.7.11a3&apos;">
    </testcase>
  </testsuite>
  <testsuite name="full versions (long)" timestamp="2021-11-08T22:03:14" tests="9" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0.001">
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;0.9.2-beta2&apos;" time="0" classname="conversion works for &apos;0.9.2-beta2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;3.3.1-final&apos;" time="0.001" classname="conversion works for &apos;3.3.1-final&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;3.3.1-final0&apos;" time="0" classname="conversion works for &apos;3.3.1-final0&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;3.9.0-candidate1&apos;" time="0" classname="conversion works for &apos;3.9.0-candidate1&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;2.7.11-alpha3&apos;" time="0" classname="conversion works for &apos;2.7.11-alpha3&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;0.9.2.beta.2&apos;" time="0" classname="conversion works for &apos;0.9.2.beta.2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;3.3.1.final.0&apos;" time="0" classname="conversion works for &apos;3.3.1.final.0&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;3.9.0.candidate.1&apos;" time="0" classname="conversion works for &apos;3.9.0.candidate.1&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion full versions (long) conversion works for &apos;2.7.11.alpha.3&apos;" time="0" classname="conversion works for &apos;2.7.11.alpha.3&apos;">
    </testcase>
  </testsuite>
  <testsuite name="partial versions" timestamp="2021-11-08T22:03:14" tests="9" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0.001">
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;3.7.1&apos;" time="0" classname="conversion works for &apos;3.7.1&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;3.7&apos;" time="0" classname="conversion works for &apos;3.7&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;3&apos;" time="0" classname="conversion works for &apos;3&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;37&apos;" time="0.001" classname="conversion works for &apos;37&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;371&apos;" time="0" classname="conversion works for &apos;371&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;3102&apos;" time="0" classname="conversion works for &apos;3102&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;2.7&apos;" time="0" classname="conversion works for &apos;2.7&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;2&apos;" time="0" classname="conversion works for &apos;2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion partial versions conversion works for &apos;27&apos;" time="0" classname="conversion works for &apos;27&apos;">
    </testcase>
  </testsuite>
  <testsuite name="other forms" timestamp="2021-11-08T22:03:14" tests="17" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3&apos;" time="0" classname="conversion works for &apos;python3&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8&apos;" time="0" classname="conversion works for &apos;python3.8&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8.1&apos;" time="0" classname="conversion works for &apos;python3.8.1&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8.1b2&apos;" time="0" classname="conversion works for &apos;python3.8.1b2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python-3&apos;" time="0" classname="conversion works for &apos;python-3&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8b2&apos;" time="0" classname="conversion works for &apos;python3.8b2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python38b2&apos;" time="0" classname="conversion works for &apos;python38b2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python381b2&apos;" time="0" classname="conversion works for &apos;python381b2&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.exe&apos;" time="0" classname="conversion works for &apos;python3.exe&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8.exe&apos;" time="0" classname="conversion works for &apos;python3.8.exe&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8.1.exe&apos;" time="0" classname="conversion works for &apos;python3.8.1.exe&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;python3.8.1b2.exe&apos;" time="0" classname="conversion works for &apos;python3.8.1b2.exe&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;3.8.1.build123.revDEADBEEF&apos;" time="0" classname="conversion works for &apos;3.8.1.build123.revDEADBEEF&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;3.8.1b2.build123.revDEADBEEF&apos;" time="0" classname="conversion works for &apos;3.8.1b2.build123.revDEADBEEF&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;/x/y/z/python38/bin/python&apos;" time="0" classname="conversion works for &apos;/x/y/z/python38/bin/python&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;/x/y/z/python/38/bin/python&apos;" time="0" classname="conversion works for &apos;/x/y/z/python/38/bin/python&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion other forms conversion works for &apos;/x/y/z/python/38/bin/python&apos;" time="0" classname="conversion works for &apos;/x/y/z/python/38/bin/python&apos;">
    </testcase>
  </testsuite>
  <testsuite name="bogus input" timestamp="2021-11-08T22:03:14" tests="6" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - parseVersion bogus input conversion does not work for &apos;py.3.7&apos;" time="0" classname="conversion does not work for &apos;py.3.7&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion bogus input conversion does not work for &apos;py3.7.&apos;" time="0" classname="conversion does not work for &apos;py3.7.&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion bogus input conversion does not work for &apos;python.3&apos;" time="0" classname="conversion does not work for &apos;python.3&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion bogus input conversion does not work for &apos;spam&apos;" time="0" classname="conversion does not work for &apos;spam&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion bogus input conversion does not work for &apos;python.exe&apos;" time="0" classname="conversion does not work for &apos;python.exe&apos;">
    </testcase>
    <testcase name="pyenvs info - parseVersion bogus input conversion does not work for &apos;python&apos;" time="0" classname="conversion does not work for &apos;python&apos;">
    </testcase>
  </testsuite>
  <testsuite name="pyenvs info - compareSemVerLikeVersions" timestamp="2021-11-08T22:03:14" tests="9" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/info/pythonVersion.unit.test.js" failures="0" time="0">
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19} and {&quot;major&quot;:3,&quot;minor&quot;:7,&quot;patch&quot;:4}" time="0" classname="Compare versions {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19} and {&quot;major&quot;:3,&quot;minor&quot;:7,&quot;patch&quot;:4}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19} and {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19}" time="0" classname="Compare versions {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19} and {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:7,&quot;patch&quot;:4} and {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:7,&quot;patch&quot;:4} and {&quot;major&quot;:2,&quot;minor&quot;:7,&quot;patch&quot;:19}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:8,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:8,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:8,&quot;patch&quot;:1}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:8,&quot;patch&quot;:1}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:0} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:0} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1}">
    </testcase>
    <testcase name="pyenvs info - compareSemVerLikeVersions Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:0}" time="0" classname="Compare versions {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:1} and {&quot;major&quot;:3,&quot;minor&quot;:9,&quot;patch&quot;:0}">
    </testcase>
  </testsuite>
  <testsuite name="Python envs locators - Locators" timestamp="2021-11-08T22:03:14" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="onChanged consolidates" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators.unit.test.js" failures="0" time="0.001">
    <testcase name="Python envs locators - Locators onChanged consolidates one" time="0.001" classname="one">
    </testcase>
    <testcase name="Python envs locators - Locators onChanged consolidates many" time="0" classname="many">
    </testcase>
  </testsuite>
  <testsuite name="iterEnvs() consolidates" timestamp="2021-11-08T22:03:14" tests="6" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators.unit.test.js" failures="0" time="0.002">
    <testcase name="Python envs locators - Locators iterEnvs() consolidates no envs" time="0" classname="no envs">
    </testcase>
    <testcase name="Python envs locators - Locators iterEnvs() consolidates one" time="0.001" classname="one">
    </testcase>
    <testcase name="Python envs locators - Locators iterEnvs() consolidates many" time="0" classname="many">
    </testcase>
    <testcase name="Python envs locators - Locators iterEnvs() consolidates with query" time="0" classname="with query">
    </testcase>
    <testcase name="Python envs locators - Locators iterEnvs() consolidates iterate out of order" time="0" classname="iterate out of order">
    </testcase>
    <testcase name="Python envs locators - Locators iterEnvs() consolidates iterate intermingled" time="0.001" classname="iterate intermingled">
    </testcase>
  </testsuite>
  <testsuite name="Python envs locator - Environments Reducer" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/envsReducer.unit.test.js" failures="0" time="0">
    <testcase name="Python envs locator - Environments Reducer onChanged fires iff onChanged from locator manager fires" time="0" classname="onChanged fires iff onChanged from locator manager fires">
    </testcase>
  </testsuite>
  <testsuite name="iterEnvs()" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/envsReducer.unit.test.js" failures="0" time="0.002">
    <testcase name="Python envs locator - Environments Reducer iterEnvs() Iterator only yields unique environments" time="0.001" classname="Iterator only yields unique environments">
    </testcase>
    <testcase name="Python envs locator - Environments Reducer iterEnvs() Updates are applied correctly" time="0.001" classname="Updates are applied correctly">
    </testcase>
    <testcase name="Python envs locator - Environments Reducer iterEnvs() Updates to environments from the incoming iterator replaces the previous info" time="0" classname="Updates to environments from the incoming iterator replaces the previous info">
    </testcase>
  </testsuite>
  <testsuite name="Python envs locator - Environments Resolver" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/envsResolver.unit.test.js" failures="0" time="0.001">
    <testcase name="Python envs locator - Environments Resolver onChanged fires iff onChanged from resolver fires" time="0.001" classname="onChanged fires iff onChanged from resolver fires">
    </testcase>
  </testsuite>
  <testsuite name="iterEnvs()" timestamp="2021-11-08T22:03:14" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/envsResolver.unit.test.js" failures="0" time="0.01">
    <testcase name="Python envs locator - Environments Resolver iterEnvs() Iterator yields environments after resolving basic envs received from parent iterator" time="0.005" classname="Iterator yields environments after resolving basic envs received from parent iterator">
    </testcase>
    <testcase name="Python envs locator - Environments Resolver iterEnvs() Updates for environments are sent correctly followed by the null event" time="0.002" classname="Updates for environments are sent correctly followed by the null event">
    </testcase>
    <testcase name="Python envs locator - Environments Resolver iterEnvs() If fetching interpreter info fails, it is not reported in the final list of envs" time="0.001" classname="If fetching interpreter info fails, it is not reported in the final list of envs">
    </testcase>
    <testcase name="Python envs locator - Environments Resolver iterEnvs() Updates to environments from the incoming iterator are applied properly" time="0.002" classname="Updates to environments from the incoming iterator are applied properly">
    </testcase>
  </testsuite>
  <testsuite name="resolveEnv()" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/envsResolver.unit.test.js" failures="0" time="0.008">
    <testcase name="Python envs locator - Environments Resolver resolveEnv() Calls into basic resolver to get environment info, then calls environnment service to resolve environment further and return it" time="0.002" classname="Calls into basic resolver to get environment info, then calls environnment service to resolve environment further and return it">
    </testcase>
    <testcase name="Python envs locator - Environments Resolver resolveEnv() If running interpreter info throws error, return undefined" time="0.005" classname="If running interpreter info throws error, return undefined">
    </testcase>
    <testcase name="Python envs locator - Environments Resolver resolveEnv() If fetching interpreter info fails with stderr, return undefined" time="0.001" classname="If fetching interpreter info fails with stderr, return undefined">
    </testcase>
  </testsuite>
  <testsuite name="Resolver Utils" timestamp="2021-11-08T22:03:14" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Pyenv" timestamp="2021-11-08T22:03:14" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0.001">
    <testcase name="Resolver Utils Pyenv resolveEnv" time="0.001" classname="resolveEnv">
    </testcase>
  </testsuite>
  <testsuite name="Windows store" timestamp="2021-11-08T22:03:14" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0">
    <testcase name="Resolver Utils Windows store resolveEnv" time="0" classname="resolveEnv">
    </testcase>
    <testcase name="Resolver Utils Windows store resolveEnv(string): forbidden path" time="0" classname="resolveEnv(string): forbidden path">
    </testcase>
  </testsuite>
  <testsuite name="Conda" timestamp="2021-11-08T22:03:14" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0.264">
    <testcase name="Resolver Utils Conda resolveEnv (Windows)" time="0.003" classname="resolveEnv (Windows)">
    </testcase>
    <testcase name="Resolver Utils Conda resolveEnv (non-Windows)" time="0.003" classname="resolveEnv (non-Windows)">
    </testcase>
    <testcase name="Resolver Utils Conda resolveEnv: If no conda binary found, resolve as a simple environment" time="0.258" classname="resolveEnv: If no conda binary found, resolve as a simple environment">
    </testcase>
  </testsuite>
  <testsuite name="Simple envs" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0.001">
    <testcase name="Resolver Utils Simple envs resolveEnv" time="0.001" classname="resolveEnv">
    </testcase>
  </testsuite>
  <testsuite name="Globally-installed envs" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0.001">
    <testcase name="Resolver Utils Globally-installed envs resolveEnv" time="0.001" classname="resolveEnv">
    </testcase>
  </testsuite>
  <testsuite name="Windows registry" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/composite/resolverUtils.unit.test.js" failures="0" time="0.009000000000000001">
    <testcase name="Resolver Utils Windows registry If data provided by registry is more informative than kind resolvers, use it to update environment (64bit)" time="0.002" classname="If data provided by registry is more informative than kind resolvers, use it to update environment (64bit)">
    </testcase>
    <testcase name="Resolver Utils Windows registry If data provided by registry is more informative than kind resolvers, use it to update environment (32bit)" time="0.001" classname="If data provided by registry is more informative than kind resolvers, use it to update environment (32bit)">
    </testcase>
    <testcase name="Resolver Utils Windows registry If data provided by registry is less informative than kind resolvers, do not use it to update environment" time="0.006" classname="If data provided by registry is less informative than kind resolvers, do not use it to update environment">
    </testcase>
  </testsuite>
  <testsuite name="Conda Python Version Parser Tests" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/condaLocator.unit.test.js" failures="0" time="0.002">
    <testcase name="Conda Python Version Parser Tests Parsing case1" time="0.001" classname="Parsing case1">
    </testcase>
    <testcase name="Conda Python Version Parser Tests Parsing case2" time="0.001" classname="Parsing case2">
    </testcase>
    <testcase name="Conda Python Version Parser Tests Parsing case3" time="0" classname="Parsing case3">
    </testcase>
    <testcase name="Conda Python Version Parser Tests Parsing case4" time="0" classname="Parsing case4">
    </testcase>
    <testcase name="Conda Python Version Parser Tests Parsing case5" time="0" classname="Parsing case5">
    </testcase>
  </testsuite>
  <testsuite name="CustomVirtualEnvironment Locator" timestamp="2021-11-08T22:03:15" tests="7" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/customVirtualEnvLocator.unit.test.js" failures="0" time="0.020000000000000004">
    <testcase name="CustomVirtualEnvironment Locator iterEnvs(): Windows with both settings set" time="0.006" classname="iterEnvs(): Windows with both settings set">
    </testcase>
    <testcase name="CustomVirtualEnvironment Locator iterEnvs(): Non-Windows with both settings set" time="0.004" classname="iterEnvs(): Non-Windows with both settings set">
    </testcase>
    <testcase name="CustomVirtualEnvironment Locator iterEnvs(): No User home dir set" time="0.003" classname="iterEnvs(): No User home dir set">
    </testcase>
    <testcase name="CustomVirtualEnvironment Locator iterEnvs(): with only venvFolders set" time="0.003" classname="iterEnvs(): with only venvFolders set">
    </testcase>
    <testcase name="CustomVirtualEnvironment Locator iterEnvs(): with only venvPath set" time="0.002" classname="iterEnvs(): with only venvPath set">
    </testcase>
    <testcase name="CustomVirtualEnvironment Locator onChanged fires if venvPath setting changes" time="0.001" classname="onChanged fires if venvPath setting changes">
    </testcase>
    <testcase name="CustomVirtualEnvironment Locator onChanged fires if venvFolders setting changes" time="0.001" classname="onChanged fires if venvFolders setting changes">
    </testcase>
  </testsuite>
  <testsuite name="File System Watching Locator Tests" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/fsWatchingLocator.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="standard structure" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/fsWatchingLocator.unit.test.js" failures="0" time="0.001">
    <testcase name="File System Watching Locator Tests standard structure watching Global" time="0.001" classname="watching Global">
    </testcase>
    <testcase name="File System Watching Locator Tests standard structure watching Workspace" time="0" classname="watching Workspace">
    </testcase>
  </testsuite>
  <testsuite name="flat structure" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/fsWatchingLocator.unit.test.js" failures="0" time="0">
    <testcase name="File System Watching Locator Tests flat structure watching Global" time="0" classname="watching Global">
    </testcase>
    <testcase name="File System Watching Locator Tests flat structure watching Workspace" time="0" classname="watching Workspace">
    </testcase>
  </testsuite>
  <testsuite name="default structure" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/fsWatchingLocator.unit.test.js" failures="0" time="0.001">
    <testcase name="File System Watching Locator Tests default structure watching Global" time="0" classname="watching Global">
    </testcase>
    <testcase name="File System Watching Locator Tests default structure watching Workspace" time="0.001" classname="watching Workspace">
    </testcase>
  </testsuite>
  <testsuite name="GlobalVirtualEnvironment Locator" timestamp="2021-11-08T22:03:15" tests="7" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/globalVirtualEnvironmentLocator.unit.test.js" failures="0" time="0.022">
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): Windows" time="0.005" classname="iterEnvs(): Windows">
    </testcase>
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): Windows (WORKON_HOME NOT set)" time="0.004" classname="iterEnvs(): Windows (WORKON_HOME NOT set)">
    </testcase>
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): Non-Windows" time="0.004" classname="iterEnvs(): Non-Windows">
    </testcase>
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): with depth set" time="0.003" classname="iterEnvs(): with depth set">
    </testcase>
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): Non-Windows (WORKON_HOME not set)" time="0.003" classname="iterEnvs(): Non-Windows (WORKON_HOME not set)">
    </testcase>
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): No User home dir set" time="0.002" classname="iterEnvs(): No User home dir set">
    </testcase>
    <testcase name="GlobalVirtualEnvironment Locator iterEnvs(): No default virtual environment dirs " time="0.001" classname="iterEnvs(): No default virtual environment dirs ">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceLocators" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/index.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="onChanged" timestamp="2021-11-08T22:03:15" tests="7" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/index.unit.test.js" failures="0" time="0.002">
    <testcase name="WorkspaceLocators onChanged no roots" time="0" classname="no roots">
    </testcase>
    <testcase name="WorkspaceLocators onChanged no factories" time="0.001" classname="no factories">
    </testcase>
    <testcase name="WorkspaceLocators onChanged consolidates events across roots" time="0" classname="consolidates events across roots">
    </testcase>
    <testcase name="WorkspaceLocators onChanged does not identify roots during init" time="0.001" classname="does not identify roots during init">
    </testcase>
    <testcase name="WorkspaceLocators onChanged identifies added roots" time="0" classname="identifies added roots">
    </testcase>
    <testcase name="WorkspaceLocators onChanged identifies removed roots" time="0" classname="identifies removed roots">
    </testcase>
    <testcase name="WorkspaceLocators onChanged does not emit events from removed roots" time="0" classname="does not emit events from removed roots">
    </testcase>
  </testsuite>
  <testsuite name="iterEnvs()" timestamp="2021-11-08T22:03:15" tests="15" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/index.unit.test.js" failures="0" time="0.005">
    <testcase name="WorkspaceLocators iterEnvs() no roots" time="0" classname="no roots">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() no factories" time="0" classname="no factories">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() one empty" time="0" classname="one empty">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() one not empty" time="0" classname="one not empty">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() empty locator ignored" time="0.001" classname="empty locator ignored">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() consolidates envs across roots" time="0" classname="consolidates envs across roots">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() query matches a root" time="0.001" classname="query matches a root">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() query matches all roots" time="0" classname="query matches all roots">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() query does not match a root" time="0.001" classname="query does not match a root">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() query has no searchLocation" time="0" classname="query has no searchLocation">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() iterate out of order" time="0" classname="iterate out of order">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() iterate intermingled" time="0" classname="iterate intermingled">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() respects roots set during init" time="0.001" classname="respects roots set during init">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() respects added roots" time="0" classname="respects added roots">
    </testcase>
    <testcase name="WorkspaceLocators iterEnvs() ignores removed roots" time="0.001" classname="ignores removed roots">
    </testcase>
  </testsuite>
  <testsuite name="isMacDefaultPythonPath" timestamp="2021-11-08T22:03:15" tests="8" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/macDefaultLocator.unit.test.js" failures="0" time="0">
    <testcase name="isMacDefaultPythonPath If the Python path is python on OSX, it is a macOS default Python path" time="0" classname="If the Python path is python on OSX, it is a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is python on Windows, it is not a macOS default Python path" time="0" classname="If the Python path is python on Windows, it is not a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is /usr/bin/python on OSX, it is a macOS default Python path" time="0" classname="If the Python path is /usr/bin/python on OSX, it is a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is /usr/bin/python on Linux, it is not a macOS default Python path" time="0" classname="If the Python path is /usr/bin/python on Linux, it is not a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is /usr/bin/python2 on OSX, it is a macOS default Python path" time="0" classname="If the Python path is /usr/bin/python2 on OSX, it is a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is /usr/local/bin/python2 on OSX, it is not a macOS default Python path" time="0" classname="If the Python path is /usr/local/bin/python2 on OSX, it is not a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is /usr/bin/python3 on OSX, it is not a macOS default Python path" time="0" classname="If the Python path is /usr/bin/python3 on OSX, it is not a macOS default Python path">
    </testcase>
    <testcase name="isMacDefaultPythonPath If the Python path is /usr/bin/python3 on Linux, it is not a macOS default Python path" time="0" classname="If the Python path is /usr/bin/python3 on Linux, it is not a macOS default Python path">
    </testcase>
  </testsuite>
  <testsuite name="Poetry Locator" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/poetryLocator.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Windows" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/poetryLocator.unit.test.js" failures="0" time="0.003">
    <testcase name="Poetry Locator Windows iterEnvs()" time="0.003" classname="iterEnvs()">
    </testcase>
  </testsuite>
  <testsuite name="Non-Windows" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/poetryLocator.unit.test.js" failures="0" time="0.002">
    <testcase name="Poetry Locator Non-Windows iterEnvs()" time="0.002" classname="iterEnvs()">
    </testcase>
  </testsuite>
  <testsuite name="Posix Known Path Locator" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/posixKnownPathsLocator.unit.test.js" failures="0" time="0.027">
    <testcase name="Posix Known Path Locator iterEnvs(): get python bin from known test roots" time="0.027" classname="iterEnvs(): get python bin from known test roots">
    </testcase>
  </testsuite>
  <testsuite name="Pyenv Locator Tests" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/pyenvLocator.unit.test.js" failures="0" time="0.002">
    <testcase name="Pyenv Locator Tests iterEnvs()" time="0.002" classname="iterEnvs()">
    </testcase>
  </testsuite>
  <testsuite name="Windows Registry" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/windowsRegistryLocator.unit.test.js" failures="0" time="0.002">
    <testcase name="Windows Registry iterEnvs()" time="0.001" classname="iterEnvs()">
    </testcase>
    <testcase name="Windows Registry iterEnvs(): no registry permission" time="0.001" classname="iterEnvs(): no registry permission">
    </testcase>
    <testcase name="Windows Registry iterEnvs(): partial registry permission" time="0" classname="iterEnvs(): partial registry permission">
    </testcase>
  </testsuite>
  <testsuite name="Windows Store" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/windowsStoreLocator.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Utils" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/windowsStoreLocator.unit.test.js" failures="0" time="0.001">
    <testcase name="Windows Store Utils Store Python Interpreters" time="0.001" classname="Store Python Interpreters">
    </testcase>
  </testsuite>
  <testsuite name="Locator" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/windowsStoreLocator.unit.test.js" failures="0" time="0.001">
    <testcase name="Windows Store Locator iterEnvs()" time="0.001" classname="iterEnvs()">
    </testcase>
  </testsuite>
  <testsuite name="WorkspaceVirtualEnvironment Locator" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locators/lowLevel/workspaceVirtualEnvLocator.unit.test.js" failures="0" time="0.003">
    <testcase name="WorkspaceVirtualEnvironment Locator iterEnvs(): Windows" time="0.002" classname="iterEnvs(): Windows">
    </testcase>
    <testcase name="WorkspaceVirtualEnvironment Locator iterEnvs(): Non-Windows" time="0.001" classname="iterEnvs(): Non-Windows">
    </testcase>
  </testsuite>
  <testsuite name="Python envs locator utils - getQueryFilter" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locatorUtils.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="empty query" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locatorUtils.unit.test.js" failures="0" time="0">
    <testcase name="Python envs locator utils - getQueryFilter empty query all envs kept (query [object Object])" time="0" classname="all envs kept (query [object Object])">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter empty query all envs kept (query [object Object])" time="0" classname="all envs kept (query [object Object])">
    </testcase>
  </testsuite>
  <testsuite name="kinds" timestamp="2021-11-08T22:03:15" tests="9" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locatorUtils.unit.test.js" failures="0" time="0">
    <testcase name="Python envs locator utils - getQueryFilter kinds match none" time="0" classname="match none">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (one kind: unknown)" time="0" classname="match some (one kind: unknown)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (one kind: global-system)" time="0" classname="match some (one kind: global-system)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (one kind: global-windows-store)" time="0" classname="match some (one kind: global-windows-store)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (one kind: global-pyenv)" time="0" classname="match some (one kind: global-pyenv)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (one kind: virt-venv)" time="0" classname="match some (one kind: virt-venv)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (one kind: virt-conda)" time="0" classname="match some (one kind: virt-conda)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match some (many kinds)" time="0" classname="match some (many kinds)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter kinds match all" time="0" classname="match all">
    </testcase>
  </testsuite>
  <testsuite name="searchLocations" timestamp="2021-11-08T22:03:15" tests="12" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locatorUtils.unit.test.js" failures="0" time="0">
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match none" time="0" classname="match none">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match one (multiple locations)" time="0" classname="match one (multiple locations)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match multiple (one location)" time="0" classname="match multiple (one location)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match multiple (one location) uri path ending in &apos;/&apos;" time="0" classname="match multiple (one location) uri path ending in &apos;/&apos;">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match multiple (multiple locations)" time="0" classname="match multiple (multiple locations)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match multiple (include non-searched envs)" time="0" classname="match multiple (include non-searched envs)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match all searched" time="0" classname="match all searched">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match all (including non-searched)" time="0" classname="match all (including non-searched)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match all searched under one root" time="0" classname="match all searched under one root">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match only non-searched envs (empty roots)" time="0" classname="match only non-searched envs (empty roots)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations match only non-searched envs (with unmatched location)" time="0" classname="match only non-searched envs (with unmatched location)">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter searchLocations include non rooted envs by default" time="0" classname="include non rooted envs by default">
    </testcase>
  </testsuite>
  <testsuite name="mixed query" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locatorUtils.unit.test.js" failures="0" time="0">
    <testcase name="Python envs locator utils - getQueryFilter mixed query match none" time="0" classname="match none">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter mixed query match some" time="0" classname="match some">
    </testcase>
    <testcase name="Python envs locator utils - getQueryFilter mixed query match all" time="0" classname="match all">
    </testcase>
  </testsuite>
  <testsuite name="Python envs locator utils - getEnvs" timestamp="2021-11-08T22:03:15" tests="9" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/locatorUtils.unit.test.js" failures="0" time="0">
    <testcase name="Python envs locator utils - getEnvs empty, no update emitter" time="0" classname="empty, no update emitter">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs empty, with unused update emitter" time="0" classname="empty, with unused update emitter">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield one, no update emitter" time="0" classname="yield one, no update emitter">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield one, no update" time="0" classname="yield one, no update">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield one, with update" time="0" classname="yield one, with update">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield many, no update emitter" time="0" classname="yield many, no update emitter">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield many, none updated" time="0" classname="yield many, none updated">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield many, some updated" time="0" classname="yield many, some updated">
    </testcase>
    <testcase name="Python envs locator utils - getEnvs yield many, all updated" time="0" classname="yield many, all updated">
    </testcase>
  </testsuite>
  <testsuite name="Python envs watcher - PythonEnvsWatcher" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/watcher.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="fire()" timestamp="2021-11-08T22:03:15" tests="10" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/watcher.unit.test.js" failures="0" time="0">
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() empty event" time="0" classname="empty event">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;unknown&quot;)" time="0" classname="non-empty event (&quot;unknown&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;global-system&quot;)" time="0" classname="non-empty event (&quot;global-system&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;global-custom&quot;)" time="0" classname="non-empty event (&quot;global-custom&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;global-other&quot;)" time="0" classname="non-empty event (&quot;global-other&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;virt-venv&quot;)" time="0" classname="non-empty event (&quot;virt-venv&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;virt-conda&quot;)" time="0" classname="non-empty event (&quot;virt-conda&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() non-empty event (&quot;virt-other&quot;)" time="0" classname="non-empty event (&quot;virt-other&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() kind-only" time="0" classname="kind-only">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher fire() searchLocation-only" time="0" classname="searchLocation-only">
    </testcase>
  </testsuite>
  <testsuite name="using BasicPythonEnvsChangedEvent" timestamp="2021-11-08T22:03:15" tests="8" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/watcher.unit.test.js" failures="0" time="0">
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent empty event" time="0" classname="empty event">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;unknown&quot;)" time="0" classname="non-empty event (&quot;unknown&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;global-system&quot;)" time="0" classname="non-empty event (&quot;global-system&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;global-custom&quot;)" time="0" classname="non-empty event (&quot;global-custom&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;global-other&quot;)" time="0" classname="non-empty event (&quot;global-other&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;virt-venv&quot;)" time="0" classname="non-empty event (&quot;virt-venv&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;virt-conda&quot;)" time="0" classname="non-empty event (&quot;virt-conda&quot;)">
    </testcase>
    <testcase name="Python envs watcher - PythonEnvsWatcher using BasicPythonEnvsChangedEvent non-empty event (&quot;virt-other&quot;)" time="0" classname="non-empty event (&quot;virt-other&quot;)">
    </testcase>
  </testsuite>
  <testsuite name="Python envs watchers - PythonEnvsWatchers" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/watchers.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="onChanged consolidates" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/base/watchers.unit.test.js" failures="0" time="0">
    <testcase name="Python envs watchers - PythonEnvsWatchers onChanged consolidates empty" time="0" classname="empty">
    </testcase>
    <testcase name="Python envs watchers - PythonEnvsWatchers onChanged consolidates one" time="0" classname="one">
    </testcase>
    <testcase name="Python envs watchers - PythonEnvsWatchers onChanged consolidates many" time="0" classname="many">
    </testcase>
  </testsuite>
  <testsuite name="Environment Identifier" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Conda" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0">
    <testcase name="Environment Identifier Conda Conda layout with conda-meta and python binary in the same directory" time="0" classname="Conda layout with conda-meta and python binary in the same directory">
    </testcase>
    <testcase name="Environment Identifier Conda Conda layout with conda-meta and python binary in a sub directory" time="0" classname="Conda layout with conda-meta and python binary in a sub directory">
    </testcase>
  </testsuite>
  <testsuite name="Pipenv" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Identifier Pipenv Path to a global pipenv environment" time="0" classname="Path to a global pipenv environment">
    </testcase>
    <testcase name="Environment Identifier Pipenv Path to a local pipenv environment with a custom Pipfile name" time="0.001" classname="Path to a local pipenv environment with a custom Pipfile name">
    </testcase>
  </testsuite>
  <testsuite name="Windows Store" timestamp="2021-11-08T22:03:15" tests="21" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0.011000000000000003">
    <testcase name="Environment Identifier Windows Store Path to local app data windows store interpreter (python.exe)" time="0.001" classname="Path to local app data windows store interpreter (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to local app data windows store interpreter app sub-directory (python.exe)" time="0" classname="Path to local app data windows store interpreter app sub-directory (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to program files windows store interpreter app sub-directory (python.exe)" time="0.001" classname="Path to program files windows store interpreter app sub-directory (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Local app data not set (python.exe)" time="0" classname="Local app data not set (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Program files app data not set (python.exe)" time="0.001" classname="Program files app data not set (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path using forward slashes (python.exe)" time="0" classname="Path using forward slashes (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path using long path style slashes (python.exe)" time="0.001" classname="Path using long path style slashes (python.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to local app data windows store interpreter (python3.exe)" time="0" classname="Path to local app data windows store interpreter (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to local app data windows store interpreter app sub-directory (python3.exe)" time="0.001" classname="Path to local app data windows store interpreter app sub-directory (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to program files windows store interpreter app sub-directory (python3.exe)" time="0.002" classname="Path to program files windows store interpreter app sub-directory (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Local app data not set (python3.exe)" time="0" classname="Local app data not set (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Program files app data not set (python3.exe)" time="0" classname="Program files app data not set (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path using forward slashes (python3.exe)" time="0" classname="Path using forward slashes (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path using long path style slashes (python3.exe)" time="0.001" classname="Path using long path style slashes (python3.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to local app data windows store interpreter (python3.8.exe)" time="0.001" classname="Path to local app data windows store interpreter (python3.8.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to local app data windows store interpreter app sub-directory (python3.8.exe)" time="0" classname="Path to local app data windows store interpreter app sub-directory (python3.8.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path to program files windows store interpreter app sub-directory (python3.8.exe)" time="0" classname="Path to program files windows store interpreter app sub-directory (python3.8.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Local app data not set (python3.8.exe)" time="0" classname="Local app data not set (python3.8.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Program files app data not set (python3.8.exe)" time="0.001" classname="Program files app data not set (python3.8.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path using forward slashes (python3.8.exe)" time="0" classname="Path using forward slashes (python3.8.exe)">
    </testcase>
    <testcase name="Environment Identifier Windows Store Path using long path style slashes (python3.8.exe)" time="0.001" classname="Path using long path style slashes (python3.8.exe)">
    </testcase>
  </testsuite>
  <testsuite name="Pyenv" timestamp="2021-11-08T22:03:15" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0.002">
    <testcase name="Environment Identifier Pyenv PYENV_ROOT is not set on non-Windows, fallback to the default value ~/.pyenv" time="0.001" classname="PYENV_ROOT is not set on non-Windows, fallback to the default value ~/.pyenv">
    </testcase>
    <testcase name="Environment Identifier Pyenv PYENV_ROOT is set to a custom value on non-Windows" time="0.001" classname="PYENV_ROOT is set to a custom value on non-Windows">
    </testcase>
  </testsuite>
  <testsuite name="Venv" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0.001">
    <testcase name="Environment Identifier Venv Pyvenv.cfg is in the same directory as the interpreter" time="0.001" classname="Pyvenv.cfg is in the same directory as the interpreter">
    </testcase>
    <testcase name="Environment Identifier Venv Pyvenv.cfg is in the same directory as the interpreter" time="0" classname="Pyvenv.cfg is in the same directory as the interpreter">
    </testcase>
  </testsuite>
  <testsuite name="Virtualenvwrapper" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0.003">
    <testcase name="Environment Identifier Virtualenvwrapper WORKON_HOME is set to its default value ~/.virtualenvs on non-Windows" time="0.002" classname="WORKON_HOME is set to its default value ~/.virtualenvs on non-Windows">
    </testcase>
    <testcase name="Environment Identifier Virtualenvwrapper WORKON_HOME is set to a custom value" time="0.001" classname="WORKON_HOME is set to a custom value">
    </testcase>
  </testsuite>
  <testsuite name="Virtualenv" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentIdentifier.unit.test.js" failures="0" time="0.002">
    <testcase name="Environment Identifier Virtualenv Folder contains activate" time="0.001" classname="Folder contains activate">
    </testcase>
    <testcase name="Environment Identifier Virtualenv Folder contains activate.sh" time="0" classname="Folder contains activate.sh">
    </testcase>
    <testcase name="Environment Identifier Virtualenv Folder contains activate.ps1" time="0.001" classname="Folder contains activate.ps1">
    </testcase>
  </testsuite>
  <testsuite name="Conda and its environments are located correctly" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Conda binary is located correctly" timestamp="2021-11-08T22:03:15" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must not find conda if it is missing" time="0.001" classname="Must not find conda if it is missing">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda using `python.condaPath` setting and prefer it" time="0" classname="Must find conda using `python.condaPath` setting and prefer it">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda on PATH, and prefer it" time="0" classname="Must find conda on PATH, and prefer it">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in the registry" time="0" classname="Must find conda in the registry">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Linux with Anaconda directory name" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.004">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Anaconda directory name Must find conda in /usr/share/Anaconda" time="0.001" classname="Must find conda in /usr/share/Anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Anaconda directory name Must find conda in /usr/local/share/Anaconda" time="0.001" classname="Must find conda in /usr/local/share/Anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Anaconda directory name Must find conda in /opt/Anaconda" time="0.001" classname="Must find conda in /opt/Anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Anaconda directory name Must find conda in /home/user/Anaconda" time="0.001" classname="Must find conda in /home/user/Anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Anaconda directory name Must find conda in /home/user/opt/Anaconda" time="0" classname="Must find conda in /home/user/opt/Anaconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Windows with Anaconda directory name" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with Anaconda directory name Must find conda in D:\ProgramData\Anaconda" time="0" classname="Must find conda in D:\ProgramData\Anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with Anaconda directory name Must find conda in E:\Users\user\Anaconda" time="0.001" classname="Must find conda in E:\Users\user\Anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with Anaconda directory name Must find conda in F:\Users\user\AppData\Local\Continuum\Anaconda" time="0" classname="Must find conda in F:\Users\user\AppData\Local\Continuum\Anaconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Linux with anaconda directory name" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.002">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with anaconda directory name Must find conda in /usr/share/anaconda" time="0.001" classname="Must find conda in /usr/share/anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with anaconda directory name Must find conda in /usr/local/share/anaconda" time="0.001" classname="Must find conda in /usr/local/share/anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with anaconda directory name Must find conda in /opt/anaconda" time="0" classname="Must find conda in /opt/anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with anaconda directory name Must find conda in /home/user/anaconda" time="0" classname="Must find conda in /home/user/anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with anaconda directory name Must find conda in /home/user/opt/anaconda" time="0" classname="Must find conda in /home/user/opt/anaconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Windows with anaconda directory name" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.002">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with anaconda directory name Must find conda in D:\ProgramData\anaconda" time="0.001" classname="Must find conda in D:\ProgramData\anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with anaconda directory name Must find conda in E:\Users\user\anaconda" time="0.001" classname="Must find conda in E:\Users\user\anaconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with anaconda directory name Must find conda in F:\Users\user\AppData\Local\Continuum\anaconda" time="0" classname="Must find conda in F:\Users\user\AppData\Local\Continuum\anaconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Linux with Miniconda directory name" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Miniconda directory name Must find conda in /usr/share/Miniconda" time="0" classname="Must find conda in /usr/share/Miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Miniconda directory name Must find conda in /usr/local/share/Miniconda" time="0" classname="Must find conda in /usr/local/share/Miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Miniconda directory name Must find conda in /opt/Miniconda" time="0" classname="Must find conda in /opt/Miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Miniconda directory name Must find conda in /home/user/Miniconda" time="0" classname="Must find conda in /home/user/Miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with Miniconda directory name Must find conda in /home/user/opt/Miniconda" time="0.001" classname="Must find conda in /home/user/opt/Miniconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Windows with Miniconda directory name" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with Miniconda directory name Must find conda in D:\ProgramData\Miniconda" time="0" classname="Must find conda in D:\ProgramData\Miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with Miniconda directory name Must find conda in E:\Users\user\Miniconda" time="0" classname="Must find conda in E:\Users\user\Miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with Miniconda directory name Must find conda in F:\Users\user\AppData\Local\Continuum\Miniconda" time="0.001" classname="Must find conda in F:\Users\user\AppData\Local\Continuum\Miniconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Linux with miniconda directory name" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with miniconda directory name Must find conda in /usr/share/miniconda" time="0.001" classname="Must find conda in /usr/share/miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with miniconda directory name Must find conda in /usr/local/share/miniconda" time="0" classname="Must find conda in /usr/local/share/miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with miniconda directory name Must find conda in /opt/miniconda" time="0" classname="Must find conda in /opt/miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with miniconda directory name Must find conda in /home/user/miniconda" time="0" classname="Must find conda in /home/user/miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Linux with miniconda directory name Must find conda in /home/user/opt/miniconda" time="0" classname="Must find conda in /home/user/opt/miniconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in well-known locations on Windows with miniconda directory name" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with miniconda directory name Must find conda in D:\ProgramData\miniconda" time="0" classname="Must find conda in D:\ProgramData\miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with miniconda directory name Must find conda in E:\Users\user\miniconda" time="0" classname="Must find conda in E:\Users\user\miniconda">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in well-known locations Must find conda in well-known locations on Windows with miniconda directory name Must find conda in F:\Users\user\AppData\Local\Continuum\miniconda" time="0.001" classname="Must find conda in F:\Users\user\AppData\Local\Continuum\miniconda">
    </testcase>
  </testsuite>
  <testsuite name="Must find conda in environments.txt" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.001">
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in environments.txt Must find conda in environments.txt on Unix" time="0.001" classname="Must find conda in environments.txt on Unix">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda binary is located correctly Must find conda in environments.txt Must find conda in environments.txt on Windows" time="0" classname="Must find conda in environments.txt on Windows">
    </testcase>
  </testsuite>
  <testsuite name="Conda env list is parsed correctly" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/conda.unit.test.js" failures="0" time="0.002">
    <testcase name="Conda and its environments are located correctly Conda env list is parsed correctly Must compute conda environment name from prefix" time="0.001" classname="Must compute conda environment name from prefix">
    </testcase>
    <testcase name="Conda and its environments are located correctly Conda env list is parsed correctly Must iterate conda environments correctly" time="0.001" classname="Must iterate conda environments correctly">
    </testcase>
  </testsuite>
  <testsuite name="Pipenv helper" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pipenv.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="isPipenvEnvironmentRelatedToFolder()" timestamp="2021-11-08T22:03:15" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pipenv.unit.test.js" failures="0" time="0.001">
    <testcase name="Pipenv helper isPipenvEnvironmentRelatedToFolder() If no Pipfile is associated with the environment, return false" time="0" classname="If no Pipfile is associated with the environment, return false">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironmentRelatedToFolder() If a Pipfile is associated with the environment but no pipfile is associated with the folder, return false" time="0.001" classname="If a Pipfile is associated with the environment but no pipfile is associated with the folder, return false">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironmentRelatedToFolder() If a Pipfile is associated with the environment and another is associated with the folder, but the path to both Pipfiles are different, return false" time="0" classname="If a Pipfile is associated with the environment and another is associated with the folder, but the path to both Pipfiles are different, return false">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironmentRelatedToFolder() If a Pipfile is associated with the environment and another is associated with the folder, and the path to both Pipfiles are same, return true" time="0" classname="If a Pipfile is associated with the environment and another is associated with the folder, and the path to both Pipfiles are same, return true">
    </testcase>
  </testsuite>
  <testsuite name="isPipenvEnvironment()" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pipenv.unit.test.js" failures="0" time="0.002">
    <testcase name="Pipenv helper isPipenvEnvironment() If the project layout matches that of a local pipenv environment, return true" time="0" classname="If the project layout matches that of a local pipenv environment, return true">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironment() If not local &amp; dotProject file is missing, return false" time="0.001" classname="If not local &amp; dotProject file is missing, return false">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironment() If not local &amp; dotProject contains invalid path to project, return false" time="0" classname="If not local &amp; dotProject contains invalid path to project, return false">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironment() If not local &amp; the name of the project isn&apos;t used as a prefix in the environment folder, return false" time="0.001" classname="If not local &amp; the name of the project isn&apos;t used as a prefix in the environment folder, return false">
    </testcase>
    <testcase name="Pipenv helper isPipenvEnvironment() If the project layout matches that of a global pipenv environment, return true" time="0" classname="If the project layout matches that of a global pipenv environment, return true">
    </testcase>
  </testsuite>
  <testsuite name="_getAssociatedPipfile()" timestamp="2021-11-08T22:03:15" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pipenv.unit.test.js" failures="0" time="0">
    <testcase name="Pipenv helper _getAssociatedPipfile() Correct Pipfile is returned for folder whose Pipfile lies in the folder directory" time="0" classname="Correct Pipfile is returned for folder whose Pipfile lies in the folder directory">
    </testcase>
    <testcase name="Pipenv helper _getAssociatedPipfile() Correct Pipfile is returned for folder if a custom Pipfile name is being used" time="0" classname="Correct Pipfile is returned for folder if a custom Pipfile name is being used">
    </testcase>
    <testcase name="Pipenv helper _getAssociatedPipfile() Correct Pipfile is returned for folder whose Pipfile lies 3 levels above the folder" time="0" classname="Correct Pipfile is returned for folder whose Pipfile lies 3 levels above the folder">
    </testcase>
    <testcase name="Pipenv helper _getAssociatedPipfile() No Pipfile is returned for folder if no Pipfile exists in the associated directories" time="0" classname="No Pipfile is returned for folder if no Pipfile exists in the associated directories">
    </testcase>
  </testsuite>
  <testsuite name="isPoetryEnvironment Tests" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/poetry.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Global poetry environment" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/poetry.unit.test.js" failures="0" time="0">
    <testcase name="isPoetryEnvironment Tests Global poetry environment Return true if environment folder name matches global env pattern and environment is of virtual env type" time="0" classname="Return true if environment folder name matches global env pattern and environment is of virtual env type">
    </testcase>
    <testcase name="isPoetryEnvironment Tests Global poetry environment Return false if environment folder name does not matches env pattern" time="0" classname="Return false if environment folder name does not matches env pattern">
    </testcase>
    <testcase name="isPoetryEnvironment Tests Global poetry environment Return false if environment folder name matches env pattern but is not of virtual env type" time="0" classname="Return false if environment folder name matches env pattern but is not of virtual env type">
    </testcase>
  </testsuite>
  <testsuite name="Local poetry environment" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/poetry.unit.test.js" failures="0" time="0.002">
    <testcase name="isPoetryEnvironment Tests Local poetry environment Return true if environment folder name matches criteria for local envs" time="0.001" classname="Return true if environment folder name matches criteria for local envs">
    </testcase>
    <testcase name="isPoetryEnvironment Tests Local poetry environment Return false if environment folder name is not named &apos;.venv&apos; for local envs" time="0" classname="Return false if environment folder name is not named &apos;.venv&apos; for local envs">
    </testcase>
    <testcase name="isPoetryEnvironment Tests Local poetry environment Return false if running poetry for project dir as cwd fails (pyproject.toml file is invalid)" time="0.001" classname="Return false if running poetry for project dir as cwd fails (pyproject.toml file is invalid)">
    </testcase>
  </testsuite>
  <testsuite name="Poetry binary is located correctly" timestamp="2021-11-08T22:03:15" tests="6" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/poetry.unit.test.js" failures="0" time="0.002">
    <testcase name="Poetry binary is located correctly Return undefined if pyproject.toml doesn&apos;t exist in cwd" time="0" classname="Return undefined if pyproject.toml doesn&apos;t exist in cwd">
    </testcase>
    <testcase name="Poetry binary is located correctly Return undefined if cwd contains pyproject.toml which does not contain a poetry section" time="0.001" classname="Return undefined if cwd contains pyproject.toml which does not contain a poetry section">
    </testcase>
    <testcase name="Poetry binary is located correctly When user has specified a valid poetry path, use it" time="0" classname="When user has specified a valid poetry path, use it">
    </testcase>
    <testcase name="Poetry binary is located correctly When user hasn&apos;t specified a path, use poetry on PATH if available" time="0" classname="When user hasn&apos;t specified a path, use poetry on PATH if available">
    </testcase>
    <testcase name="Poetry binary is located correctly When poetry is not available on PATH, try using the default poetry location if valid" time="0" classname="When poetry is not available on PATH, try using the default poetry location if valid">
    </testcase>
    <testcase name="Poetry binary is located correctly Return undefined otherwise" time="0.001" classname="Return undefined otherwise">
    </testcase>
  </testsuite>
  <testsuite name="Pyenv Identifier Tests" timestamp="2021-11-08T22:03:15" tests="8" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pyenv.unit.test.js" failures="0" time="0.001">
    <testcase name="Pyenv Identifier Tests The environment variable is set to undefined on Linux, and the interpreter path is in a subfolder of the pyenv folder" time="0" classname="The environment variable is set to undefined on Linux, and the interpreter path is in a subfolder of the pyenv folder">
    </testcase>
    <testcase name="Pyenv Identifier Tests The environment variable is set to undefined on Windows, and the interpreter path is in a subfolder of the pyenv folder" time="0" classname="The environment variable is set to undefined on Windows, and the interpreter path is in a subfolder of the pyenv folder">
    </testcase>
    <testcase name="Pyenv Identifier Tests The environment variable is set to its default value on Linux, and the interpreter path is in a subfolder of the pyenv folder" time="0" classname="The environment variable is set to its default value on Linux, and the interpreter path is in a subfolder of the pyenv folder">
    </testcase>
    <testcase name="Pyenv Identifier Tests The environment variable is set to its default value on Windows, and the interpreter path is in a subfolder of the pyenv folder" time="0.001" classname="The environment variable is set to its default value on Windows, and the interpreter path is in a subfolder of the pyenv folder">
    </testcase>
    <testcase name="Pyenv Identifier Tests The environment variable is set to a custom value on Linux, and the interpreter path is in a subfolder of the pyenv folder" time="0" classname="The environment variable is set to a custom value on Linux, and the interpreter path is in a subfolder of the pyenv folder">
    </testcase>
    <testcase name="Pyenv Identifier Tests The environment variable is set to a custom value on Windows, and the interpreter path is in a subfolder of the pyenv folder" time="0" classname="The environment variable is set to a custom value on Windows, and the interpreter path is in a subfolder of the pyenv folder">
    </testcase>
    <testcase name="Pyenv Identifier Tests The pyenv directory does not exist" time="0" classname="The pyenv directory does not exist">
    </testcase>
    <testcase name="Pyenv Identifier Tests The interpreter path is not in a subfolder of the pyenv folder" time="0" classname="The interpreter path is not in a subfolder of the pyenv folder">
    </testcase>
  </testsuite>
  <testsuite name="Pyenv Versions Parser Test" timestamp="2021-11-08T22:03:15" tests="72" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pyenv.unit.test.js" failures="0" time="0.005">
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [2.7.0]" time="0" classname="Parse pyenv version [2.7.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [2.7-dev]" time="0" classname="Parse pyenv version [2.7-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [2.7.18]" time="0" classname="Parse pyenv version [2.7.18]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [3.9.0]" time="0" classname="Parse pyenv version [3.9.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [3.9-dev]" time="0" classname="Parse pyenv version [3.9-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [3.10-dev]" time="0" classname="Parse pyenv version [3.10-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [activepython-2.7.14]" time="0" classname="Parse pyenv version [activepython-2.7.14]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [activepython-3.6.0]" time="0" classname="Parse pyenv version [activepython-3.6.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [anaconda-4.0.0]" time="0" classname="Parse pyenv version [anaconda-4.0.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [anaconda2-5.3.1]" time="0" classname="Parse pyenv version [anaconda2-5.3.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [anaconda2-2019.07]" time="0" classname="Parse pyenv version [anaconda2-2019.07]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [anaconda3-5.3.1]" time="0" classname="Parse pyenv version [anaconda3-5.3.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [anaconda3-2020.07]" time="0" classname="Parse pyenv version [anaconda3-2020.07]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [graalpython-20.2.0]" time="0" classname="Parse pyenv version [graalpython-20.2.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [ironpython-dev]" time="0" classname="Parse pyenv version [ironpython-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [ironpython-2.7.6.3]" time="0" classname="Parse pyenv version [ironpython-2.7.6.3]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [ironpython-2.7.7]" time="0" classname="Parse pyenv version [ironpython-2.7.7]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [jython-dev]" time="0" classname="Parse pyenv version [jython-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [jython-2.5.0]" time="0" classname="Parse pyenv version [jython-2.5.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [jython-2.5-dev]" time="0" classname="Parse pyenv version [jython-2.5-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [jython-2.5.4-rc1]" time="0" classname="Parse pyenv version [jython-2.5.4-rc1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [jython-2.7.2]" time="0" classname="Parse pyenv version [jython-2.7.2]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [micropython-dev]" time="0" classname="Parse pyenv version [micropython-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [micropython-1.9.3]" time="0" classname="Parse pyenv version [micropython-1.9.3]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [micropython-1.13]" time="0" classname="Parse pyenv version [micropython-1.13]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda-latest]" time="0" classname="Parse pyenv version [miniconda-latest]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda-2.2.2]" time="0" classname="Parse pyenv version [miniconda-2.2.2]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda-3.18.3]" time="0" classname="Parse pyenv version [miniconda-3.18.3]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda2-latest]" time="0" classname="Parse pyenv version [miniconda2-latest]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda2-4.7.12]" time="0" classname="Parse pyenv version [miniconda2-4.7.12]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda3-latest]" time="0" classname="Parse pyenv version [miniconda3-latest]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniconda3-4.7.12]" time="0" classname="Parse pyenv version [miniconda3-4.7.12]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [miniforge3-4.9.2]" time="0" classname="Parse pyenv version [miniforge3-4.9.2]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-c-jit-latest]" time="0.001" classname="Parse pyenv version [pypy-c-jit-latest]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-c-nojit-latest]" time="0" classname="Parse pyenv version [pypy-c-nojit-latest]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-dev]" time="0" classname="Parse pyenv version [pypy-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-stm-2.3]" time="0" classname="Parse pyenv version [pypy-stm-2.3]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-stm-2.5.1]" time="0" classname="Parse pyenv version [pypy-stm-2.5.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-5.4-src]" time="0" classname="Parse pyenv version [pypy-5.4-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-5.4]" time="0.001" classname="Parse pyenv version [pypy-5.4]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-5.7.1-src]" time="0" classname="Parse pyenv version [pypy-5.7.1-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-5.7.1]" time="0" classname="Parse pyenv version [pypy-5.7.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy2-5.4-src]" time="0" classname="Parse pyenv version [pypy2-5.4-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy2-5.4]" time="0" classname="Parse pyenv version [pypy2-5.4]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy2-5.4.1-src]" time="0" classname="Parse pyenv version [pypy2-5.4.1-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy2-5.4.1]" time="0" classname="Parse pyenv version [pypy2-5.4.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy2.7-7.3.1-src]" time="0" classname="Parse pyenv version [pypy2.7-7.3.1-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy2.7-7.3.1]" time="0" classname="Parse pyenv version [pypy2.7-7.3.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3-2.4.0-src]" time="0" classname="Parse pyenv version [pypy3-2.4.0-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3-2.4.0]" time="0" classname="Parse pyenv version [pypy3-2.4.0]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.3-5.2-alpha1-src]" time="0" classname="Parse pyenv version [pypy3.3-5.2-alpha1-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.3-5.2-alpha1]" time="0" classname="Parse pyenv version [pypy3.3-5.2-alpha1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.3-5.5-alpha-src]" time="0" classname="Parse pyenv version [pypy3.3-5.5-alpha-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.3-5.5-alpha]" time="0" classname="Parse pyenv version [pypy3.3-5.5-alpha]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.5-c-jit-latest]" time="0.001" classname="Parse pyenv version [pypy3.5-c-jit-latest]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.5-5.7-beta-src]" time="0" classname="Parse pyenv version [pypy3.5-5.7-beta-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.5-5.7-beta]" time="0" classname="Parse pyenv version [pypy3.5-5.7-beta]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.5-5.7.1-beta-src]" time="0" classname="Parse pyenv version [pypy3.5-5.7.1-beta-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.5-5.7.1-beta]" time="0" classname="Parse pyenv version [pypy3.5-5.7.1-beta]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.6-7.3.1-src]" time="0" classname="Parse pyenv version [pypy3.6-7.3.1-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.6-7.3.1]" time="0" classname="Parse pyenv version [pypy3.6-7.3.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.7-v7.3.5rc3-win64]" time="0" classname="Parse pyenv version [pypy3.7-v7.3.5rc3-win64]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy3.7-v7.3.5-win64]" time="0" classname="Parse pyenv version [pypy3.7-v7.3.5-win64]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy-5.7.1-beta-src]" time="0.001" classname="Parse pyenv version [pypy-5.7.1-beta-src]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pypy]" time="0" classname="Parse pyenv version [pypy]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [pyston-0.6.1]" time="0" classname="Parse pyenv version [pyston-0.6.1]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [stackless-dev]" time="0" classname="Parse pyenv version [stackless-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [stackless-2.7-dev]" time="0" classname="Parse pyenv version [stackless-2.7-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [stackless-3.4-dev]" time="0" classname="Parse pyenv version [stackless-3.4-dev]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [stackless-3.7.5]" time="0" classname="Parse pyenv version [stackless-3.7.5]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [stackless]" time="0.001" classname="Parse pyenv version [stackless]">
    </testcase>
    <testcase name="Pyenv Versions Parser Test Parse pyenv version [unknown]" time="0" classname="Parse pyenv version [unknown]">
    </testcase>
  </testsuite>
  <testsuite name="Pyenv Shims Dir filter tests" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/pyenv.unit.test.js" failures="0" time="0.001">
    <testcase name="Pyenv Shims Dir filter tests isPyenvShimDir: valid case" time="0.001" classname="isPyenvShimDir: valid case">
    </testcase>
    <testcase name="Pyenv Shims Dir filter tests isPyenvShimDir: invalid case" time="0" classname="isPyenvShimDir: invalid case">
    </testcase>
  </testsuite>
  <testsuite name="isVenvEnvironment Tests" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/simplevirtualenvs.unit.test.js" failures="0" time="0">
    <testcase name="isVenvEnvironment Tests pyvenv.cfg does not exist" time="0" classname="pyvenv.cfg does not exist">
    </testcase>
    <testcase name="isVenvEnvironment Tests pyvenv.cfg exists in the current folder" time="0" classname="pyvenv.cfg exists in the current folder">
    </testcase>
    <testcase name="isVenvEnvironment Tests pyvenv.cfg exists in the parent folder" time="0" classname="pyvenv.cfg exists in the parent folder">
    </testcase>
  </testsuite>
  <testsuite name="isVirtualenvEnvironment Tests" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/simplevirtualenvs.unit.test.js" failures="0" time="0">
    <testcase name="isVirtualenvEnvironment Tests Interpreter folder contains an activate file" time="0" classname="Interpreter folder contains an activate file">
    </testcase>
    <testcase name="isVirtualenvEnvironment Tests Interpreter folder does not contain any activate.* files" time="0" classname="Interpreter folder does not contain any activate.* files">
    </testcase>
  </testsuite>
  <testsuite name="isVirtualenvwrapperEnvironment Tests" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/simplevirtualenvs.unit.test.js" failures="0" time="0">
    <testcase name="isVirtualenvwrapperEnvironment Tests WORKON_HOME is not set, and the interpreter is in a sub-folder of virtualenvwrapper" time="0" classname="WORKON_HOME is not set, and the interpreter is in a sub-folder of virtualenvwrapper">
    </testcase>
    <testcase name="isVirtualenvwrapperEnvironment Tests WORKON_HOME is set to a custom value, and the interpreter is is in a sub-folder" time="0" classname="WORKON_HOME is set to a custom value, and the interpreter is is in a sub-folder">
    </testcase>
    <testcase name="isVirtualenvwrapperEnvironment Tests The interpreter is not in a sub-folder of WORKON_HOME" time="0" classname="The interpreter is not in a sub-folder of WORKON_HOME">
    </testcase>
  </testsuite>
  <testsuite name="Virtual Env Version Parser Tests" timestamp="2021-11-08T22:03:15" tests="4" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/simplevirtualenvs.unit.test.js" failures="0" time="0.001">
    <testcase name="Virtual Env Version Parser Tests Parsing case1" time="0" classname="Parsing case1">
    </testcase>
    <testcase name="Virtual Env Version Parser Tests Parsing case2" time="0.001" classname="Parsing case2">
    </testcase>
    <testcase name="Virtual Env Version Parser Tests Parsing case3" time="0" classname="Parsing case3">
    </testcase>
    <testcase name="Virtual Env Version Parser Tests Parsing case4" time="0" classname="Parsing case4">
    </testcase>
  </testsuite>
  <testsuite name="Windows Store Env" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/environmentManagers/windowsStoreEnv.unit.test.js" failures="0" time="0.002">
    <testcase name="Windows Store Env Store Python Interpreters" time="0.001" classname="Store Python Interpreters">
    </testcase>
    <testcase name="Windows Store Env isWindowsStoreDir: valid case" time="0.001" classname="isWindowsStoreDir: valid case">
    </testcase>
    <testcase name="Windows Store Env isWindowsStoreDir: invalid case" time="0" classname="isWindowsStoreDir: invalid case">
    </testcase>
  </testsuite>
  <testsuite name="Posix Utils tests" timestamp="2021-11-08T22:03:15" tests="1" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/posixUtils.unit.test.js" failures="0" time="0.002">
    <testcase name="Posix Utils tests getPythonBinFromPosixPaths" time="0.002" classname="getPythonBinFromPosixPaths">
    </testcase>
  </testsuite>
  <testsuite name="Windows Utils tests" timestamp="2021-11-08T22:03:15" tests="13" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/common/windowsUtils.unit.test.js" failures="0" time="0">
    <testcase name="Windows Utils tests Python executable check should match this path: python.exe" time="0" classname="Python executable check should match this path: python.exe">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should match this path: python3.exe" time="0" classname="Python executable check should match this path: python3.exe">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should match this path: python38.exe" time="0" classname="Python executable check should match this path: python38.exe">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should match this path: python3.8.exe" time="0" classname="Python executable check should match this path: python3.8.exe">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python" time="0" classname="Python executable check should not match this path: python">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python3" time="0" classname="Python executable check should not match this path: python3">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python38" time="0" classname="Python executable check should not match this path: python38">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python3.8" time="0" classname="Python executable check should not match this path: python3.8">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: idle.exe" time="0" classname="Python executable check should not match this path: idle.exe">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: pip.exe" time="0" classname="Python executable check should not match this path: pip.exe">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python.dll" time="0" classname="Python executable check should not match this path: python.dll">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python3.dll" time="0" classname="Python executable check should not match this path: python3.dll">
    </testcase>
    <testcase name="Windows Utils tests Python executable check should not match this path: python3.8.dll" time="0" classname="Python executable check should not match this path: python3.8.dll">
    </testcase>
  </testsuite>
  <testsuite name="Interpreters Conda Service" timestamp="2021-11-08T22:03:15" tests="11" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/discovery/locators/condaService.unit.test.js" failures="0" time="0.004">
    <testcase name="Interpreters Conda Service isAvailable will return true if conda is available" time="0.001" classname="isAvailable will return true if conda is available">
    </testcase>
    <testcase name="Interpreters Conda Service isAvailable will return false if conda is not available" time="0" classname="isAvailable will return false if conda is not available">
    </testcase>
    <testcase name="Interpreters Conda Service Version info from conda process will be returned in getCondaVersion" time="0.001" classname="Version info from conda process will be returned in getCondaVersion">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for subenvironment test1" time="0" classname="Finds conda.exe for subenvironment test1">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for different test1" time="0.001" classname="Finds conda.exe for different test1">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for subenvironment test2" time="0" classname="Finds conda.exe for subenvironment test2">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for different test2" time="0" classname="Finds conda.exe for different test2">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for subenvironment test3" time="0.001" classname="Finds conda.exe for subenvironment test3">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for different test3" time="0" classname="Finds conda.exe for different test3">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for subenvironment test4" time="0" classname="Finds conda.exe for subenvironment test4">
    </testcase>
    <testcase name="Interpreters Conda Service Finds conda.exe for different test4" time="0" classname="Finds conda.exe for different test4">
    </testcase>
  </testsuite>
  <testsuite name="getExecutablePath()" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/info/executable.unit.test.js" failures="0" time="0.001">
    <testcase name="getExecutablePath() should get the value by running python" time="0.001" classname="should get the value by running python">
    </testcase>
    <testcase name="getExecutablePath() should throw if exec() fails" time="0" classname="should throw if exec() fails">
    </testcase>
  </testsuite>
  <testsuite name="getInterpreterInfo()" timestamp="2021-11-08T22:03:15" tests="9" file="/home/don/development/vsc/vscode-python/out/test/pythonEnvironments/info/interpreter.unit.test.js" failures="0" time="0.004">
    <testcase name="getInterpreterInfo() should call exec() with the proper command and timeout" time="0.001" classname="should call exec() with the proper command and timeout">
    </testcase>
    <testcase name="getInterpreterInfo() should quote spaces in the command" time="0" classname="should quote spaces in the command">
    </testcase>
    <testcase name="getInterpreterInfo() should handle multi-command (e.g. conda)" time="0.001" classname="should handle multi-command (e.g. conda)">
    </testcase>
    <testcase name="getInterpreterInfo() should return an object if exec() is successful" time="0" classname="should return an object if exec() is successful">
    </testcase>
    <testcase name="getInterpreterInfo() should return an object if the version info contains less than 4 items" time="0.001" classname="should return an object if the version info contains less than 4 items">
    </testcase>
    <testcase name="getInterpreterInfo() should return an object with the architecture value set to x86 if json.is64bit is not 64bit" time="0" classname="should return an object with the architecture value set to x86 if json.is64bit is not 64bit">
    </testcase>
    <testcase name="getInterpreterInfo() should return undefined if the result of exec() writes to stderr" time="0" classname="should return undefined if the result of exec() writes to stderr">
    </testcase>
    <testcase name="getInterpreterInfo() should fail if exec() fails (e.g. the script times out)" time="0.001" classname="should fail if exec() fails (e.g. the script times out)">
    </testcase>
    <testcase name="getInterpreterInfo() should fail if the json value returned by interpreterInfo.py is not valid" time="0" classname="should fail if the json value returned by interpreterInfo.py is not valid">
    </testcase>
  </testsuite>
  <testsuite name="Source Map Support" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/sourceMapSupport.unit.test.js" failures="0" time="0.10700000000000001">
    <testcase name="Source Map Support Test message is not displayed when source maps are not enabled" time="0.101" classname="Test message is not displayed when source maps are not enabled">
    </testcase>
    <testcase name="Source Map Support Test message is displayed when source maps are not enabled" time="0.004" classname="Test message is displayed when source maps are not enabled">
    </testcase>
    <testcase name="Source Map Support Test message is not displayed when source maps are not enabled" time="0.002" classname="Test message is not displayed when source maps are not enabled">
    </testcase>
    <testcase name="Source Map Support Rename extension and debugger source maps when enabling source maps" time="0" classname="Rename extension and debugger source maps when enabling source maps">
    </testcase>
    <testcase name="Source Map Support Rename extension and debugger source maps when disabling source maps" time="0" classname="Rename extension and debugger source maps when disabling source maps">
    </testcase>
  </testsuite>
  <testsuite name="Startup Telemetry - hasUserDefinedPythonPath()" timestamp="2021-11-08T22:03:15" tests="10" file="/home/don/development/vsc/vscode-python/out/test/startupTelemetry.unit.test.js" failures="0" time="0.001">
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: undefined, workspaceValue: undefined, workspaceFolderValue: undefined}" time="0" classname="Return false if using settings equals {globalValue: undefined, workspaceValue: undefined, workspaceFolderValue: undefined}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: undefined, workspaceValue: undefined, workspaceFolderValue: python}" time="0" classname="Return false if using settings equals {globalValue: undefined, workspaceValue: undefined, workspaceFolderValue: python}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: undefined, workspaceValue: python, workspaceFolderValue: undefined}" time="0.001" classname="Return false if using settings equals {globalValue: undefined, workspaceValue: python, workspaceFolderValue: undefined}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: undefined, workspaceValue: python, workspaceFolderValue: python}" time="0" classname="Return false if using settings equals {globalValue: undefined, workspaceValue: python, workspaceFolderValue: python}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: python, workspaceValue: undefined, workspaceFolderValue: undefined}" time="0" classname="Return false if using settings equals {globalValue: python, workspaceValue: undefined, workspaceFolderValue: undefined}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: python, workspaceValue: undefined, workspaceFolderValue: python}" time="0" classname="Return false if using settings equals {globalValue: python, workspaceValue: undefined, workspaceFolderValue: python}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: python, workspaceValue: python, workspaceFolderValue: undefined}" time="0" classname="Return false if using settings equals {globalValue: python, workspaceValue: python, workspaceFolderValue: undefined}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return false if using settings equals {globalValue: python, workspaceValue: python, workspaceFolderValue: python}" time="0" classname="Return false if using settings equals {globalValue: python, workspaceValue: python, workspaceFolderValue: python}">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() Return true if using setting value equals something else" time="0" classname="Return true if using setting value equals something else">
    </testcase>
    <testcase name="Startup Telemetry - hasUserDefinedPythonPath() If in Deprecate PythonPath experiment, use the new API to inspect settings" time="0" classname="If in Deprecate PythonPath experiment, use the new API to inspect settings">
    </testcase>
  </testsuite>
  <testsuite name="Env file telemetry" timestamp="2021-11-08T22:03:15" tests="8" file="/home/don/development/vsc/vscode-python/out/test/telemetry/envFileTelemetry.unit.test.js" failures="0" time="0.024">
    <testcase name="Env file telemetry Setting telemetry should be sent with hasCustomEnvPath at true if the python.envFile setting is different from the default value" time="0" classname="Setting telemetry should be sent with hasCustomEnvPath at true if the python.envFile setting is different from the default value">
    </testcase>
    <testcase name="Env file telemetry Setting telemetry should not be sent if a telemetry event has already been sent" time="0" classname="Setting telemetry should not be sent if a telemetry event has already been sent">
    </testcase>
    <testcase name="Env file telemetry Setting telemetry should not be sent if the python.envFile setting is the same as the default value" time="0" classname="Setting telemetry should not be sent if the python.envFile setting is the same as the default value">
    </testcase>
    <testcase name="Env file telemetry File creation telemetry should be sent if no telemetry event has been sent before" time="0" classname="File creation telemetry should be sent if no telemetry event has been sent before">
    </testcase>
    <testcase name="Env file telemetry File creation telemetry should not be sent if a telemetry event has already been sent" time="0" classname="File creation telemetry should not be sent if a telemetry event has already been sent">
    </testcase>
    <testcase name="Env file telemetry Activation telemetry should be sent if no telemetry event has been sent before, and a .env file exists" time="0.012" classname="Activation telemetry should be sent if no telemetry event has been sent before, and a .env file exists">
    </testcase>
    <testcase name="Env file telemetry Activation telemetry should not be sent if a telemetry event has already been sent" time="0" classname="Activation telemetry should not be sent if a telemetry event has already been sent">
    </testcase>
    <testcase name="Env file telemetry Activation telemetry should not be sent if no .env file exists" time="0.012" classname="Activation telemetry should not be sent if no .env file exists">
    </testcase>
  </testsuite>
  <testsuite name="Extension Install Telemetry" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/telemetry/extensionInstallTelemetry.unit.test.js" failures="0" time="0.001">
    <testcase name="Extension Install Telemetry PythonCodingPack exists" time="0" classname="PythonCodingPack exists">
    </testcase>
    <testcase name="Extension Install Telemetry PythonCodingPack does not exists" time="0.001" classname="PythonCodingPack does not exists">
    </testcase>
  </testsuite>
  <testsuite name="Telemetry" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/telemetry/index.unit.test.js" failures="0" time="0.034">
    <testcase name="Telemetry Send Telemetry" time="0.005" classname="Send Telemetry">
    </testcase>
    <testcase name="Telemetry Send Telemetry with no properties" time="0.005" classname="Send Telemetry with no properties">
    </testcase>
    <testcase name="Telemetry Send Telemetry with shared properties" time="0.005" classname="Send Telemetry with shared properties">
    </testcase>
    <testcase name="Telemetry Shared properties will replace existing ones" time="0.005" classname="Shared properties will replace existing ones">
    </testcase>
    <testcase name="Telemetry Send Exception Telemetry" time="0.014" classname="Send Exception Telemetry">
    </testcase>
  </testsuite>
  <testsuite name="Function isTelemetryDisabled()" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/telemetry/index.unit.test.js" failures="0" time="0">
    <testcase name="Telemetry Function isTelemetryDisabled() Returns true when globalValue is set to false" time="0" classname="Returns true when globalValue is set to false">
    </testcase>
    <testcase name="Telemetry Function isTelemetryDisabled() Returns false otherwise" time="0" classname="Returns false otherwise">
    </testcase>
  </testsuite>
  <testsuite name="TensorBoard nbextension code lens provider" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/tensorBoard/nbextensionCodeLensProvider.unit.test.js" failures="0" time="0.001">
    <testcase name="TensorBoard nbextension code lens provider Provide code lens for Python notebook loading tensorboard nbextension" time="0.001" classname="Provide code lens for Python notebook loading tensorboard nbextension">
    </testcase>
    <testcase name="TensorBoard nbextension code lens provider Provide code lens for Python notebook launching tensorboard nbextension" time="0" classname="Provide code lens for Python notebook launching tensorboard nbextension">
    </testcase>
    <testcase name="TensorBoard nbextension code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
  </testsuite>
  <testsuite name="TensorBoard import code lens provider" timestamp="2021-11-08T22:03:15" tests="34" file="/home/don/development/vsc/vscode-python/out/test/tensorBoard/tensorBoardImportCodeLensProvider.unit.test.js" failures="0" time="0.003">
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import tensorboard" time="0" classname="Provides code lens for Python files containing import tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import tensorboard" time="0.001" classname="Provides code lens for Python ipynbs containing import tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import foo, tensorboard" time="0" classname="Provides code lens for Python files containing import foo, tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import foo, tensorboard" time="0" classname="Provides code lens for Python ipynbs containing import foo, tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import foo, tensorboard, bar" time="0" classname="Provides code lens for Python files containing import foo, tensorboard, bar">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import foo, tensorboard, bar" time="0" classname="Provides code lens for Python ipynbs containing import foo, tensorboard, bar">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0.001" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import tensorboardX" time="0" classname="Provides code lens for Python files containing import tensorboardX">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import tensorboardX" time="0" classname="Provides code lens for Python ipynbs containing import tensorboardX">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import tensorboardX, bar" time="0" classname="Provides code lens for Python files containing import tensorboardX, bar">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import tensorboardX, bar" time="0" classname="Provides code lens for Python ipynbs containing import tensorboardX, bar">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import torch.profiler" time="0" classname="Provides code lens for Python files containing import torch.profiler">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import torch.profiler" time="0" classname="Provides code lens for Python ipynbs containing import torch.profiler">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import foo, torch.profiler" time="0" classname="Provides code lens for Python files containing import foo, torch.profiler">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import foo, torch.profiler" time="0" classname="Provides code lens for Python ipynbs containing import foo, torch.profiler">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0.001" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing from torch.utils import tensorboard" time="0" classname="Provides code lens for Python files containing from torch.utils import tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing from torch.utils import tensorboard" time="0" classname="Provides code lens for Python ipynbs containing from torch.utils import tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing from torch.utils import foo, tensorboard" time="0" classname="Provides code lens for Python files containing from torch.utils import foo, tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing from torch.utils import foo, tensorboard" time="0" classname="Provides code lens for Python ipynbs containing from torch.utils import foo, tensorboard">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing import torch.utils.tensorboard, foo" time="0" classname="Provides code lens for Python files containing import torch.utils.tensorboard, foo">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing import torch.utils.tensorboard, foo" time="0" classname="Provides code lens for Python ipynbs containing import torch.utils.tensorboard, foo">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python files containing from torch import profiler" time="0" classname="Provides code lens for Python files containing from torch import profiler">
    </testcase>
    <testcase name="TensorBoard import code lens provider Provides code lens for Python ipynbs containing from torch import profiler" time="0" classname="Provides code lens for Python ipynbs containing from torch import profiler">
    </testcase>
    <testcase name="TensorBoard import code lens provider Fails when cancellation is signaled" time="0" classname="Fails when cancellation is signaled">
    </testcase>
    <testcase name="TensorBoard import code lens provider Does not provide code lens if no matching import" time="0" classname="Does not provide code lens if no matching import">
    </testcase>
  </testsuite>
  <testsuite name="TensorBoard prompt" timestamp="2021-11-08T22:03:15" tests="5" file="/home/don/development/vsc/vscode-python/out/test/tensorBoard/tensorBoardPrompt.unit.test.js" failures="0" time="0.003">
    <testcase name="TensorBoard prompt Show prompt if user is in experiment, and prompt has not previously been disabled or shown" time="0.001" classname="Show prompt if user is in experiment, and prompt has not previously been disabled or shown">
    </testcase>
    <testcase name="TensorBoard prompt Do not show prompt if user is not in experiment" time="0" classname="Do not show prompt if user is not in experiment">
    </testcase>
    <testcase name="TensorBoard prompt Disable prompt if user selects &quot;Do not show again&quot;" time="0.001" classname="Disable prompt if user selects &quot;Do not show again&quot;">
    </testcase>
    <testcase name="TensorBoard prompt Do not show prompt if user has previously disabled prompt" time="0" classname="Do not show prompt if user has previously disabled prompt">
    </testcase>
    <testcase name="TensorBoard prompt Do not show prompt more than once per session" time="0.001" classname="Do not show prompt more than once per session">
    </testcase>
  </testsuite>
  <testsuite name="TensorBoard usage tracker" timestamp="2021-11-08T22:03:15" tests="11" file="/home/don/development/vsc/vscode-python/out/test/tensorBoard/tensorBoardUsageTracker.unit.test.js" failures="0" time="0.001">
    <testcase name="TensorBoard usage tracker Simple tensorboard import in Python file" time="0" classname="Simple tensorboard import in Python file">
    </testcase>
    <testcase name="TensorBoard usage tracker Simple tensorboardX import in Python file" time="0" classname="Simple tensorboardX import in Python file">
    </testcase>
    <testcase name="TensorBoard usage tracker Simple tensorboard import in Python ipynb" time="0" classname="Simple tensorboard import in Python ipynb">
    </testcase>
    <testcase name="TensorBoard usage tracker `from x.y.tensorboard import z` import" time="0" classname="`from x.y.tensorboard import z` import">
    </testcase>
    <testcase name="TensorBoard usage tracker `from x.y import tensorboard` import" time="0" classname="`from x.y import tensorboard` import">
    </testcase>
    <testcase name="TensorBoard usage tracker `from tensorboardX import x` import" time="0" classname="`from tensorboardX import x` import">
    </testcase>
    <testcase name="TensorBoard usage tracker `import x, y` import" time="0" classname="`import x, y` import">
    </testcase>
    <testcase name="TensorBoard usage tracker `import pkg as _` import" time="0" classname="`import pkg as _` import">
    </testcase>
    <testcase name="TensorBoard usage tracker Show prompt on changed text editor" time="0" classname="Show prompt on changed text editor">
    </testcase>
    <testcase name="TensorBoard usage tracker Do not show prompt if no tensorboard import" time="0.001" classname="Do not show prompt if no tensorboard import">
    </testcase>
    <testcase name="TensorBoard usage tracker Do not show prompt if language is not Python" time="0" classname="Do not show prompt if language is not Python">
    </testcase>
  </testsuite>
  <testsuite name="Terminal" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/terminals/activation.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Auto Activation" timestamp="2021-11-08T22:03:15" tests="2" file="/home/don/development/vsc/vscode-python/out/test/terminals/activation.unit.test.js" failures="0" time="0">
    <testcase name="Terminal Terminal Auto Activation Should activate terminal" time="0" classname="Should activate terminal">
    </testcase>
    <testcase name="Terminal Terminal Auto Activation Should not activate terminal if name starts with specific prefix" time="0" classname="Should not activate terminal if name starts with specific prefix">
    </testcase>
  </testsuite>
  <testsuite name="Terminal - Code Execution Manager" timestamp="2021-11-08T22:03:15" tests="10" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/codeExecutionManager.unit.test.js" failures="0" time="0.005">
    <testcase name="Terminal - Code Execution Manager Ensure commands are registered" time="0" classname="Ensure commands are registered">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeFileInterTerminal will do nothing if no file is avialble" time="0" classname="Ensure executeFileInterTerminal will do nothing if no file is avialble">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeFileInterTerminal will use provided file" time="0.001" classname="Ensure executeFileInterTerminal will use provided file">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeFileInterTerminal will use active file" time="0" classname="Ensure executeFileInterTerminal will use active file">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeSelectionInTerminal will do nothing if theres no active document" time="0.001" classname="Ensure executeSelectionInTerminal will do nothing if theres no active document">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeSelectionInDjangoShell will do nothing if theres no active document" time="0" classname="Ensure executeSelectionInDjangoShell will do nothing if theres no active document">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeSelectionInTerminal will do nothing if no text is selected" time="0.001" classname="Ensure executeSelectionInTerminal will do nothing if no text is selected">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeSelectionInDjangoShell will do nothing if no text is selected" time="0" classname="Ensure executeSelectionInDjangoShell will do nothing if no text is selected">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeSelectionInTerminal will normalize selected text and send it to the terminal" time="0.001" classname="Ensure executeSelectionInTerminal will normalize selected text and send it to the terminal">
    </testcase>
    <testcase name="Terminal - Code Execution Manager Ensure executeSelectionInDjangoShell will normalize selected text and send it to the terminal" time="0.001" classname="Ensure executeSelectionInDjangoShell will normalize selected text and send it to the terminal">
    </testcase>
  </testsuite>
  <testsuite name="Terminal - Django Shell Code Execution" timestamp="2021-11-08T22:03:15" tests="11" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/djangoShellCodeExect.unit.test.js" failures="0" time="0.004">
    <testcase name="Terminal - Django Shell Code Execution Ensure fully qualified python path is escaped when building repl args on Windows" time="0" classname="Ensure fully qualified python path is escaped when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure fully qualified python path is returned as is, when building repl args on Windows" time="0.001" classname="Ensure fully qualified python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure python path is returned as is, when building repl args on Windows" time="0" classname="Ensure python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure fully qualified python path is returned as is, on non Windows" time="0.001" classname="Ensure fully qualified python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure python path is returned as is, on non Windows" time="0" classname="Ensure python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure current workspace folder (containing spaces) is used to prefix manage.py" time="0" classname="Ensure current workspace folder (containing spaces) is used to prefix manage.py">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure current workspace folder (without spaces) is used to prefix manage.py" time="0" classname="Ensure current workspace folder (without spaces) is used to prefix manage.py">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure default workspace folder (containing spaces) is used to prefix manage.py" time="0.001" classname="Ensure default workspace folder (containing spaces) is used to prefix manage.py">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure default workspace folder (without spaces) is used to prefix manage.py" time="0" classname="Ensure default workspace folder (without spaces) is used to prefix manage.py">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure conda args including env name are passed when using a conda environment with a name" time="0.001" classname="Ensure conda args including env name are passed when using a conda environment with a name">
    </testcase>
    <testcase name="Terminal - Django Shell Code Execution Ensure conda args including env path are passed when using a conda environment with an empty name" time="0" classname="Ensure conda args including env path are passed when using a conda environment with an empty name">
    </testcase>
  </testsuite>
  <testsuite name="Terminal - Code Execution" timestamp="2021-11-08T22:03:15" tests="0" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Terminal Execution (validation of title)" timestamp="2021-11-08T22:03:15" tests="3" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="3.0060000000000002">
    <testcase name="Terminal - Code Execution Terminal Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (windows)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (osx)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (osx)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (linux)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (linux)">
    </testcase>
  </testsuite>
  <testsuite name="Terminal Execution" timestamp="2021-11-08T22:03:18" tests="27" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="5.027">
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current drive before changing directory on windows" time="0.001" classname="Ensure we set current drive before changing directory on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we do not change drive if current drive letter is same as the file drive letter on windows" time="0" classname="Ensure we do not change drive if current drive letter is same as the file drive letter on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file (non windows)" time="0.002" classname="Ensure we set current directory before executing file (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file (windows)" time="0.001" classname="Ensure we set current directory before executing file (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)" time="0.001" classname="Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory (and quote it when containing spaces) before executing file (windows)" time="0" classname="Ensure we set current directory (and quote it when containing spaces) before executing file (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file if in the same directory as the current workspace (non windows)" time="0.001" classname="Ensure we set current directory before executing file if in the same directory as the current workspace (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file if in the same directory as the current workspace (windows)" time="0.001" classname="Ensure we set current directory before executing file if in the same directory as the current workspace (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file if file is not in a workspace (non windows)" time="0.001" classname="Ensure we set current directory before executing file if file is not in a workspace (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file if file is not in a workspace (windows)" time="0.001" classname="Ensure we set current directory before executing file if file is not in a workspace (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure python file execution script is sent to terminal on windows" time="0.001" classname="Ensure python file execution script is sent to terminal on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure python file execution script is sent to terminal on windows with fully qualified python path" time="0.001" classname="Ensure python file execution script is sent to terminal on windows with fully qualified python path">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure python file execution script is not quoted when no spaces in file path" time="0" classname="Ensure python file execution script is not quoted when no spaces in file path">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure python file execution script supports custom python arguments" time="0" classname="Ensure python file execution script supports custom python arguments">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure conda args with conda env name are sent to terminal if there is a conda environment with a name" time="0.001" classname="Ensure conda args with conda env name are sent to terminal if there is a conda environment with a name">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure conda args with conda env path are sent to terminal if there is a conda environment without a name" time="0.001" classname="Ensure conda args with conda env path are sent to terminal if there is a conda environment without a name">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure fully qualified python path is escaped when building repl args on Windows" time="0" classname="Ensure fully qualified python path is escaped when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure fully qualified python path is returned as is, when building repl args on Windows" time="0" classname="Ensure fully qualified python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure python path is returned as is, when building repl args on Windows" time="0" classname="Ensure python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure fully qualified python path is returned as is, on non Windows" time="0" classname="Ensure fully qualified python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure python path is returned as is, on non Windows" time="0" classname="Ensure python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure conda args with env name are returned when building repl args with a conda env with a name" time="0" classname="Ensure conda args with env name are returned when building repl args with a conda env with a name">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure conda args with env path are returned when building repl args with a conda env without a name" time="0" classname="Ensure conda args with env path are returned when building repl args with a conda env without a name">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure nothing happens when blank text is sent to the terminal" time="0.001" classname="Ensure nothing happens when blank text is sent to the terminal">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure repl is initialized once before sending text to the repl" time="1.003" classname="Ensure repl is initialized once before sending text to the repl">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure repl is re-initialized when terminal is closed" time="3.008" classname="Ensure repl is re-initialized when terminal is closed">
    </testcase>
    <testcase name="Terminal - Code Execution Terminal Execution Ensure code is sent to terminal" time="1.002" classname="Ensure code is sent to terminal">
    </testcase>
  </testsuite>
  <testsuite name="Repl Execution (validation of title)" timestamp="2021-11-08T22:03:23" tests="3" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="3.005">
    <testcase name="Terminal - Code Execution Repl Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (windows)" time="1.001" classname="Ensure terminal is created upon invoking initializeRepl (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (osx)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (osx)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (linux)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (linux)">
    </testcase>
  </testsuite>
  <testsuite name="Repl Execution" timestamp="2021-11-08T22:03:26" tests="27" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="5.0169999999999995">
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current drive before changing directory on windows" time="0.001" classname="Ensure we set current drive before changing directory on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we do not change drive if current drive letter is same as the file drive letter on windows" time="0.001" classname="Ensure we do not change drive if current drive letter is same as the file drive letter on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory before executing file (non windows)" time="0" classname="Ensure we set current directory before executing file (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory before executing file (windows)" time="0" classname="Ensure we set current directory before executing file (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)" time="0.001" classname="Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory (and quote it when containing spaces) before executing file (windows)" time="0" classname="Ensure we set current directory (and quote it when containing spaces) before executing file (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory before executing file if in the same directory as the current workspace (non windows)" time="0" classname="Ensure we set current directory before executing file if in the same directory as the current workspace (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory before executing file if in the same directory as the current workspace (windows)" time="0.001" classname="Ensure we set current directory before executing file if in the same directory as the current workspace (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory before executing file if file is not in a workspace (non windows)" time="0" classname="Ensure we set current directory before executing file if file is not in a workspace (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure we set current directory before executing file if file is not in a workspace (windows)" time="0" classname="Ensure we set current directory before executing file if file is not in a workspace (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure python file execution script is sent to terminal on windows" time="0" classname="Ensure python file execution script is sent to terminal on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure python file execution script is sent to terminal on windows with fully qualified python path" time="0" classname="Ensure python file execution script is sent to terminal on windows with fully qualified python path">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure python file execution script is not quoted when no spaces in file path" time="0.001" classname="Ensure python file execution script is not quoted when no spaces in file path">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure python file execution script supports custom python arguments" time="0" classname="Ensure python file execution script supports custom python arguments">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure conda args with conda env name are sent to terminal if there is a conda environment with a name" time="0.001" classname="Ensure conda args with conda env name are sent to terminal if there is a conda environment with a name">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure conda args with conda env path are sent to terminal if there is a conda environment without a name" time="0" classname="Ensure conda args with conda env path are sent to terminal if there is a conda environment without a name">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure fully qualified python path is escaped when building repl args on Windows" time="0" classname="Ensure fully qualified python path is escaped when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure fully qualified python path is returned as is, when building repl args on Windows" time="0" classname="Ensure fully qualified python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure python path is returned as is, when building repl args on Windows" time="0" classname="Ensure python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure fully qualified python path is returned as is, on non Windows" time="0.001" classname="Ensure fully qualified python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure python path is returned as is, on non Windows" time="0" classname="Ensure python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure conda args with env name are returned when building repl args with a conda env with a name" time="0" classname="Ensure conda args with env name are returned when building repl args with a conda env with a name">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure conda args with env path are returned when building repl args with a conda env without a name" time="0" classname="Ensure conda args with env path are returned when building repl args with a conda env without a name">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure nothing happens when blank text is sent to the terminal" time="0" classname="Ensure nothing happens when blank text is sent to the terminal">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure repl is initialized once before sending text to the repl" time="1.002" classname="Ensure repl is initialized once before sending text to the repl">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure repl is re-initialized when terminal is closed" time="3.007" classname="Ensure repl is re-initialized when terminal is closed">
    </testcase>
    <testcase name="Terminal - Code Execution Repl Execution Ensure code is sent to terminal" time="1.001" classname="Ensure code is sent to terminal">
    </testcase>
  </testsuite>
  <testsuite name="Django Execution (validation of title)" timestamp="2021-11-08T22:03:31" tests="3" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="3.0060000000000002">
    <testcase name="Terminal - Code Execution Django Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (windows)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (osx)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (osx)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (linux)" time="1.002" classname="Ensure terminal is created upon invoking initializeRepl (linux)">
    </testcase>
  </testsuite>
  <testsuite name="Django Execution" timestamp="2021-11-08T22:03:34" tests="27" file="/home/don/development/vsc/vscode-python/out/test/terminals/codeExecution/terminalCodeExec.unit.test.js" failures="0" time="5.026">
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current drive before changing directory on windows" time="0.002" classname="Ensure we set current drive before changing directory on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we do not change drive if current drive letter is same as the file drive letter on windows" time="0.001" classname="Ensure we do not change drive if current drive letter is same as the file drive letter on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory before executing file (non windows)" time="0.001" classname="Ensure we set current directory before executing file (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory before executing file (windows)" time="0.001" classname="Ensure we set current directory before executing file (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)" time="0" classname="Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory (and quote it when containing spaces) before executing file (windows)" time="0.001" classname="Ensure we set current directory (and quote it when containing spaces) before executing file (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory before executing file if in the same directory as the current workspace (non windows)" time="0.001" classname="Ensure we set current directory before executing file if in the same directory as the current workspace (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory before executing file if in the same directory as the current workspace (windows)" time="0.001" classname="Ensure we set current directory before executing file if in the same directory as the current workspace (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory before executing file if file is not in a workspace (non windows)" time="0.001" classname="Ensure we set current directory before executing file if file is not in a workspace (non windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure we set current directory before executing file if file is not in a workspace (windows)" time="0.001" classname="Ensure we set current directory before executing file if file is not in a workspace (windows)">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure python file execution script is sent to terminal on windows" time="0" classname="Ensure python file execution script is sent to terminal on windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure python file execution script is sent to terminal on windows with fully qualified python path" time="0" classname="Ensure python file execution script is sent to terminal on windows with fully qualified python path">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure python file execution script is not quoted when no spaces in file path" time="0.001" classname="Ensure python file execution script is not quoted when no spaces in file path">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure python file execution script supports custom python arguments" time="0.001" classname="Ensure python file execution script supports custom python arguments">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure conda args with conda env name are sent to terminal if there is a conda environment with a name" time="0" classname="Ensure conda args with conda env name are sent to terminal if there is a conda environment with a name">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure conda args with conda env path are sent to terminal if there is a conda environment without a name" time="0" classname="Ensure conda args with conda env path are sent to terminal if there is a conda environment without a name">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure fully qualified python path is escaped when building repl args on Windows" time="0.001" classname="Ensure fully qualified python path is escaped when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure fully qualified python path is returned as is, when building repl args on Windows" time="0.001" classname="Ensure fully qualified python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure python path is returned as is, when building repl args on Windows" time="0" classname="Ensure python path is returned as is, when building repl args on Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure fully qualified python path is returned as is, on non Windows" time="0" classname="Ensure fully qualified python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure python path is returned as is, on non Windows" time="0" classname="Ensure python path is returned as is, on non Windows">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure conda args with env name are returned when building repl args with a conda env with a name" time="0" classname="Ensure conda args with env name are returned when building repl args with a conda env with a name">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure conda args with env path are returned when building repl args with a conda env without a name" time="0.001" classname="Ensure conda args with env path are returned when building repl args with a conda env without a name">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure nothing happens when blank text is sent to the terminal" time="0" classname="Ensure nothing happens when blank text is sent to the terminal">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure repl is initialized once before sending text to the repl" time="1.002" classname="Ensure repl is initialized once before sending text to the repl">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure repl is re-initialized when terminal is closed" time="3.006" classname="Ensure repl is re-initialized when terminal is closed">
    </testcase>
    <testcase name="Terminal - Code Execution Django Execution Ensure code is sent to terminal" time="1.003" classname="Ensure code is sent to terminal">
    </testcase>
  </testsuite>
  <testsuite name="Terminal - Service Registry" timestamp="2021-11-08T22:03:39" tests="1" file="/home/don/development/vsc/vscode-python/out/test/terminals/serviceRegistry.unit.test.js" failures="0" time="0.002">
    <testcase name="Terminal - Service Registry Ensure all services get registered" time="0.002" classname="Ensure all services get registered">
    </testcase>
  </testsuite>
  <testsuite name="Unit Tests - Debug Launcher" timestamp="2021-11-08T22:03:39" tests="24" file="/home/don/development/vsc/vscode-python/out/test/testing/common/debugLauncher.unit.test.js" failures="0" time="0.4800000000000002">
    <testcase name="Unit Tests - Debug Launcher Must launch debugger (Test Framework &apos;pytest&apos;)" time="0.029" classname="Must launch debugger (Test Framework &apos;pytest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must launch debugger with arguments (Test Framework &apos;pytest&apos;)" time="0.024" classname="Must launch debugger with arguments (Test Framework &apos;pytest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must not launch debugger if cancelled (Test Framework &apos;pytest&apos;)" time="0.001" classname="Must not launch debugger if cancelled (Test Framework &apos;pytest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must throw an exception if there are no workspaces (Test Framework &apos;pytest&apos;)" time="0" classname="Must throw an exception if there are no workspaces (Test Framework &apos;pytest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must launch debugger (Test Framework &apos;unittest&apos;)" time="0.025" classname="Must launch debugger (Test Framework &apos;unittest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must launch debugger with arguments (Test Framework &apos;unittest&apos;)" time="0.027" classname="Must launch debugger with arguments (Test Framework &apos;unittest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must not launch debugger if cancelled (Test Framework &apos;unittest&apos;)" time="0" classname="Must not launch debugger if cancelled (Test Framework &apos;unittest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Must throw an exception if there are no workspaces (Test Framework &apos;unittest&apos;)" time="0" classname="Must throw an exception if there are no workspaces (Test Framework &apos;unittest&apos;)">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Tries launch.json first" time="0.026" classname="Tries launch.json first">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Full debug config" time="0.027" classname="Full debug config">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Uses first entry" time="0.025" classname="Uses first entry">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles bad JSON" time="0.027" classname="Handles bad JSON">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles malformed launch.json - test 1" time="0.029" classname="Handles malformed launch.json - test 1">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles malformed launch.json - test 2" time="0.027" classname="Handles malformed launch.json - test 2">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles malformed launch.json - test 3" time="0.026" classname="Handles malformed launch.json - test 3">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles malformed launch.json - test 4" time="0.027" classname="Handles malformed launch.json - test 4">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles bad debug config items" time="0.034" classname="Handles bad debug config items">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles non-python debug configs" time="0.026" classname="Handles non-python debug configs">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles bogus python debug configs" time="0.026" classname="Handles bogus python debug configs">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles non-test debug config" time="0.025" classname="Handles non-test debug config">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles mixed debug config" time="0.024" classname="Handles mixed debug config">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Handles comments" time="0.024" classname="Handles comments">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Ensure trailing commands in JSON are handled" time="0.001" classname="Ensure trailing commands in JSON are handled">
    </testcase>
    <testcase name="Unit Tests - Debug Launcher Ensure empty configuration is returned when launch.json cannot be parsed" time="0" classname="Ensure empty configuration is returned when launch.json cannot be parsed">
    </testcase>
  </testsuite>
  <testsuite name="Unit Test Configuration Manager (unit)" timestamp="2021-11-08T22:03:40" tests="0" file="/home/don/development/vsc/vscode-python/out/test/testing/common/managers/testConfigurationManager.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="pytest" timestamp="2021-11-08T22:03:40" tests="1" file="/home/don/development/vsc/vscode-python/out/test/testing/common/managers/testConfigurationManager.unit.test.js" failures="0" time="0">
    <testcase name="Unit Test Configuration Manager (unit) pytest Enabling a test product shoud disable other products" time="0" classname="Enabling a test product shoud disable other products">
    </testcase>
  </testsuite>
  <testsuite name="unittest" timestamp="2021-11-08T22:03:40" tests="1" file="/home/don/development/vsc/vscode-python/out/test/testing/common/managers/testConfigurationManager.unit.test.js" failures="0" time="0">
    <testcase name="Unit Test Configuration Manager (unit) unittest Enabling a test product shoud disable other products" time="0" classname="Enabling a test product shoud disable other products">
    </testcase>
  </testsuite>
  <testsuite name="Unit Tests - ConfigSettingsService" timestamp="2021-11-08T22:03:40" tests="0" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Test &apos;updateTestArgs&apos; method with pytest" timestamp="2021-11-08T22:03:40" tests="4" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0.001">
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Update Test Arguments with workspace Uri without workspaces" time="0" classname="Update Test Arguments with workspace Uri without workspaces">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Update Test Arguments with workspace Uri with one workspace" time="0.001" classname="Update Test Arguments with workspace Uri with one workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace" time="0" classname="Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace" time="0" classname="Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace">
    </testcase>
  </testsuite>
  <testsuite name="Test &apos;disable&apos; method with pytest" timestamp="2021-11-08T22:03:40" tests="4" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0.003">
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Update Test Arguments with workspace Uri without workspaces" time="0.001" classname="Update Test Arguments with workspace Uri without workspaces">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Update Test Arguments with workspace Uri with one workspace" time="0" classname="Update Test Arguments with workspace Uri with one workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace" time="0.002" classname="Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace" time="0" classname="Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace">
    </testcase>
  </testsuite>
  <testsuite name="Test &apos;enable&apos; method with pytest" timestamp="2021-11-08T22:03:40" tests="4" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0.001">
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Update Test Arguments with workspace Uri without workspaces" time="0" classname="Update Test Arguments with workspace Uri without workspaces">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Update Test Arguments with workspace Uri with one workspace" time="0.001" classname="Update Test Arguments with workspace Uri with one workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace" time="0" classname="Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace" time="0" classname="Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace">
    </testcase>
  </testsuite>
  <testsuite name="Test &apos;updateTestArgs&apos; method with unittest" timestamp="2021-11-08T22:03:40" tests="4" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0.004">
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Update Test Arguments with workspace Uri without workspaces" time="0.001" classname="Update Test Arguments with workspace Uri without workspaces">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Update Test Arguments with workspace Uri with one workspace" time="0" classname="Update Test Arguments with workspace Uri with one workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace" time="0.001" classname="Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace" time="0.002" classname="Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace">
    </testcase>
  </testsuite>
  <testsuite name="Test &apos;disable&apos; method with unittest" timestamp="2021-11-08T22:03:40" tests="4" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0.001">
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Update Test Arguments with workspace Uri without workspaces" time="0.001" classname="Update Test Arguments with workspace Uri without workspaces">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Update Test Arguments with workspace Uri with one workspace" time="0" classname="Update Test Arguments with workspace Uri with one workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace" time="0" classname="Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace" time="0" classname="Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace">
    </testcase>
  </testsuite>
  <testsuite name="Test &apos;enable&apos; method with unittest" timestamp="2021-11-08T22:03:40" tests="4" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0.002">
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Update Test Arguments with workspace Uri without workspaces" time="0" classname="Update Test Arguments with workspace Uri without workspaces">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Update Test Arguments with workspace Uri with one workspace" time="0.001" classname="Update Test Arguments with workspace Uri with one workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace" time="0" classname="Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace">
    </testcase>
    <testcase name="Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace" time="0.001" classname="Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace">
    </testcase>
  </testsuite>
  <testsuite name="Unit Tests - BufferedTestConfigSettingsService" timestamp="2021-11-08T22:03:40" tests="2" file="/home/don/development/vsc/vscode-python/out/test/testing/common/services/configSettingService.unit.test.js" failures="0" time="0">
    <testcase name="Unit Tests - BufferedTestConfigSettingsService config changes are pushed when apply() is called" time="0" classname="config changes are pushed when apply() is called">
    </testcase>
    <testcase name="Unit Tests - BufferedTestConfigSettingsService applied changes are cleared" time="0" classname="applied changes are cleared">
    </testcase>
  </testsuite>
  <testsuite name="Unit Tests - ConfigurationService" timestamp="2021-11-08T22:03:40" tests="0" file="/home/don/development/vsc/vscode-python/out/test/testing/configuration.unit.test.js" failures="0" time="0">
  </testsuite>
  <testsuite name="pytest" timestamp="2021-11-08T22:03:40" tests="12" file="/home/don/development/vsc/vscode-python/out/test/testing/configuration.unit.test.js" failures="0" time="0.006">
    <testcase name="Unit Tests - ConfigurationService pytest Enable Test when setting testing.promptToConfigure is enabled" time="0.001" classname="Enable Test when setting testing.promptToConfigure is enabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Enable Test when setting testing.promptToConfigure is disabled" time="0" classname="Enable Test when setting testing.promptToConfigure is disabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings" time="0" classname="Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Select Test runner displays 2 items" time="0" classname="Select Test runner displays 2 items">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Ensure selected item is returned" time="0" classname="Ensure selected item is returned">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Ensure undefined is returned when nothing is selected" time="0" classname="Ensure undefined is returned when nothing is selected">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Prompt to enable a test if a test framework is not enabled" time="0.001" classname="Prompt to enable a test if a test framework is not enabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Prompt to select a test if a test framework is not enabled" time="0.001" classname="Prompt to select a test if a test framework is not enabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Configure selected test framework and disable others" time="0.001" classname="Configure selected test framework and disable others">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest If more than one test framework is enabled, then prompt to select a test framework" time="0" classname="If more than one test framework is enabled, then prompt to select a test framework">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure" time="0.001" classname="If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService pytest Prompt to enable and configure selected test framework" time="0.001" classname="Prompt to enable and configure selected test framework">
    </testcase>
  </testsuite>
  <testsuite name="unittest" timestamp="2021-11-08T22:03:40" tests="12" file="/home/don/development/vsc/vscode-python/out/test/testing/configuration.unit.test.js" failures="0" time="0.003">
    <testcase name="Unit Tests - ConfigurationService unittest Enable Test when setting testing.promptToConfigure is enabled" time="0" classname="Enable Test when setting testing.promptToConfigure is enabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Enable Test when setting testing.promptToConfigure is disabled" time="0.001" classname="Enable Test when setting testing.promptToConfigure is disabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings" time="0" classname="Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Select Test runner displays 2 items" time="0" classname="Select Test runner displays 2 items">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Ensure selected item is returned" time="0" classname="Ensure selected item is returned">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Ensure undefined is returned when nothing is selected" time="0" classname="Ensure undefined is returned when nothing is selected">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Prompt to enable a test if a test framework is not enabled" time="0" classname="Prompt to enable a test if a test framework is not enabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Prompt to select a test if a test framework is not enabled" time="0.001" classname="Prompt to select a test if a test framework is not enabled">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Configure selected test framework and disable others" time="0.001" classname="Configure selected test framework and disable others">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest If more than one test framework is enabled, then prompt to select a test framework" time="0" classname="If more than one test framework is enabled, then prompt to select a test framework">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure" time="0" classname="If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure">
    </testcase>
    <testcase name="Unit Tests - ConfigurationService unittest Prompt to enable and configure selected test framework" time="0" classname="Prompt to enable and configure selected test framework">
    </testcase>
  </testsuite>
  <testsuite name="Unit Tests - ConfigurationManagerFactory" timestamp="2021-11-08T22:03:40" tests="2" file="/home/don/development/vsc/vscode-python/out/test/testing/configurationFactory.unit.test.js" failures="0" time="0">
    <testcase name="Unit Tests - ConfigurationManagerFactory Create Unit Test Configuration" time="0" classname="Create Unit Test Configuration">
    </testcase>
    <testcase name="Unit Tests - ConfigurationManagerFactory Create pytest Configuration" time="0" classname="Create pytest Configuration">
    </testcase>
  </testsuite>
</testsuites>